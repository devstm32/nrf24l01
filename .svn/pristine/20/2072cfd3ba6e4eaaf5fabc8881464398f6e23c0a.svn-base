
build/rotaryEnc.elf:     file format elf32-littlearm


Disassembly of section .text:

08000140 <Reset_Handler>:
 8000140:	b672      	cpsid	i
 8000142:	4821      	ldr	r0, [pc, #132]	; (80001c8 <endfiniloop+0x4>)
 8000144:	f380 8809 	msr	PSP, r0
 8000148:	2002      	movs	r0, #2
 800014a:	f380 8814 	msr	CONTROL, r0
 800014e:	f3bf 8f6f 	isb	sy
 8000152:	f001 f96d 	bl	8001430 <__core_init>
 8000156:	f001 fd63 	bl	8001c20 <__early_init>
 800015a:	481c      	ldr	r0, [pc, #112]	; (80001cc <endfiniloop+0x8>)
 800015c:	491c      	ldr	r1, [pc, #112]	; (80001d0 <endfiniloop+0xc>)
 800015e:	4a1d      	ldr	r2, [pc, #116]	; (80001d4 <endfiniloop+0x10>)

08000160 <msloop>:
 8000160:	4291      	cmp	r1, r2
 8000162:	bf3c      	itt	cc
 8000164:	f841 0b04 	strcc.w	r0, [r1], #4
 8000168:	e7fa      	bcc.n	8000160 <msloop>
 800016a:	491b      	ldr	r1, [pc, #108]	; (80001d8 <endfiniloop+0x14>)
 800016c:	4a16      	ldr	r2, [pc, #88]	; (80001c8 <endfiniloop+0x4>)

0800016e <psloop>:
 800016e:	4291      	cmp	r1, r2
 8000170:	bf3c      	itt	cc
 8000172:	f841 0b04 	strcc.w	r0, [r1], #4
 8000176:	e7fa      	bcc.n	800016e <psloop>
 8000178:	4918      	ldr	r1, [pc, #96]	; (80001dc <endfiniloop+0x18>)
 800017a:	4a19      	ldr	r2, [pc, #100]	; (80001e0 <endfiniloop+0x1c>)
 800017c:	4b19      	ldr	r3, [pc, #100]	; (80001e4 <endfiniloop+0x20>)

0800017e <dloop>:
 800017e:	429a      	cmp	r2, r3
 8000180:	bf3e      	ittt	cc
 8000182:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000186:	f842 0b04 	strcc.w	r0, [r2], #4
 800018a:	e7f8      	bcc.n	800017e <dloop>
 800018c:	2000      	movs	r0, #0
 800018e:	4916      	ldr	r1, [pc, #88]	; (80001e8 <endfiniloop+0x24>)
 8000190:	4a16      	ldr	r2, [pc, #88]	; (80001ec <endfiniloop+0x28>)

08000192 <bloop>:
 8000192:	4291      	cmp	r1, r2
 8000194:	bf3c      	itt	cc
 8000196:	f841 0b04 	strcc.w	r0, [r1], #4
 800019a:	e7fa      	bcc.n	8000192 <bloop>
 800019c:	f001 f940 	bl	8001420 <__late_init>
 80001a0:	4c13      	ldr	r4, [pc, #76]	; (80001f0 <endfiniloop+0x2c>)
 80001a2:	4d14      	ldr	r5, [pc, #80]	; (80001f4 <endfiniloop+0x30>)

080001a4 <initloop>:
 80001a4:	42ac      	cmp	r4, r5
 80001a6:	da03      	bge.n	80001b0 <endinitloop>
 80001a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80001ac:	4788      	blx	r1
 80001ae:	e7f9      	b.n	80001a4 <initloop>

080001b0 <endinitloop>:
 80001b0:	f002 f8de 	bl	8002370 <main>
 80001b4:	4c10      	ldr	r4, [pc, #64]	; (80001f8 <endfiniloop+0x34>)
 80001b6:	4d11      	ldr	r5, [pc, #68]	; (80001fc <endfiniloop+0x38>)

080001b8 <finiloop>:
 80001b8:	42ac      	cmp	r4, r5
 80001ba:	da03      	bge.n	80001c4 <endfiniloop>
 80001bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80001c0:	4788      	blx	r1
 80001c2:	e7f9      	b.n	80001b8 <finiloop>

080001c4 <endfiniloop>:
 80001c4:	f001 b924 	b.w	8001410 <__default_exit>
 80001c8:	20000800 	.word	0x20000800
 80001cc:	55555555 	.word	0x55555555
 80001d0:	20000000 	.word	0x20000000
 80001d4:	20000400 	.word	0x20000400
 80001d8:	20000400 	.word	0x20000400
 80001dc:	080035c8 	.word	0x080035c8
 80001e0:	20000800 	.word	0x20000800
 80001e4:	20000840 	.word	0x20000840
 80001e8:	20000840 	.word	0x20000840
 80001ec:	20000e58 	.word	0x20000e58
 80001f0:	08000140 	.word	0x08000140
 80001f4:	08000140 	.word	0x08000140
 80001f8:	08000140 	.word	0x08000140
 80001fc:	08000140 	.word	0x08000140

08000200 <_port_switch>:
 8000200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000204:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000208:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800020c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000210 <_port_thread_start>:
 8000210:	2300      	movs	r3, #0
 8000212:	f383 8811 	msr	BASEPRI, r3
 8000216:	4628      	mov	r0, r5
 8000218:	47a0      	blx	r4
 800021a:	2000      	movs	r0, #0
 800021c:	f001 f888 	bl	8001330 <chThdExit>

08000220 <_port_switch_from_isr>:
 8000220:	f001 f89e 	bl	8001360 <chSchDoReschedule>

08000224 <_port_exit_from_isr>:
 8000224:	df00      	svc	0
 8000226:	e7fe      	b.n	8000226 <_port_exit_from_isr+0x2>
	...

08000230 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8000230:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 8000232:	b430      	push	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8000234:	fa02 f301 	lsl.w	r3, r2, r1
 8000238:	8904      	ldrh	r4, [r0, #8]
 800023a:	b29b      	uxth	r3, r3
 800023c:	ea13 0504 	ands.w	r5, r3, r4
 8000240:	d002      	beq.n	8000248 <usbStartTransmitI+0x18>
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 8000242:	bc30      	pop	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
 8000244:	4610      	mov	r0, r2
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 8000246:	4770      	bx	lr
 8000248:	0089      	lsls	r1, r1, #2
 800024a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800024e:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8000252:	680a      	ldr	r2, [r1, #0]

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000254:	4323      	orrs	r3, r4
 8000256:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800025a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800025e:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 8000262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000266:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800026a:	8103      	strh	r3, [r0, #8]
  usb_lld_start_in(usbp, ep);
  return false;
 800026c:	4628      	mov	r0, r5
}
 800026e:	bc30      	pop	{r4, r5}
 8000270:	600a      	str	r2, [r1, #0]
 8000272:	4770      	bx	lr
	...

08000280 <set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8000280:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8000284:	6842      	ldr	r2, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8000286:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 800028a:	4906      	ldr	r1, [pc, #24]	; (80002a4 <set_address+0x24>)
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800028c:	6812      	ldr	r2, [r2, #0]
 800028e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8000292:	b510      	push	{r4, lr}
 8000294:	4604      	mov	r4, r0
 8000296:	64cb      	str	r3, [r1, #76]	; 0x4c

  usbp->address = usbp->setup[2];
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8000298:	b10a      	cbz	r2, 800029e <set_address+0x1e>
 800029a:	2101      	movs	r1, #1
 800029c:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 800029e:	2303      	movs	r3, #3
 80002a0:	7023      	strb	r3, [r4, #0]
 80002a2:	bd10      	pop	{r4, pc}
 80002a4:	40005c00 	.word	0x40005c00
	...

080002b0 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
	...

080002c0 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 80002c0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80002c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80002c8:	2b20      	cmp	r3, #32
 80002ca:	d001      	beq.n	80002d0 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 80002cc:	2000      	movs	r0, #0
    }
  }
  return false;
}
 80002ce:	4770      	bx	lr
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 80002d0:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 80002d4:	2b21      	cmp	r3, #33	; 0x21
 80002d6:	d003      	beq.n	80002e0 <sduRequestsHook+0x20>
 80002d8:	2b22      	cmp	r3, #34	; 0x22
 80002da:	d009      	beq.n	80002f0 <sduRequestsHook+0x30>
 80002dc:	2b20      	cmp	r3, #32
 80002de:	d1f5      	bne.n	80002cc <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80002e0:	4906      	ldr	r1, [pc, #24]	; (80002fc <sduRequestsHook+0x3c>)
 80002e2:	2207      	movs	r2, #7
 80002e4:	2300      	movs	r3, #0
 80002e6:	6681      	str	r1, [r0, #104]	; 0x68
 80002e8:	66c2      	str	r2, [r0, #108]	; 0x6c
 80002ea:	6703      	str	r3, [r0, #112]	; 0x70
      return true;
 80002ec:	2001      	movs	r0, #1
 80002ee:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80002f0:	2300      	movs	r3, #0
 80002f2:	6683      	str	r3, [r0, #104]	; 0x68
 80002f4:	66c3      	str	r3, [r0, #108]	; 0x6c
 80002f6:	6703      	str	r3, [r0, #112]	; 0x70
      return true;
 80002f8:	2001      	movs	r0, #1
 80002fa:	4770      	bx	lr
 80002fc:	20000800 	.word	0x20000800

08000300 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000300:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000304:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000306:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800030a:	2300      	movs	r3, #0
 800030c:	f383 8811 	msr	BASEPRI, r3
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
	...

08000320 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000320:	b410      	push	{r4}
 8000322:	2320      	movs	r3, #32
 8000324:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000328:	4c09      	ldr	r4, [pc, #36]	; (8000350 <chCoreAlloc+0x30>)
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <chCoreAlloc+0x34>)
 800032c:	6822      	ldr	r2, [r4, #0]
 800032e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8000330:	1dc3      	adds	r3, r0, #7
 8000332:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000336:	1a89      	subs	r1, r1, r2
 8000338:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800033a:	bf9d      	ittte	ls
 800033c:	189b      	addls	r3, r3, r2
 800033e:	6023      	strls	r3, [r4, #0]

  return p;
 8000340:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8000342:	2000      	movhi	r0, #0
 8000344:	2300      	movs	r3, #0
 8000346:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800034a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	20000cc0 	.word	0x20000cc0
 8000354:	20000cc8 	.word	0x20000cc8
	...

08000360 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000360:	b410      	push	{r4}
 8000362:	2320      	movs	r3, #32
 8000364:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000368:	7f03      	ldrb	r3, [r0, #28]
 800036a:	2b07      	cmp	r3, #7
 800036c:	d80e      	bhi.n	800038c <wakeup+0x2c>
 800036e:	e8df f003 	tbb	[pc, r3]
 8000372:	0d27      	.short	0x0d27
 8000374:	0408230d 	.word	0x0408230d
 8000378:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800037a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800037c:	6893      	ldr	r3, [r2, #8]
 800037e:	3301      	adds	r3, #1
 8000380:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000382:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000386:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000388:	6802      	ldr	r2, [r0, #0]
 800038a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800038c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000390:	2200      	movs	r2, #0
 8000392:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000396:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000398:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800039a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	428a      	cmp	r2, r1
 80003a0:	d2fb      	bcs.n	800039a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80003a2:	685a      	ldr	r2, [r3, #4]
 80003a4:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80003a6:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 80003a8:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 80003aa:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80003ac:	6058      	str	r0, [r3, #4]
 80003ae:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80003b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003b6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 80003b8:	6a03      	ldr	r3, [r0, #32]
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	e7e5      	b.n	800038c <wakeup+0x2c>
 80003c0:	2300      	movs	r3, #0
 80003c2:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80003c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	20000cf0 	.word	0x20000cf0

080003d0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80003d0:	b410      	push	{r4}
 80003d2:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80003d4:	2200      	movs	r2, #0
 80003d6:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80003da:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80003dc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80003de:	689a      	ldr	r2, [r3, #8]
 80003e0:	428a      	cmp	r2, r1
 80003e2:	d2fb      	bcs.n	80003dc <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80003e4:	685a      	ldr	r2, [r3, #4]
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 80003e6:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80003e8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80003ea:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80003ec:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80003ee:	605c      	str	r4, [r3, #4]

  return tp;
}
 80003f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	20000cf0 	.word	0x20000cf0
 80003fc:	00000000 	.word	0x00000000

08000400 <_idle_thread.lto_priv.36>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000400:	e7fe      	b.n	8000400 <_idle_thread.lto_priv.36>
 8000402:	bf00      	nop
	...

08000410 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8000410:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8000414:	b538      	push	{r3, r4, r5, lr}
 8000416:	2a06      	cmp	r2, #6
 8000418:	d80a      	bhi.n	8000430 <_usb_ep0out+0x20>
 800041a:	2301      	movs	r3, #1
 800041c:	4093      	lsls	r3, r2
 800041e:	f013 0f67 	tst.w	r3, #103	; 0x67
 8000422:	4604      	mov	r4, r0
 8000424:	d111      	bne.n	800044a <_usb_ep0out+0x3a>
 8000426:	f013 0508 	ands.w	r5, r3, #8
 800042a:	d102      	bne.n	8000432 <_usb_ep0out+0x22>
 800042c:	06db      	lsls	r3, r3, #27
 800042e:	d42e      	bmi.n	800048e <_usb_ep0out+0x7e>
 8000430:	bd38      	pop	{r3, r4, r5, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 8000432:	68c3      	ldr	r3, [r0, #12]
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d1f9      	bne.n	8000430 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800043c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800043e:	b103      	cbz	r3, 8000442 <_usb_ep0out+0x32>
      usbp->ep0endcb(usbp);
 8000440:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8000442:	2300      	movs	r3, #0
 8000444:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000448:	bd38      	pop	{r3, r4, r5, pc}
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800044a:	4a1c      	ldr	r2, [pc, #112]	; (80004bc <_usb_ep0out+0xac>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800044c:	6841      	ldr	r1, [r0, #4]
 800044e:	6813      	ldr	r3, [r2, #0]
 8000450:	680d      	ldr	r5, [r1, #0]
 8000452:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800045a:	f083 0310 	eor.w	r3, r3, #16
 800045e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000466:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000468:	6813      	ldr	r3, [r2, #0]
 800046a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800046e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000472:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800047a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800047e:	6013      	str	r3, [r2, #0]
 8000480:	b10d      	cbz	r5, 8000486 <_usb_ep0out+0x76>
 8000482:	2105      	movs	r1, #5
 8000484:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8000486:	2306      	movs	r3, #6
 8000488:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800048c:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800048e:	68c3      	ldr	r3, [r0, #12]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8000490:	2205      	movs	r2, #5
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000492:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000494:	4629      	mov	r1, r5

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8000496:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800049a:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800049c:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800049e:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 80004a0:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 80004a2:	f001 fc05 	bl	8001cb0 <usb_lld_prepare_transmit>
 80004a6:	2320      	movs	r3, #32
 80004a8:	f383 8811 	msr	BASEPRI, r3
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, 0);
 80004ac:	4620      	mov	r0, r4
 80004ae:	4629      	mov	r1, r5
 80004b0:	f7ff febe 	bl	8000230 <usbStartTransmitI>
 80004b4:	f385 8811 	msr	BASEPRI, r5
 80004b8:	bd38      	pop	{r3, r4, r5, pc}
 80004ba:	bf00      	nop
 80004bc:	40005c00 	.word	0x40005c00

080004c0 <onotify.lto_priv.35>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 80004c2:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80004c4:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 80004c8:	6813      	ldr	r3, [r2, #0]
 80004ca:	7819      	ldrb	r1, [r3, #0]
 80004cc:	2904      	cmp	r1, #4
 80004ce:	d000      	beq.n	80004d2 <onotify.lto_priv.35+0x12>
 80004d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004d2:	7a21      	ldrb	r1, [r4, #8]
 80004d4:	2902      	cmp	r1, #2
 80004d6:	d1fb      	bne.n	80004d0 <onotify.lto_priv.35+0x10>
    return;
  }

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80004d8:	7912      	ldrb	r2, [r2, #4]
 80004da:	891b      	ldrh	r3, [r3, #8]
 80004dc:	2601      	movs	r6, #1
 80004de:	fa06 f202 	lsl.w	r2, r6, r2
 80004e2:	ea12 0503 	ands.w	r5, r2, r3
 80004e6:	d1f3      	bne.n	80004d0 <onotify.lto_priv.35+0x10>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 80004e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80004ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80004ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80004ee:	1ad3      	subs	r3, r2, r3
    if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	d0ed      	beq.n	80004d0 <onotify.lto_priv.35+0x10>
 80004f4:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();

      usbPrepareQueuedTransmit(sdup->config->usbp,
 80004f8:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 80004fc:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8000500:	680a      	ldr	r2, [r1, #0]
 8000502:	7909      	ldrb	r1, [r1, #4]
  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000504:	4610      	mov	r0, r2
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000506:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800050a:	68d2      	ldr	r2, [r2, #12]
 800050c:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 800050e:	6053      	str	r3, [r2, #4]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 8000510:	7016      	strb	r6, [r2, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8000512:	6095      	str	r5, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 8000514:	60d7      	str	r7, [r2, #12]
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000516:	f001 fbcb 	bl	8001cb0 <usb_lld_prepare_transmit>
 800051a:	2320      	movs	r3, #32
 800051c:	f383 8811 	msr	BASEPRI, r3
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8000520:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8000524:	6818      	ldr	r0, [r3, #0]
 8000526:	7919      	ldrb	r1, [r3, #4]
    }
  }
}
 8000528:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      usbPrepareQueuedTransmit(sdup->config->usbp,
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 800052c:	f7ff be80 	b.w	8000230 <usbStartTransmitI>

08000530 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000532:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000534:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8000536:	6994      	ldr	r4, [r2, #24]

  tqp->p_next = tp->p_next;
 8000538:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800053a:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 800053c:	2600      	movs	r6, #0
 800053e:	68a1      	ldr	r1, [r4, #8]
 8000540:	462b      	mov	r3, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000542:	606a      	str	r2, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000544:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000546:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000548:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800054a:	7726      	strb	r6, [r4, #28]
 800054c:	e000      	b.n	8000550 <chSchDoRescheduleAhead+0x20>
 800054e:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8000550:	689a      	ldr	r2, [r3, #8]
 8000552:	428a      	cmp	r2, r1
 8000554:	d8fb      	bhi.n	800054e <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8000556:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000558:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800055a:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 800055c:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = otp;
 800055e:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8000560:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 8000562:	bcf0      	pop	{r4, r5, r6, r7}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000564:	f7ff be4c 	b.w	8000200 <_port_switch>
 8000568:	20000cf0 	.word	0x20000cf0
 800056c:	00000000 	.word	0x00000000

08000570 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000572:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000574:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000576:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8000578:	6814      	ldr	r4, [r2, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800057a:	2501      	movs	r5, #1
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 800057c:	7708      	strb	r0, [r1, #28]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800057e:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000580:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000582:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8000584:	4610      	mov	r0, r2
}
 8000586:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000588:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800058a:	f7ff be39 	b.w	8000200 <_port_switch>
 800058e:	bf00      	nop
 8000590:	20000cf0 	.word	0x20000cf0
	...

080005a0 <chSchGoSleepTimeoutS>:
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80005a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80005a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80005a8:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80005aa:	b086      	sub	sp, #24

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80005ac:	d051      	beq.n	8000652 <chSchGoSleepTimeoutS+0xb2>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 80005ae:	4c49      	ldr	r4, [pc, #292]	; (80006d4 <chSchGoSleepTimeoutS+0x134>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80005b0:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80005b4:	4625      	mov	r5, r4
 80005b6:	f855 2f1c 	ldr.w	r2, [r5, #28]!
 80005ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80005bc:	2901      	cmp	r1, #1
 80005be:	4606      	mov	r6, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 80005c0:	f8df e114 	ldr.w	lr, [pc, #276]	; 80006d8 <chSchGoSleepTimeoutS+0x138>
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 80005c4:	69a0      	ldr	r0, [r4, #24]
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80005c6:	bf98      	it	ls
 80005c8:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80005ca:	42aa      	cmp	r2, r5
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 80005cc:	9005      	str	r0, [sp, #20]
 80005ce:	b29b      	uxth	r3, r3
  vtp->vt_func = vtfunc;
 80005d0:	f8cd e010 	str.w	lr, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80005d4:	d064      	beq.n	80006a0 <chSchGoSleepTimeoutS+0x100>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80005d6:	4419      	add	r1, r3
 80005d8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80005da:	b289      	uxth	r1, r1
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80005dc:	8910      	ldrh	r0, [r2, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80005de:	1acb      	subs	r3, r1, r3
 80005e0:	b29b      	uxth	r3, r3
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80005e2:	4283      	cmp	r3, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80005e4:	bf38      	it	cc
 80005e6:	6379      	strcc	r1, [r7, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80005e8:	4283      	cmp	r3, r0
 80005ea:	d905      	bls.n	80005f8 <chSchGoSleepTimeoutS+0x58>
    delta -= p->vt_delta;
    p = p->vt_next;
 80005ec:	6812      	ldr	r2, [r2, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 80005ee:	1a1b      	subs	r3, r3, r0
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80005f0:	8910      	ldrh	r0, [r2, #8]
    delta -= p->vt_delta;
 80005f2:	b29b      	uxth	r3, r3
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d3f9      	bcc.n	80005ec <chSchGoSleepTimeoutS+0x4c>
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
 80005f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 80005fc:	6851      	ldr	r1, [r2, #4]
  vtp->vt_prev->vt_next = vtp;
 80005fe:	f10d 0804 	add.w	r8, sp, #4
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000602:	9102      	str	r1, [sp, #8]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8000604:	9201      	str	r2, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8000606:	f8c1 8000 	str.w	r8, [r1]
  p->vt_prev = vtp;
 800060a:	f8c2 8004 	str.w	r8, [r2, #4]
  vtp->vt_delta = delta
 800060e:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000612:	8911      	ldrh	r1, [r2, #8]
 8000614:	1acb      	subs	r3, r1, r3
 8000616:	8113      	strh	r3, [r2, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000618:	84a0      	strh	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 800061a:	4630      	mov	r0, r6
 800061c:	f7ff ffa8 	bl	8000570 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000620:	9b04      	ldr	r3, [sp, #16]
 8000622:	b18b      	cbz	r3, 8000648 <chSchGoSleepTimeoutS+0xa8>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000624:	69e3      	ldr	r3, [r4, #28]
 8000626:	4a2b      	ldr	r2, [pc, #172]	; (80006d4 <chSchGoSleepTimeoutS+0x134>)
 8000628:	4543      	cmp	r3, r8
 800062a:	d01a      	beq.n	8000662 <chSchGoSleepTimeoutS+0xc2>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800062c:	9a02      	ldr	r2, [sp, #8]
 800062e:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 8000630:	2100      	movs	r1, #0

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8000632:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000634:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000636:	42ab      	cmp	r3, r5
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000638:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 800063a:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800063c:	d004      	beq.n	8000648 <chSchGoSleepTimeoutS+0xa8>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800063e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8000642:	891a      	ldrh	r2, [r3, #8]
 8000644:	440a      	add	r2, r1
 8000646:	811a      	strh	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000648:	69a3      	ldr	r3, [r4, #24]
}
 800064a:	6a18      	ldr	r0, [r3, #32]
 800064c:	b006      	add	sp, #24
 800064e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8000652:	f7ff ff8d 	bl	8000570 <chSchGoSleepS>
 8000656:	4c1f      	ldr	r4, [pc, #124]	; (80006d4 <chSchGoSleepTimeoutS+0x134>)
  }

  return currp->p_u.rdymsg;
 8000658:	69a3      	ldr	r3, [r4, #24]
}
 800065a:	6a18      	ldr	r0, [r3, #32]
 800065c:	b006      	add	sp, #24
 800065e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000662:	9e01      	ldr	r6, [sp, #4]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000664:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000666:	42ae      	cmp	r6, r5

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000668:	61d6      	str	r6, [r2, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800066a:	6075      	str	r5, [r6, #4]
  vtp->vt_func = NULL;
 800066c:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800066e:	d02c      	beq.n	80006ca <chSchGoSleepTimeoutS+0x12a>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000670:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000674:	6a41      	ldr	r1, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000676:	8cd5      	ldrh	r5, [r2, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000678:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 800067c:	8933      	ldrh	r3, [r6, #8]
 800067e:	b28a      	uxth	r2, r1
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000680:	1b51      	subs	r1, r2, r5

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000682:	443b      	add	r3, r7
 8000684:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000686:	b289      	uxth	r1, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000688:	428b      	cmp	r3, r1

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800068a:	8133      	strh	r3, [r6, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 800068c:	d9dc      	bls.n	8000648 <chSchGoSleepTimeoutS+0xa8>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 800068e:	1a5b      	subs	r3, r3, r1
 8000690:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000692:	2b01      	cmp	r3, #1
 8000694:	bf98      	it	ls
 8000696:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8000698:	4413      	add	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800069a:	b29b      	uxth	r3, r3
 800069c:	6343      	str	r3, [r0, #52]	; 0x34
 800069e:	e7d3      	b.n	8000648 <chSchGoSleepTimeoutS+0xa8>
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 80006a0:	18ca      	adds	r2, r1, r3
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 80006a2:	f10d 0804 	add.w	r8, sp, #4
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80006a6:	b292      	uxth	r2, r2
  STM32_ST_TIM->SR     = 0;
 80006a8:	f04f 0e00 	mov.w	lr, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80006ac:	2002      	movs	r0, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 80006ae:	84e3      	strh	r3, [r4, #38]	; 0x26
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 80006b0:	9501      	str	r5, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80006b2:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;
 80006b4:	f8ad 100c 	strh.w	r1, [sp, #12]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 80006b8:	f8c4 801c 	str.w	r8, [r4, #28]
      ch.vtlist.vt_prev = vtp;
 80006bc:	f8c4 8020 	str.w	r8, [r4, #32]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80006c0:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80006c2:	f8c7 e010 	str.w	lr, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	e7a7      	b.n	800061a <chSchGoSleepTimeoutS+0x7a>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80006ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ce:	60d3      	str	r3, [r2, #12]
 80006d0:	e7ba      	b.n	8000648 <chSchGoSleepTimeoutS+0xa8>
 80006d2:	bf00      	nop
 80006d4:	20000cf0 	.word	0x20000cf0
 80006d8:	08000361 	.word	0x08000361
 80006dc:	00000000 	.word	0x00000000

080006e0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80006e0:	b169      	cbz	r1, 80006fe <chThdEnqueueTimeoutS+0x1e>
 80006e2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80006e6:	b410      	push	{r4}

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80006e8:	699b      	ldr	r3, [r3, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80006ea:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80006ec:	2004      	movs	r0, #4
 80006ee:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 80006f2:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 80006f4:	6053      	str	r3, [r2, #4]
}
 80006f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80006fa:	f7ff bf51 	b.w	80005a0 <chSchGoSleepTimeoutS>
}
 80006fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000702:	4770      	bx	lr
 8000704:	20000cf0 	.word	0x20000cf0
	...

08000710 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8000710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000714:	b083      	sub	sp, #12
 8000716:	4604      	mov	r4, r0
 8000718:	468b      	mov	fp, r1
 800071a:	4615      	mov	r5, r2
 800071c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800071e:	69c7      	ldr	r7, [r0, #28]
 8000720:	f04f 0820 	mov.w	r8, #32
 8000724:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8000728:	2600      	movs	r6, #0
 800072a:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800072c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800072e:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8000732:	b1fb      	cbz	r3, 8000774 <chOQWriteTimeout+0x64>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000734:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8000736:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000738:	1c50      	adds	r0, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800073a:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800073c:	6160      	str	r0, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800073e:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000740:	f89b 3000 	ldrb.w	r3, [fp]
 8000744:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8000746:	6923      	ldr	r3, [r4, #16]
 8000748:	6962      	ldr	r2, [r4, #20]
 800074a:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800074c:	bf24      	itt	cs
 800074e:	68e3      	ldrcs	r3, [r4, #12]
 8000750:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8000752:	b10f      	cbz	r7, 8000758 <chOQWriteTimeout+0x48>
      nfy(oqp);
 8000754:	4620      	mov	r0, r4
 8000756:	47b8      	blx	r7
 8000758:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800075c:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 800075e:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8000762:	d011      	beq.n	8000788 <chOQWriteTimeout+0x78>
 8000764:	f388 8811 	msr	BASEPRI, r8
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000768:	46d3      	mov	fp, sl
 800076a:	68a3      	ldr	r3, [r4, #8]
 800076c:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8000770:	2b00      	cmp	r3, #0
 8000772:	d1df      	bne.n	8000734 <chOQWriteTimeout+0x24>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8000774:	4620      	mov	r0, r4
 8000776:	9901      	ldr	r1, [sp, #4]
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	f7ff ffb1 	bl	80006e0 <chThdEnqueueTimeoutS>
 800077e:	9b00      	ldr	r3, [sp, #0]
 8000780:	2800      	cmp	r0, #0
 8000782:	d0d3      	beq.n	800072c <chOQWriteTimeout+0x1c>
 8000784:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8000788:	4630      	mov	r0, r6
 800078a:	b003      	add	sp, #12
 800078c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000790 <writet.lto_priv.45>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
 8000790:	3030      	adds	r0, #48	; 0x30
 8000792:	f7ff bfbd 	b.w	8000710 <chOQWriteTimeout>
 8000796:	bf00      	nop
	...

080007a0 <write.lto_priv.39>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 80007a0:	3030      	adds	r0, #48	; 0x30
 80007a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007a6:	f7ff bfb3 	b.w	8000710 <chOQWriteTimeout>
 80007aa:	bf00      	nop
 80007ac:	0000      	movs	r0, r0
	...

080007b0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80007b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b2:	4604      	mov	r4, r0
 80007b4:	460f      	mov	r7, r1
 80007b6:	4616      	mov	r6, r2
 80007b8:	2320      	movs	r3, #32
 80007ba:	f383 8811 	msr	BASEPRI, r3
 80007be:	e005      	b.n	80007cc <chOQPutTimeout+0x1c>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80007c0:	4620      	mov	r0, r4
 80007c2:	4631      	mov	r1, r6
 80007c4:	f7ff ff8c 	bl	80006e0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80007c8:	2800      	cmp	r0, #0
 80007ca:	db17      	blt.n	80007fc <chOQPutTimeout+0x4c>
 80007cc:	68a5      	ldr	r5, [r4, #8]
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 80007ce:	2d00      	cmp	r5, #0
 80007d0:	d0f6      	beq.n	80007c0 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80007d2:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80007d4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80007d6:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80007d8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80007da:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80007dc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80007de:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80007e0:	6923      	ldr	r3, [r4, #16]
 80007e2:	6962      	ldr	r2, [r4, #20]
 80007e4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80007e6:	bf24      	itt	cs
 80007e8:	68e3      	ldrcs	r3, [r4, #12]
 80007ea:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 80007ec:	69e3      	ldr	r3, [r4, #28]
 80007ee:	b10b      	cbz	r3, 80007f4 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 80007f0:	4620      	mov	r0, r4
 80007f2:	4798      	blx	r3
 80007f4:	2000      	movs	r0, #0
 80007f6:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 80007fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007fc:	f385 8811 	msr	BASEPRI, r5
 8000800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000802:	bf00      	nop
	...

08000810 <putt.lto_priv.43>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 8000810:	3030      	adds	r0, #48	; 0x30
 8000812:	f7ff bfcd 	b.w	80007b0 <chOQPutTimeout>
 8000816:	bf00      	nop
	...

08000820 <put.lto_priv.41>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000820:	3030      	adds	r0, #48	; 0x30
 8000822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000826:	f7ff bfc3 	b.w	80007b0 <chOQPutTimeout>
 800082a:	bf00      	nop
 800082c:	0000      	movs	r0, r0
	...

08000830 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8000830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000834:	4604      	mov	r4, r0
 8000836:	b083      	sub	sp, #12
 8000838:	4689      	mov	r9, r1
 800083a:	4693      	mov	fp, r2
 800083c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800083e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000842:	2720      	movs	r7, #32
 8000844:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8000848:	2600      	movs	r6, #0
 800084a:	46b2      	mov	sl, r6
 800084c:	9701      	str	r7, [sp, #4]

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800084e:	f1b8 0f00 	cmp.w	r8, #0
 8000852:	d007      	beq.n	8000864 <chIQReadTimeout+0x34>
      nfy(iqp);
 8000854:	4620      	mov	r0, r4
 8000856:	47c0      	blx	r8
 8000858:	e004      	b.n	8000864 <chIQReadTimeout+0x34>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800085a:	4620      	mov	r0, r4
 800085c:	4629      	mov	r1, r5
 800085e:	f7ff ff3f 	bl	80006e0 <chThdEnqueueTimeoutS>
 8000862:	b9d0      	cbnz	r0, 800089a <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8000864:	68a7      	ldr	r7, [r4, #8]
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8000866:	2f00      	cmp	r7, #0
 8000868:	d0f7      	beq.n	800085a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800086a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800086c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800086e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000870:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8000872:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000874:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000876:	7813      	ldrb	r3, [r2, #0]
 8000878:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800087c:	6923      	ldr	r3, [r4, #16]
 800087e:	69a2      	ldr	r2, [r4, #24]
 8000880:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8000882:	bf24      	itt	cs
 8000884:	68e3      	ldrcs	r3, [r4, #12]
 8000886:	61a3      	strcs	r3, [r4, #24]
 8000888:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800088c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800088e:	45b3      	cmp	fp, r6
 8000890:	d005      	beq.n	800089e <chIQReadTimeout+0x6e>
 8000892:	9b01      	ldr	r3, [sp, #4]
 8000894:	f383 8811 	msr	BASEPRI, r3
 8000898:	e7d9      	b.n	800084e <chIQReadTimeout+0x1e>
 800089a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800089e:	4630      	mov	r0, r6
 80008a0:	b003      	add	sp, #12
 80008a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008a6:	bf00      	nop
	...

080008b0 <readt.lto_priv.46>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, timeout);
 80008b0:	300c      	adds	r0, #12
 80008b2:	f7ff bfbd 	b.w	8000830 <chIQReadTimeout>
 80008b6:	bf00      	nop
	...

080008c0 <read.lto_priv.40>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 80008c0:	300c      	adds	r0, #12
 80008c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c6:	f7ff bfb3 	b.w	8000830 <chIQReadTimeout>
 80008ca:	bf00      	nop
 80008cc:	0000      	movs	r0, r0
	...

080008d0 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	2320      	movs	r3, #32
 80008d4:	460e      	mov	r6, r1
 80008d6:	4604      	mov	r4, r0
 80008d8:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 80008dc:	69c3      	ldr	r3, [r0, #28]
 80008de:	b13b      	cbz	r3, 80008f0 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 80008e0:	4798      	blx	r3
 80008e2:	e005      	b.n	80008f0 <chIQGetTimeout+0x20>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80008e4:	4620      	mov	r0, r4
 80008e6:	4631      	mov	r1, r6
 80008e8:	f7ff fefa 	bl	80006e0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80008ec:	2800      	cmp	r0, #0
 80008ee:	db13      	blt.n	8000918 <chIQGetTimeout+0x48>
 80008f0:	68a5      	ldr	r5, [r4, #8]
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0f6      	beq.n	80008e4 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80008f6:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 80008f8:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 80008fa:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80008fc:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 80008fe:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8000900:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8000902:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8000904:	bf28      	it	cs
 8000906:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000908:	61a2      	str	r2, [r4, #24]
 800090a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800090c:	bf28      	it	cs
 800090e:	61a3      	strcs	r3, [r4, #24]
 8000910:	2300      	movs	r3, #0
 8000912:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f385 8811 	msr	BASEPRI, r5
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	bf00      	nop

08000920 <gett.lto_priv.44>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 8000920:	300c      	adds	r0, #12
 8000922:	f7ff bfd5 	b.w	80008d0 <chIQGetTimeout>
 8000926:	bf00      	nop
	...

08000930 <get.lto_priv.42>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 8000930:	300c      	adds	r0, #12
 8000932:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000936:	f7ff bfcb 	b.w	80008d0 <chIQGetTimeout>
 800093a:	bf00      	nop
 800093c:	0000      	movs	r0, r0
	...

08000940 <usbStartReceiveI>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 8000940:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 8000942:	b430      	push	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 8000944:	fa02 f301 	lsl.w	r3, r2, r1
 8000948:	8944      	ldrh	r4, [r0, #10]
 800094a:	b29b      	uxth	r3, r3
 800094c:	ea13 0504 	ands.w	r5, r3, r4
 8000950:	d002      	beq.n	8000958 <usbStartReceiveI+0x18>
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 8000952:	bc30      	pop	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
 8000954:	4610      	mov	r0, r2
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 8000956:	4770      	bx	lr
 8000958:	0089      	lsls	r1, r1, #2
 800095a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800095e:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8000962:	680a      	ldr	r2, [r1, #0]

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000964:	4323      	orrs	r3, r4
 8000966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800096a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800096e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8000972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000976:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800097a:	8143      	strh	r3, [r0, #10]
  usb_lld_start_out(usbp, ep);
  return false;
 800097c:	4628      	mov	r0, r5
}
 800097e:	bc30      	pop	{r4, r5}
 8000980:	600a      	str	r2, [r1, #0]
 8000982:	4770      	bx	lr
	...

08000990 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000990:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8000992:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000996:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8000998:	2b06      	cmp	r3, #6
 800099a:	d826      	bhi.n	80009ea <_usb_ep0in+0x5a>
 800099c:	e8df f003 	tbb	[pc, r3]
 80009a0:	042d4504 	.word	0x042d4504
 80009a4:	2604      	.short	0x2604
 80009a6:	04          	.byte	0x04
 80009a7:	00          	.byte	0x00
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80009a8:	4a33      	ldr	r2, [pc, #204]	; (8000a78 <_usb_ep0in+0xe8>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80009aa:	6841      	ldr	r1, [r0, #4]
 80009ac:	6813      	ldr	r3, [r2, #0]
 80009ae:	680d      	ldr	r5, [r1, #0]
 80009b0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80009b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009b8:	f083 0310 	eor.w	r3, r3, #16
 80009bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c4:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80009c6:	6813      	ldr	r3, [r2, #0]
 80009c8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80009cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80009d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009dc:	6013      	str	r3, [r2, #0]
 80009de:	b10d      	cbz	r5, 80009e4 <_usb_ep0in+0x54>
 80009e0:	2105      	movs	r1, #5
 80009e2:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 80009e4:	2306      	movs	r3, #6
 80009e6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80009ea:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 80009ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80009ee:	b103      	cbz	r3, 80009f2 <_usb_ep0in+0x62>
      usbp->ep0endcb(usbp);
 80009f0:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80009f8:	bd38      	pop	{r3, r4, r5, pc}
 80009fa:	68c3      	ldr	r3, [r0, #12]
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80009fc:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = false;
 80009fe:	2500      	movs	r5, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8000a00:	2203      	movs	r2, #3
 8000a02:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8000a06:	4629      	mov	r1, r5
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000a08:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 8000a0a:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 8000a0c:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8000a0e:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8000a10:	4620      	mov	r0, r4
 8000a12:	f001 f98d 	bl	8001d30 <usb_lld_prepare_receive>
 8000a16:	2320      	movs	r3, #32
 8000a18:	f383 8811 	msr	BASEPRI, r3
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, 0);
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	4629      	mov	r1, r5
 8000a20:	f7ff ff8e 	bl	8000940 <usbStartReceiveI>
 8000a24:	f385 8811 	msr	BASEPRI, r5
 8000a28:	bd38      	pop	{r3, r4, r5, pc}

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8000a2a:	f890 207b 	ldrb.w	r2, [r0, #123]	; 0x7b
 8000a2e:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000a32:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 8000a34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000a38:	428b      	cmp	r3, r1
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8000a3a:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000a3c:	d9de      	bls.n	80009fc <_usb_ep0in+0x6c>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8000a3e:	8a1d      	ldrh	r5, [r3, #16]
 8000a40:	fbb1 f2f5 	udiv	r2, r1, r5
 8000a44:	fb05 1512 	mls	r5, r5, r2, r1
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d1d7      	bne.n	80009fc <_usb_ep0in+0x6c>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000a4c:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000a4e:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000a50:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8000a52:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8000a54:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8000a56:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000a58:	f001 f92a 	bl	8001cb0 <usb_lld_prepare_transmit>
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	f383 8811 	msr	BASEPRI, r3
       transmitted.*/
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8000a62:	4620      	mov	r0, r4
 8000a64:	4629      	mov	r1, r5
 8000a66:	f7ff fbe3 	bl	8000230 <usbStartTransmitI>
 8000a6a:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000a74:	bd38      	pop	{r3, r4, r5, pc}
 8000a76:	bf00      	nop
 8000a78:	40005c00 	.word	0x40005c00
 8000a7c:	00000000 	.word	0x00000000

08000a80 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a82:	4604      	mov	r4, r0
  stm32_usb_pma_t *pmap;
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
 8000a84:	4bbc      	ldr	r3, [pc, #752]	; (8000d78 <_usb_ep0setup+0x2f8>)
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8000a86:	2200      	movs	r2, #0
 8000a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a8a:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 8000a8e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000a92:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000a96:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8000a9a:	0049      	lsls	r1, r1, #1
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8000a9c:	688b      	ldr	r3, [r1, #8]
  usbReadSetup(usbp, ep, usbp->setup);
 8000a9e:	f100 0274 	add.w	r2, r0, #116	; 0x74
 8000aa2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000aa6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	f100 067c 	add.w	r6, r0, #124	; 0x7c
  for (n = 0; n < 4; n++) {
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8000ab0:	f853 1b04 	ldr.w	r1, [r3], #4
 8000ab4:	f822 1b02 	strh.w	r1, [r2], #2
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
  pmap = USB_ADDR2PTR(udp->RXADDR0);
  for (n = 0; n < 4; n++) {
 8000ab8:	42b2      	cmp	r2, r6
 8000aba:	d1f9      	bne.n	8000ab0 <_usb_ep0setup+0x30>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8000abc:	6863      	ldr	r3, [r4, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	b36b      	cbz	r3, 8000b1e <_usb_ep0setup+0x9e>
      !(usbp->config->requests_hook_cb(usbp))) {
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8000ac6:	b350      	cbz	r0, 8000b1e <_usb_ep0setup+0x9e>
 8000ac8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8000aca:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8000ace:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 8000ad2:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 8000ad6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 8000ada:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 8000adc:	bf3c      	itt	cc
 8000ade:	4615      	movcc	r5, r2
 8000ae0:	66e2      	strcc	r2, [r4, #108]	; 0x6c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8000ae2:	f013 0f80 	tst.w	r3, #128	; 0x80
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000ae6:	68e3      	ldr	r3, [r4, #12]
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8000ae8:	f040 80b2 	bne.w	8000c50 <_usb_ep0setup+0x1d0>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	f040 8097 	bne.w	8000c20 <_usb_ep0setup+0x1a0>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000af2:	695b      	ldr	r3, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 8000af4:	2205      	movs	r2, #5
 8000af6:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000afa:	4620      	mov	r0, r4
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000afc:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8000afe:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8000b00:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8000b02:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000b04:	4629      	mov	r1, r5
 8000b06:	f001 f8d3 	bl	8001cb0 <usb_lld_prepare_transmit>
 8000b0a:	2320      	movs	r3, #32
 8000b0c:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8000b10:	4620      	mov	r0, r4
 8000b12:	4629      	mov	r1, r5
 8000b14:	f7ff fb8c 	bl	8000230 <usbStartTransmitI>
 8000b18:	f385 8811 	msr	BASEPRI, r5
 8000b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8000b1e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000b22:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 8000b26:	d022      	beq.n	8000b6e <_usb_ep0setup+0xee>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000b28:	4a93      	ldr	r2, [pc, #588]	; (8000d78 <_usb_ep0setup+0x2f8>)
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8000b2a:	6861      	ldr	r1, [r4, #4]
 8000b2c:	6813      	ldr	r3, [r2, #0]
 8000b2e:	680d      	ldr	r5, [r1, #0]
 8000b30:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b38:	f083 0310 	eor.w	r3, r3, #16
 8000b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b44:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000b46:	6813      	ldr	r3, [r2, #0]
 8000b48:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	b115      	cbz	r5, 8000b66 <_usb_ep0setup+0xe6>
 8000b60:	4620      	mov	r0, r4
 8000b62:	2105      	movs	r1, #5
 8000b64:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8000b66:	2306      	movs	r3, #6
 8000b68:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 8000b6e:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8000b76:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000b7a:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8000b7e:	f000 811a 	beq.w	8000db6 <_usb_ep0setup+0x336>
 8000b82:	d918      	bls.n	8000bb6 <_usb_ep0setup+0x136>
 8000b84:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8000b88:	f000 80fc 	beq.w	8000d84 <_usb_ep0setup+0x304>
 8000b8c:	f240 808f 	bls.w	8000cae <_usb_ep0setup+0x22e>
 8000b90:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 8000b94:	f000 8099 	beq.w	8000cca <_usb_ep0setup+0x24a>
 8000b98:	f640 4202 	movw	r2, #3074	; 0xc02
 8000b9c:	4295      	cmp	r5, r2
 8000b9e:	f000 80e3 	beq.w	8000d68 <_usb_ep0setup+0x2e8>
 8000ba2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000ba6:	d1bf      	bne.n	8000b28 <_usb_ep0setup+0xa8>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8000ba8:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 8000bac:	2501      	movs	r5, #1
 8000bae:	6727      	str	r7, [r4, #112]	; 0x70
 8000bb0:	66a2      	str	r2, [r4, #104]	; 0x68
 8000bb2:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000bb4:	e78b      	b.n	8000ace <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000bb6:	2d02      	cmp	r5, #2
 8000bb8:	f000 810d 	beq.w	8000dd6 <_usb_ep0setup+0x356>
 8000bbc:	f240 80ca 	bls.w	8000d54 <_usb_ep0setup+0x2d4>
 8000bc0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000bc4:	f000 8094 	beq.w	8000cf0 <_usb_ep0setup+0x270>
 8000bc8:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 8000bcc:	d1ac      	bne.n	8000b28 <_usb_ep0setup+0xa8>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8000bce:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	d1a8      	bne.n	8000b28 <_usb_ep0setup+0xa8>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8000bd6:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8000bda:	f011 020f 	ands.w	r2, r1, #15
 8000bde:	d01a      	beq.n	8000c16 <_usb_ep0setup+0x196>
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000be6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8000bea:	f011 0f80 	tst.w	r1, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8000bee:	6811      	ldr	r1, [r2, #0]
 8000bf0:	f040 8115 	bne.w	8000e1e <_usb_ep0setup+0x39e>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8000bf4:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 8000bf8:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8000bfc:	d00b      	beq.n	8000c16 <_usb_ep0setup+0x196>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8000bfe:	6813      	ldr	r3, [r2, #0]
 8000c00:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c08:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8000c16:	2500      	movs	r5, #0
 8000c18:	66a5      	str	r5, [r4, #104]	; 0x68
 8000c1a:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000c1c:	6725      	str	r5, [r4, #112]	; 0x70
 8000c1e:	e756      	b.n	8000ace <_usb_ep0setup+0x4e>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000c20:	699b      	ldr	r3, [r3, #24]
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 8000c22:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000c24:	2600      	movs	r6, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8000c26:	2104      	movs	r1, #4
 8000c28:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8000c2c:	4620      	mov	r0, r4
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
 8000c2e:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 8000c30:	605d      	str	r5, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000c32:	701e      	strb	r6, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8000c34:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8000c36:	4631      	mov	r1, r6
 8000c38:	f001 f87a 	bl	8001d30 <usb_lld_prepare_receive>
 8000c3c:	2320      	movs	r3, #32
 8000c3e:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 8000c42:	4620      	mov	r0, r4
 8000c44:	4631      	mov	r1, r6
 8000c46:	f7ff fe7b 	bl	8000940 <usbStartReceiveI>
 8000c4a:	f386 8811 	msr	BASEPRI, r6
 8000c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 8000c50:	b1bd      	cbz	r5, 8000c82 <_usb_ep0setup+0x202>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000c52:	695b      	ldr	r3, [r3, #20]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 8000c54:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000c56:	2600      	movs	r6, #0
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8000c58:	2101      	movs	r1, #1
 8000c5a:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000c5e:	4620      	mov	r0, r4
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 8000c60:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 8000c62:	605d      	str	r5, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000c64:	701e      	strb	r6, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8000c66:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000c68:	4631      	mov	r1, r6
 8000c6a:	f001 f821 	bl	8001cb0 <usb_lld_prepare_transmit>
 8000c6e:	2320      	movs	r3, #32
 8000c70:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8000c74:	4620      	mov	r0, r4
 8000c76:	4631      	mov	r1, r6
 8000c78:	f7ff fada 	bl	8000230 <usbStartTransmitI>
 8000c7c:	f386 8811 	msr	BASEPRI, r6
 8000c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000c82:	699b      	ldr	r3, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 8000c84:	2203      	movs	r2, #3
 8000c86:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8000c8a:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000c8c:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 8000c8e:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 8000c90:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8000c92:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8000c94:	4629      	mov	r1, r5
 8000c96:	f001 f84b 	bl	8001d30 <usb_lld_prepare_receive>
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	4629      	mov	r1, r5
 8000ca4:	f7ff fe4c 	bl	8000940 <usbStartReceiveI>
 8000ca8:	f385 8811 	msr	BASEPRI, r5
 8000cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000cae:	f240 3202 	movw	r2, #770	; 0x302
 8000cb2:	4295      	cmp	r5, r2
 8000cb4:	d02c      	beq.n	8000d10 <_usb_ep0setup+0x290>
 8000cb6:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 8000cba:	f47f af35 	bne.w	8000b28 <_usb_ep0setup+0xa8>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
      set_address(usbp);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8000cbe:	4a2f      	ldr	r2, [pc, #188]	; (8000d7c <_usb_ep0setup+0x2fc>)
 8000cc0:	66a7      	str	r7, [r4, #104]	; 0x68
 8000cc2:	66e7      	str	r7, [r4, #108]	; 0x6c
 8000cc4:	463d      	mov	r5, r7
 8000cc6:	6722      	str	r2, [r4, #112]	; 0x70
 8000cc8:	e701      	b.n	8000ace <_usb_ep0setup+0x4e>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 8000cca:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000cce:	f884 207f 	strb.w	r2, [r4, #127]	; 0x7f
    if (usbp->configuration == 0U) {
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	f040 8095 	bne.w	8000e02 <_usb_ep0setup+0x382>
      usbp->state = USB_SELECTED;
 8000cd8:	2203      	movs	r2, #3
 8000cda:	7022      	strb	r2, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8000cdc:	6862      	ldr	r2, [r4, #4]
 8000cde:	6812      	ldr	r2, [r2, #0]
 8000ce0:	2a00      	cmp	r2, #0
 8000ce2:	d098      	beq.n	8000c16 <_usb_ep0setup+0x196>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4790      	blx	r2
 8000cea:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000cee:	e792      	b.n	8000c16 <_usb_ep0setup+0x196>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8000cf0:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000cf4:	2a01      	cmp	r2, #1
 8000cf6:	f47f af17 	bne.w	8000b28 <_usb_ep0setup+0xa8>
      usbp->status &= ~2U;
 8000cfa:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000cfe:	66a7      	str	r7, [r4, #104]	; 0x68
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8000d00:	f022 0202 	bic.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000d04:	66e7      	str	r7, [r4, #108]	; 0x6c
 8000d06:	6727      	str	r7, [r4, #112]	; 0x70
 8000d08:	463d      	mov	r5, r7
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8000d0a:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 8000d0e:	e6de      	b.n	8000ace <_usb_ep0setup+0x4e>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8000d10:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f47f af07 	bne.w	8000b28 <_usb_ep0setup+0xa8>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8000d1a:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8000d1e:	f011 020f 	ands.w	r2, r1, #15
 8000d22:	f43f af78 	beq.w	8000c16 <_usb_ep0setup+0x196>
 8000d26:	0093      	lsls	r3, r2, #2
 8000d28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d2c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8000d30:	0609      	lsls	r1, r1, #24
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	f100 8087 	bmi.w	8000e46 <_usb_ep0setup+0x3c6>
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000d38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000d3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000d40:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8000d44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000d52:	e760      	b.n	8000c16 <_usb_ep0setup+0x196>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000d54:	b92d      	cbnz	r5, 8000d62 <_usb_ep0setup+0x2e2>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8000d56:	2202      	movs	r2, #2
 8000d58:	6725      	str	r5, [r4, #112]	; 0x70
 8000d5a:	66a6      	str	r6, [r4, #104]	; 0x68
 8000d5c:	66e2      	str	r2, [r4, #108]	; 0x6c
 8000d5e:	4615      	mov	r5, r2
 8000d60:	e6b5      	b.n	8000ace <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000d62:	2d01      	cmp	r5, #1
 8000d64:	f47f aee0 	bne.w	8000b28 <_usb_ep0setup+0xa8>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8000d68:	4905      	ldr	r1, [pc, #20]	; (8000d80 <_usb_ep0setup+0x300>)
 8000d6a:	2502      	movs	r5, #2
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	66a1      	str	r1, [r4, #104]	; 0x68
 8000d70:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000d72:	6722      	str	r2, [r4, #112]	; 0x70
 8000d74:	e6ab      	b.n	8000ace <_usb_ep0setup+0x4e>
 8000d76:	bf00      	nop
 8000d78:	40005c00 	.word	0x40005c00
 8000d7c:	08000281 	.word	0x08000281
 8000d80:	08002f90 	.word	0x08002f90
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8000d84:	6861      	ldr	r1, [r4, #4]

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8000d86:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 8000d8a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8000d8e:	684d      	ldr	r5, [r1, #4]
 8000d90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d94:	4620      	mov	r0, r4
 8000d96:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8000d9a:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000d9e:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 8000da0:	2800      	cmp	r0, #0
 8000da2:	f43f aec1 	beq.w	8000b28 <_usb_ep0setup+0xa8>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8000da6:	6843      	ldr	r3, [r0, #4]
 8000da8:	6805      	ldr	r5, [r0, #0]
 8000daa:	66a3      	str	r3, [r4, #104]	; 0x68
 8000dac:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000dae:	6727      	str	r7, [r4, #112]	; 0x70
 8000db0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000db4:	e68b      	b.n	8000ace <_usb_ep0setup+0x4e>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8000db6:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000dba:	2a01      	cmp	r2, #1
 8000dbc:	f47f aeb4 	bne.w	8000b28 <_usb_ep0setup+0xa8>
      usbp->status |= 2U;
 8000dc0:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000dc4:	66a7      	str	r7, [r4, #104]	; 0x68
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8000dc6:	f042 0202 	orr.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000dca:	66e7      	str	r7, [r4, #108]	; 0x6c
 8000dcc:	6727      	str	r7, [r4, #112]	; 0x70
 8000dce:	463d      	mov	r5, r7
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8000dd0:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 8000dd4:	e67b      	b.n	8000ace <_usb_ep0setup+0x4e>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8000dd6:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8000dda:	4922      	ldr	r1, [pc, #136]	; (8000e64 <_usb_ep0setup+0x3e4>)
 8000ddc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000de0:	f002 020f 	and.w	r2, r2, #15
 8000de4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000de8:	d10e      	bne.n	8000e08 <_usb_ep0setup+0x388>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8000dea:	f412 5240 	ands.w	r2, r2, #12288	; 0x3000
 8000dee:	f43f ae9b 	beq.w	8000b28 <_usb_ep0setup+0xa8>
 8000df2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000df6:	d10d      	bne.n	8000e14 <_usb_ep0setup+0x394>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8000df8:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <_usb_ep0setup+0x3e8>)
 8000dfa:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000dfc:	6727      	str	r7, [r4, #112]	; 0x70
 8000dfe:	66a2      	str	r2, [r4, #104]	; 0x68
 8000e00:	e665      	b.n	8000ace <_usb_ep0setup+0x4e>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 8000e02:	2204      	movs	r2, #4
 8000e04:	7022      	strb	r2, [r4, #0]
 8000e06:	e769      	b.n	8000cdc <_usb_ep0setup+0x25c>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8000e08:	f012 0230 	ands.w	r2, r2, #48	; 0x30
 8000e0c:	f43f ae8c 	beq.w	8000b28 <_usb_ep0setup+0xa8>
 8000e10:	2a10      	cmp	r2, #16
 8000e12:	d0f1      	beq.n	8000df8 <_usb_ep0setup+0x378>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8000e14:	4a15      	ldr	r2, [pc, #84]	; (8000e6c <_usb_ep0setup+0x3ec>)
 8000e16:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000e18:	6727      	str	r7, [r4, #112]	; 0x70
 8000e1a:	66a2      	str	r2, [r4, #104]	; 0x68
 8000e1c:	e657      	b.n	8000ace <_usb_ep0setup+0x4e>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8000e1e:	f001 0130 	and.w	r1, r1, #48	; 0x30
 8000e22:	2930      	cmp	r1, #48	; 0x30
 8000e24:	f43f aef7 	beq.w	8000c16 <_usb_ep0setup+0x196>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8000e28:	6813      	ldr	r3, [r2, #0]
 8000e2a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e32:	f083 0320 	eor.w	r3, r3, #32
 8000e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000e44:	e6e7      	b.n	8000c16 <_usb_ep0setup+0x196>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000e46:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e4e:	f082 0210 	eor.w	r2, r2, #16
 8000e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000e60:	e6d9      	b.n	8000c16 <_usb_ep0setup+0x196>
 8000e62:	bf00      	nop
 8000e64:	40005c00 	.word	0x40005c00
 8000e68:	08002fb0 	.word	0x08002fb0
 8000e6c:	08002fa0 	.word	0x08002fa0

08000e70 <inotify.lto_priv.34>:
/**
 * @brief   Notification of data removed from the input queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void inotify(io_queue_t *qp) {
 8000e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = qGetLink(qp);
 8000e72:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000e74:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8000e78:	6813      	ldr	r3, [r2, #0]
 8000e7a:	7819      	ldrb	r1, [r3, #0]
 8000e7c:	2904      	cmp	r1, #4
 8000e7e:	d000      	beq.n	8000e82 <inotify.lto_priv.34+0x12>
 8000e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e82:	7a21      	ldrb	r1, [r4, #8]
 8000e84:	2902      	cmp	r1, #2
 8000e86:	d1fb      	bne.n	8000e80 <inotify.lto_priv.34+0x10>
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8000e88:	7951      	ldrb	r1, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8000e8a:	2601      	movs	r6, #1
 8000e8c:	895a      	ldrh	r2, [r3, #10]
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8000e8e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000e92:	68db      	ldr	r3, [r3, #12]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8000e94:	fa06 f101 	lsl.w	r1, r6, r1
 8000e98:	ea11 0502 	ands.w	r5, r1, r2
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8000e9c:	8a58      	ldrh	r0, [r3, #18]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8000e9e:	d1ef      	bne.n	8000e80 <inotify.lto_priv.34+0x10>
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 8000ea0:	69a3      	ldr	r3, [r4, #24]
 8000ea2:	69e2      	ldr	r2, [r4, #28]
 8000ea4:	6961      	ldr	r1, [r4, #20]
 8000ea6:	1ad2      	subs	r2, r2, r3
 8000ea8:	1a53      	subs	r3, r2, r1
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8000eaa:	4298      	cmp	r0, r3
 8000eac:	d8e8      	bhi.n	8000e80 <inotify.lto_priv.34+0x10>
 8000eae:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();

      n = (n / maxsize) * maxsize;
 8000eb2:	fbb3 f3f0 	udiv	r3, r3, r0
      usbPrepareQueuedReceive(sdup->config->usbp,
 8000eb6:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
      osalSysUnlock();

      n = (n / maxsize) * maxsize;
 8000eba:	fb00 f303 	mul.w	r3, r0, r3
      usbPrepareQueuedReceive(sdup->config->usbp,
 8000ebe:	7951      	ldrb	r1, [r2, #5]
 8000ec0:	6810      	ldr	r0, [r2, #0]
 8000ec2:	f104 070c 	add.w	r7, r4, #12
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000ec6:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8000eca:	68d2      	ldr	r2, [r2, #12]
 8000ecc:	6992      	ldr	r2, [r2, #24]

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 8000ece:	6053      	str	r3, [r2, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 8000ed0:	7016      	strb	r6, [r2, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8000ed2:	6095      	str	r5, [r2, #8]
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
 8000ed4:	60d7      	str	r7, [r2, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8000ed6:	f000 ff2b 	bl	8001d30 <usb_lld_prepare_receive>
 8000eda:	2320      	movs	r3, #32
 8000edc:	f383 8811 	msr	BASEPRI, r3
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8000ee0:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	7959      	ldrb	r1, [r3, #5]
    }
  }
}
 8000ee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      usbPrepareQueuedReceive(sdup->config->usbp,
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8000eec:	f7ff bd28 	b.w	8000940 <usbStartReceiveI>

08000ef0 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 8000ef0:	6953      	ldr	r3, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8000ef2:	b570      	push	{r4, r5, r6, lr}
 8000ef4:	4614      	mov	r4, r2
 8000ef6:	4606      	mov	r6, r0
 8000ef8:	460d      	mov	r5, r1
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 8000efa:	b123      	cbz	r3, 8000f06 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8000efc:	4618      	mov	r0, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	2210      	movs	r2, #16
 8000f02:	f001 ff8d 	bl	8002e20 <memset>
  }
  if (epcp->out_state != NULL) {
 8000f06:	69a0      	ldr	r0, [r4, #24]
 8000f08:	b118      	cbz	r0, 8000f12 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2214      	movs	r2, #20
 8000f0e:	f001 ff87 	bl	8002e20 <memset>
  }

  usbp->epc[ep] = epcp;
 8000f12:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8000f16:	60dc      	str	r4, [r3, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8000f18:	4630      	mov	r0, r6
 8000f1a:	4629      	mov	r1, r5
}
 8000f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  usbp->epc[ep] = epcp;

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8000f20:	f000 bf6e 	b.w	8001e00 <usb_lld_init_endpoint>
	...

08000f30 <_port_irq_epilogue>:
 8000f30:	2320      	movs	r3, #32
 8000f32:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <_port_irq_epilogue+0x44>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000f3e:	d102      	bne.n	8000f46 <_port_irq_epilogue+0x16>
 8000f40:	f383 8811 	msr	BASEPRI, r3
 8000f44:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000f46:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000f4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f4e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8000f52:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000f56:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <_port_irq_epilogue+0x48>)
 8000f5c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8000f5e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000f60:	6889      	ldr	r1, [r1, #8]
 8000f62:	6892      	ldr	r2, [r2, #8]
 8000f64:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000f66:	bf8c      	ite	hi
 8000f68:	4a04      	ldrhi	r2, [pc, #16]	; (8000f7c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000f6a:	4a05      	ldrls	r2, [pc, #20]	; (8000f80 <_port_irq_epilogue+0x50>)
 8000f6c:	f843 2c08 	str.w	r2, [r3, #-8]
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00
 8000f78:	20000cf0 	.word	0x20000cf0
 8000f7c:	08000221 	.word	0x08000221
 8000f80:	08000224 	.word	0x08000224
	...

08000f90 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000f94:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000f98:	6923      	ldr	r3, [r4, #16]
 8000f9a:	079b      	lsls	r3, r3, #30
 8000f9c:	d403      	bmi.n	8000fa6 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8000f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000fa2:	f7ff bfc5 	b.w	8000f30 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8000fa6:	2700      	movs	r7, #0
 8000fa8:	6127      	str	r7, [r4, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000faa:	2520      	movs	r5, #32
 8000fac:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8000fb0:	4e1e      	ldr	r6, [pc, #120]	; (800102c <VectorB0+0x9c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000fb2:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000fb4:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8000fb8:	69f3      	ldr	r3, [r6, #28]
 8000fba:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000fbc:	ebce 0100 	rsb	r1, lr, r0
 8000fc0:	891a      	ldrh	r2, [r3, #8]
 8000fc2:	b289      	uxth	r1, r1
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	f106 081c 	add.w	r8, r6, #28
 8000fca:	d31b      	bcc.n	8001004 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000fcc:	6819      	ldr	r1, [r3, #0]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000fce:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000fd0:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000fd2:	84f2      	strh	r2, [r6, #38]	; 0x26

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8000fd4:	68da      	ldr	r2, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000fd6:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8000fda:	61f1      	str	r1, [r6, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8000fdc:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000fde:	bf08      	it	eq
 8000fe0:	60e7      	streq	r7, [r4, #12]
 8000fe2:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8000fe6:	6918      	ldr	r0, [r3, #16]
 8000fe8:	4790      	blx	r2
 8000fea:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000fee:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000ff0:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8000ff4:	69f3      	ldr	r3, [r6, #28]
 8000ff6:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000ff8:	ebce 0100 	rsb	r1, lr, r0
 8000ffc:	891a      	ldrh	r2, [r3, #8]
 8000ffe:	b289      	uxth	r1, r1
 8001000:	428a      	cmp	r2, r1
 8001002:	d9e3      	bls.n	8000fcc <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8001004:	4543      	cmp	r3, r8
 8001006:	d00a      	beq.n	800101e <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8001008:	4472      	add	r2, lr
 800100a:	1a12      	subs	r2, r2, r0
 800100c:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800100e:	2a01      	cmp	r2, #1
 8001010:	bf98      	it	ls
 8001012:	2202      	movls	r2, #2
  }
  port_timer_set_alarm(now + delta);
 8001014:	4402      	add	r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001016:	b292      	uxth	r2, r2
 8001018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
 800101e:	2300      	movs	r3, #0
 8001020:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8001024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001028:	f7ff bf82 	b.w	8000f30 <_port_irq_epilogue>
 800102c:	20000cf0 	.word	0x20000cf0

08001030 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001032:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001034:	42a0      	cmp	r0, r4
 8001036:	d021      	beq.n	800107c <chEvtBroadcastFlagsI+0x4c>
 8001038:	460e      	mov	r6, r1
 800103a:	4607      	mov	r7, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800103c:	2500      	movs	r5, #0
 800103e:	e002      	b.n	8001046 <chEvtBroadcastFlagsI+0x16>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8001040:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001042:	42a7      	cmp	r7, r4
 8001044:	d01a      	beq.n	800107c <chEvtBroadcastFlagsI+0x4c>
  /*lint -restore*/
    elp->el_flags |= flags;
 8001046:	68e3      	ldr	r3, [r4, #12]
 8001048:	4333      	orrs	r3, r6
 800104a:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800104c:	b116      	cbz	r6, 8001054 <chEvtBroadcastFlagsI+0x24>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 800104e:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001050:	4213      	tst	r3, r2
 8001052:	d0f5      	beq.n	8001040 <chEvtBroadcastFlagsI+0x10>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8001054:	6860      	ldr	r0, [r4, #4]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001056:	68a3      	ldr	r3, [r4, #8]
 8001058:	6b41      	ldr	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800105a:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800105c:	430b      	orrs	r3, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800105e:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001060:	6343      	str	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001062:	d00c      	beq.n	800107e <chEvtBroadcastFlagsI+0x4e>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8001064:	2a0b      	cmp	r2, #11
 8001066:	d1eb      	bne.n	8001040 <chEvtBroadcastFlagsI+0x10>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8001068:	6a02      	ldr	r2, [r0, #32]
 800106a:	4013      	ands	r3, r2

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800106c:	429a      	cmp	r2, r3
 800106e:	d1e7      	bne.n	8001040 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8001070:	6205      	str	r5, [r0, #32]
    (void) chSchReadyI(tp);
 8001072:	f7ff f9ad 	bl	80003d0 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8001076:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001078:	42a7      	cmp	r7, r4
 800107a:	d1e4      	bne.n	8001046 <chEvtBroadcastFlagsI+0x16>
 800107c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800107e:	6a02      	ldr	r2, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001080:	4213      	tst	r3, r2
 8001082:	d0dd      	beq.n	8001040 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8001084:	6205      	str	r5, [r0, #32]
    (void) chSchReadyI(tp);
 8001086:	f7ff f9a3 	bl	80003d0 <chSchReadyI>
 800108a:	e7f4      	b.n	8001076 <chEvtBroadcastFlagsI+0x46>
 800108c:	0000      	movs	r0, r0
	...

08001090 <sduDataReceived>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001090:	f101 0311 	add.w	r3, r1, #17
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8001094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001098:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]

  if (sdup == NULL) {
 800109c:	b1bc      	cbz	r4, 80010ce <sduDataReceived+0x3e>
 800109e:	4607      	mov	r7, r0
 80010a0:	460d      	mov	r5, r1
 80010a2:	f04f 0820 	mov.w	r8, #32
 80010a6:	f388 8811 	msr	BASEPRI, r8
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80010aa:	2104      	movs	r1, #4
 80010ac:	1860      	adds	r0, r4, r1
 80010ae:	f7ff ffbf 	bl	8001030 <chEvtBroadcastFlagsI>
 80010b2:	eb07 0085 	add.w	r0, r7, r5, lsl #2
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 80010b6:	68c1      	ldr	r1, [r0, #12]
 80010b8:	69e2      	ldr	r2, [r4, #28]
 80010ba:	69a6      	ldr	r6, [r4, #24]
 80010bc:	6963      	ldr	r3, [r4, #20]
 80010be:	8a49      	ldrh	r1, [r1, #18]
 80010c0:	1b92      	subs	r2, r2, r6
 80010c2:	1ad3      	subs	r3, r2, r3
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 80010c4:	4299      	cmp	r1, r3
 80010c6:	d904      	bls.n	80010d2 <sduDataReceived+0x42>
 80010c8:	2300      	movs	r3, #0
 80010ca:	f383 8811 	msr	BASEPRI, r3
 80010ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010d2:	f04f 0e00 	mov.w	lr, #0
 80010d6:	f38e 8811 	msr	BASEPRI, lr
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80010de:	68c2      	ldr	r2, [r0, #12]
 80010e0:	fb01 f303 	mul.w	r3, r1, r3
 80010e4:	6992      	ldr	r2, [r2, #24]
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 80010e6:	340c      	adds	r4, #12

  osp->rxqueued           = true;
 80010e8:	2101      	movs	r1, #1
 80010ea:	7011      	strb	r1, [r2, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 80010ec:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 80010ee:	f8c2 e008 	str.w	lr, [r2, #8]
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
 80010f2:	60d4      	str	r4, [r2, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80010f4:	4638      	mov	r0, r7
 80010f6:	4629      	mov	r1, r5
 80010f8:	f000 fe1a 	bl	8001d30 <usb_lld_prepare_receive>
 80010fc:	f388 8811 	msr	BASEPRI, r8

    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, ep);
 8001100:	4638      	mov	r0, r7
 8001102:	4629      	mov	r1, r5
 8001104:	f7ff fc1c 	bl	8000940 <usbStartReceiveI>
 8001108:	e7de      	b.n	80010c8 <sduDataReceived+0x38>
 800110a:	bf00      	nop
 800110c:	0000      	movs	r0, r0
	...

08001110 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001112:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001116:	6a9c      	ldr	r4, [r3, #40]	; 0x28

  if (sdup == NULL) {
 8001118:	b1bc      	cbz	r4, 800114a <sduDataTransmitted+0x3a>
 800111a:	460e      	mov	r6, r1
 800111c:	4605      	mov	r5, r0
 800111e:	2720      	movs	r7, #32
 8001120:	f387 8811 	msr	BASEPRI, r7
 8001124:	2108      	movs	r1, #8
 8001126:	1d20      	adds	r0, r4, #4
 8001128:	f7ff ff82 	bl	8001030 <chEvtBroadcastFlagsI>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 800112c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800112e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001130:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001132:	1ad3      	subs	r3, r2, r3

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 8001134:	1a5b      	subs	r3, r3, r1
 8001136:	d118      	bne.n	800116a <sduDataTransmitted+0x5a>
 8001138:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800113c:	68cb      	ldr	r3, [r1, #12]
 800113e:	695a      	ldr	r2, [r3, #20]
 8001140:	6852      	ldr	r2, [r2, #4]
 8001142:	b91a      	cbnz	r2, 800114c <sduDataTransmitted+0x3c>
 8001144:	2300      	movs	r3, #0
 8001146:	f383 8811 	msr	BASEPRI, r3
 800114a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           ((usbp->epc[ep]->in_state->txsize &
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 800114c:	8a1b      	ldrh	r3, [r3, #16]
 800114e:	3b01      	subs	r3, #1
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001150:	4013      	ands	r3, r2
 8001152:	d1f7      	bne.n	8001144 <sduDataTransmitted+0x34>
 8001154:	f383 8811 	msr	BASEPRI, r3
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001158:	68ca      	ldr	r2, [r1, #12]
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 800115a:	3430      	adds	r4, #48	; 0x30
 800115c:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
 800115e:	2101      	movs	r1, #1
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 8001160:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 8001162:	6093      	str	r3, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 8001164:	60d4      	str	r4, [r2, #12]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 8001166:	7011      	strb	r1, [r2, #0]
 8001168:	e00c      	b.n	8001184 <sduDataTransmitted+0x74>
 800116a:	2100      	movs	r1, #0
 800116c:	f381 8811 	msr	BASEPRI, r1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001170:	eb05 0286 	add.w	r2, r5, r6, lsl #2
 8001174:	68d2      	ldr	r2, [r2, #12]
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);
 8001176:	3430      	adds	r4, #48	; 0x30
 8001178:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
 800117a:	2001      	movs	r0, #1
  isp->mode.queue.txqueue = oqp;
 800117c:	60d4      	str	r4, [r2, #12]
  isp->txsize             = n;
 800117e:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 8001180:	6091      	str	r1, [r2, #8]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 8001182:	7010      	strb	r0, [r2, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8001184:	4628      	mov	r0, r5
 8001186:	4631      	mov	r1, r6
 8001188:	f000 fd92 	bl	8001cb0 <usb_lld_prepare_transmit>
 800118c:	f387 8811 	msr	BASEPRI, r7
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
 8001190:	4628      	mov	r0, r5
 8001192:	4631      	mov	r1, r6
 8001194:	f7ff f84c 	bl	8000230 <usbStartTransmitI>
 8001198:	e7d4      	b.n	8001144 <sduDataTransmitted+0x34>
 800119a:	bf00      	nop
 800119c:	0000      	movs	r0, r0
	...

080011a0 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 80011a2:	6882      	ldr	r2, [r0, #8]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <chMtxLockS+0xc4>)
 80011a6:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 80011a8:	2a00      	cmp	r2, #0
 80011aa:	d055      	beq.n	8001258 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 80011ac:	68a1      	ldr	r1, [r4, #8]
 80011ae:	6893      	ldr	r3, [r2, #8]
 80011b0:	4605      	mov	r5, r0
 80011b2:	4299      	cmp	r1, r3
 80011b4:	d906      	bls.n	80011c4 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80011b6:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 80011b8:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d033      	beq.n	8001226 <chMtxLockS+0x86>
 80011be:	2b07      	cmp	r3, #7
 80011c0:	d01d      	beq.n	80011fe <chMtxLockS+0x5e>
 80011c2:	b19b      	cbz	r3, 80011ec <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80011c4:	462b      	mov	r3, r5
 80011c6:	e003      	b.n	80011d0 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80011c8:	6899      	ldr	r1, [r3, #8]
 80011ca:	68a2      	ldr	r2, [r4, #8]
 80011cc:	4291      	cmp	r1, r2
 80011ce:	d302      	bcc.n	80011d6 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80011d0:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80011d2:	429d      	cmp	r5, r3
 80011d4:	d1f8      	bne.n	80011c8 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80011d6:	685a      	ldr	r2, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80011d8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80011da:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80011dc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80011de:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 80011e0:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 80011e2:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 80011e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80011e8:	f7ff b9c2 	b.w	8000570 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80011ec:	e892 000a 	ldmia.w	r2, {r1, r3}
 80011f0:	6019      	str	r1, [r3, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 80011f2:	4610      	mov	r0, r2
  tp->p_next->p_prev = tp->p_prev;
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	6053      	str	r3, [r2, #4]
 80011f8:	f7ff f8ea 	bl	80003d0 <chSchReadyI>
 80011fc:	e7e2      	b.n	80011c4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80011fe:	6817      	ldr	r7, [r2, #0]
 8001200:	6850      	ldr	r0, [r2, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8001202:	6a16      	ldr	r6, [r2, #32]
 8001204:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001206:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001208:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	e002      	b.n	8001214 <chMtxLockS+0x74>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800120e:	6898      	ldr	r0, [r3, #8]
 8001210:	4288      	cmp	r0, r1
 8001212:	d302      	bcc.n	800121a <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001214:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001216:	429e      	cmp	r6, r3
 8001218:	d1f9      	bne.n	800120e <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800121a:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800121c:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 800121e:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8001220:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	e7ce      	b.n	80011c4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001226:	6817      	ldr	r7, [r2, #0]
 8001228:	6850      	ldr	r0, [r2, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800122a:	6a16      	ldr	r6, [r2, #32]
 800122c:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 800122e:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001230:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	e002      	b.n	800123c <chMtxLockS+0x9c>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001236:	6898      	ldr	r0, [r3, #8]
 8001238:	4288      	cmp	r0, r1
 800123a:	d302      	bcc.n	8001242 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800123c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800123e:	429e      	cmp	r6, r3
 8001240:	d1f9      	bne.n	8001236 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001242:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001244:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8001246:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8001248:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 800124a:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 800124c:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800124e:	68a1      	ldr	r1, [r4, #8]
 8001250:	6893      	ldr	r3, [r2, #8]
 8001252:	428b      	cmp	r3, r1
 8001254:	d3af      	bcc.n	80011b6 <chMtxLockS+0x16>
 8001256:	e7b5      	b.n	80011c4 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8001258:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 800125a:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 800125c:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 800125e:	63a0      	str	r0, [r4, #56]	; 0x38
 8001260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001262:	bf00      	nop
 8001264:	20000cf0 	.word	0x20000cf0
	...

08001270 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001272:	490f      	ldr	r1, [pc, #60]	; (80012b0 <chTMStopMeasurementX+0x40>)
 8001274:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8001276:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001278:	6f09      	ldr	r1, [r1, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800127e:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8001280:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8001282:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8001284:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8001288:	18e4      	adds	r4, r4, r3
 800128a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800128e:	3201      	adds	r2, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8001290:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8001292:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8001294:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8001296:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800129a:	d805      	bhi.n	80012a8 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 800129c:	6802      	ldr	r2, [r0, #0]
 800129e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 80012a0:	bf38      	it	cc
 80012a2:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80012a4:	bc30      	pop	{r4, r5}
 80012a6:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 80012a8:	6043      	str	r3, [r0, #4]
 80012aa:	e7fb      	b.n	80012a4 <chTMStopMeasurementX+0x34>
 80012ac:	e0001000 	.word	0xe0001000
 80012b0:	20000cf0 	.word	0x20000cf0
	...

080012c0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80012c0:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80012c2:	6803      	ldr	r3, [r0, #0]
 80012c4:	4604      	mov	r4, r0

  while (queue_notempty(tqp)) {
 80012c6:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80012c8:	460d      	mov	r5, r1

  while (queue_notempty(tqp)) {
 80012ca:	d009      	beq.n	80012e0 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80012cc:	681a      	ldr	r2, [r3, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  (void) chSchReadyI(tp);
 80012ce:	4618      	mov	r0, r3
 80012d0:	6022      	str	r2, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80012d2:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80012d4:	621d      	str	r5, [r3, #32]
  (void) chSchReadyI(tp);
 80012d6:	f7ff f87b 	bl	80003d0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	429c      	cmp	r4, r3
 80012de:	d1f5      	bne.n	80012cc <chThdDequeueAllI+0xc>
 80012e0:	bd38      	pop	{r3, r4, r5, pc}
 80012e2:	bf00      	nop
	...

080012f0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 80012f0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <chThdExitS+0x3c>)
 80012f4:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80012f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80012f8:	f104 0524 	add.w	r5, r4, #36	; 0x24
 80012fc:	429d      	cmp	r5, r3
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 80012fe:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001300:	d007      	beq.n	8001312 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8001302:	681a      	ldr	r2, [r3, #0]
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8001304:	4618      	mov	r0, r3
 8001306:	6262      	str	r2, [r4, #36]	; 0x24
 8001308:	f7ff f862 	bl	80003d0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800130c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800130e:	42ab      	cmp	r3, r5
 8001310:	d1f7      	bne.n	8001302 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001312:	7f63      	ldrb	r3, [r4, #29]
 8001314:	079b      	lsls	r3, r3, #30
 8001316:	d104      	bne.n	8001322 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8001318:	6922      	ldr	r2, [r4, #16]
 800131a:	6963      	ldr	r3, [r4, #20]
 800131c:	611a      	str	r2, [r3, #16]
 800131e:	6922      	ldr	r2, [r4, #16]
 8001320:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001322:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8001324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001328:	f7ff b922 	b.w	8000570 <chSchGoSleepS>
 800132c:	20000cf0 	.word	0x20000cf0

08001330 <chThdExit>:
 8001330:	2320      	movs	r3, #32
 8001332:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8001336:	f7ff bfdb 	b.w	80012f0 <chThdExitS>
 800133a:	bf00      	nop
 800133c:	0000      	movs	r0, r0
	...

08001340 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001340:	b508      	push	{r3, lr}
 8001342:	4601      	mov	r1, r0
 8001344:	2320      	movs	r3, #32
 8001346:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800134a:	2008      	movs	r0, #8
 800134c:	f7ff f928 	bl	80005a0 <chSchGoSleepTimeoutS>
 8001350:	2300      	movs	r3, #0
 8001352:	f383 8811 	msr	BASEPRI, r3
 8001356:	bd08      	pop	{r3, pc}
	...

08001360 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8001360:	f7ff b8e6 	b.w	8000530 <chSchDoRescheduleAhead>
	...

08001370 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <chSchRescheduleS+0x14>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8001376:	6892      	ldr	r2, [r2, #8]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	429a      	cmp	r2, r3
 800137c:	d800      	bhi.n	8001380 <chSchRescheduleS+0x10>
 800137e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8001380:	f7ff b8d6 	b.w	8000530 <chSchDoRescheduleAhead>
 8001384:	20000cf0 	.word	0x20000cf0
	...

08001390 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <chMtxUnlock+0x60>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001392:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001394:	699d      	ldr	r5, [r3, #24]
 8001396:	2320      	movs	r3, #32
 8001398:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800139c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800139e:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80013a0:	42a0      	cmp	r0, r4
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 80013a2:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80013a4:	d01d      	beq.n	80013e2 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 80013a6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80013a8:	b14b      	cbz	r3, 80013be <chMtxUnlock+0x2e>
 80013aa:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d003      	beq.n	80013b8 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 80013b0:	6892      	ldr	r2, [r2, #8]
 80013b2:	4291      	cmp	r1, r2
 80013b4:	bf38      	it	cc
 80013b6:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 80013b8:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f5      	bne.n	80013aa <chMtxUnlock+0x1a>
 80013be:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80013c0:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 80013c2:	6ba6      	ldr	r6, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80013c4:	4620      	mov	r0, r4
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 80013c6:	60a9      	str	r1, [r5, #8]
 80013c8:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80013ca:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 80013cc:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 80013ce:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 80013d0:	63a3      	str	r3, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80013d2:	f7fe fffd 	bl	80003d0 <chSchReadyI>
      chSchRescheduleS();
 80013d6:	f7ff ffcb 	bl	8001370 <chSchRescheduleS>
 80013da:	2300      	movs	r3, #0
 80013dc:	f383 8811 	msr	BASEPRI, r3
 80013e0:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	6083      	str	r3, [r0, #8]
 80013e6:	2300      	movs	r3, #0
 80013e8:	f383 8811 	msr	BASEPRI, r3
 80013ec:	bd70      	pop	{r4, r5, r6, pc}
 80013ee:	bf00      	nop
 80013f0:	20000cf0 	.word	0x20000cf0
	...

08001400 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8001400:	e7fe      	b.n	8001400 <BusFault_Handler>
 8001402:	bf00      	nop
	...

08001410 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001410:	e7fe      	b.n	8001410 <__default_exit>
 8001412:	bf00      	nop
	...

08001420 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
	...

08001430 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
	...

08001440 <get_descriptor.lto_priv.38>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8001440:	2902      	cmp	r1, #2
 8001442:	d006      	beq.n	8001452 <get_descriptor.lto_priv.38+0x12>
 8001444:	2903      	cmp	r1, #3
 8001446:	d006      	beq.n	8001456 <get_descriptor.lto_priv.38+0x16>
 8001448:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 800144a:	4806      	ldr	r0, [pc, #24]	; (8001464 <get_descriptor.lto_priv.38+0x24>)
 800144c:	bf18      	it	ne
 800144e:	2000      	movne	r0, #0
 8001450:	4770      	bx	lr
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <get_descriptor.lto_priv.38+0x28>)
 8001454:	4770      	bx	lr
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8001456:	2a03      	cmp	r2, #3
      return &vcom_strings[dindex];
 8001458:	bf9a      	itte	ls
 800145a:	4b04      	ldrls	r3, [pc, #16]	; (800146c <get_descriptor.lto_priv.38+0x2c>)
 800145c:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
  }
  return NULL;
 8001460:	2000      	movhi	r0, #0
}
 8001462:	4770      	bx	lr
 8001464:	080033c0 	.word	0x080033c0
 8001468:	080030a0 	.word	0x080030a0
 800146c:	080033a0 	.word	0x080033a0

08001470 <icuwidthcb.lto_priv.47>:
extern uint32_t encv;

static void icuwidthcb(ICUDriver *icup) {

  uint32_t vala,valb;
  vala = palReadPad(GPIOA,7);
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <icuwidthcb.lto_priv.47+0x2c>)
  valb = palReadPad(GPIOA,8);
  if((prevb==0) && (valb==1))
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <icuwidthcb.lto_priv.47+0x30>)
extern uint32_t encv;

static void icuwidthcb(ICUDriver *icup) {

  uint32_t vala,valb;
  vala = palReadPad(GPIOA,7);
 8001474:	6898      	ldr	r0, [r3, #8]
  valb = palReadPad(GPIOA,8);
  if((prevb==0) && (valb==1))
 8001476:	6811      	ldr	r1, [r2, #0]

static void icuwidthcb(ICUDriver *icup) {

  uint32_t vala,valb;
  vala = palReadPad(GPIOA,7);
  valb = palReadPad(GPIOA,8);
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f3c3 2300 	ubfx	r3, r3, #8, #1
  if((prevb==0) && (valb==1))
 800147e:	b901      	cbnz	r1, 8001482 <icuwidthcb.lto_priv.47+0x12>
 8001480:	b90b      	cbnz	r3, 8001486 <icuwidthcb.lto_priv.47+0x16>
    else
    {
      encv++;
    }
  }
  prevb = valb;
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4770      	bx	lr
  uint32_t vala,valb;
  vala = palReadPad(GPIOA,7);
  valb = palReadPad(GPIOA,8);
  if((prevb==0) && (valb==1))
  {
    if(vala==1)
 8001486:	f010 0f80 	tst.w	r0, #128	; 0x80
    {
      encv--;
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <icuwidthcb.lto_priv.47+0x34>)
    else
    {
      encv++;
    }
  }
  prevb = valb;
 800148c:	6013      	str	r3, [r2, #0]
  valb = palReadPad(GPIOA,8);
  if((prevb==0) && (valb==1))
  {
    if(vala==1)
    {
      encv--;
 800148e:	6801      	ldr	r1, [r0, #0]
 8001490:	bf14      	ite	ne
 8001492:	f101 31ff 	addne.w	r1, r1, #4294967295
    }
    else
    {
      encv++;
 8001496:	3101      	addeq	r1, #1
 8001498:	6001      	str	r1, [r0, #0]
    }
  }
  prevb = valb;
 800149a:	4770      	bx	lr
 800149c:	40010800 	.word	0x40010800
 80014a0:	20000840 	.word	0x20000840
 80014a4:	20000cc4 	.word	0x20000cc4
	...

080014b0 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 80014b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b4:	4681      	mov	r9, r0
 80014b6:	468a      	mov	sl, r1
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 80014b8:	468b      	mov	fp, r1
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 80014ba:	b087      	sub	sp, #28
 80014bc:	4615      	mov	r5, r2
 80014be:	f10d 030d 	add.w	r3, sp, #13
 80014c2:	aa03      	add	r2, sp, #12
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	9301      	str	r3, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 80014c8:	f04f 0800 	mov.w	r8, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 80014cc:	f89b 1000 	ldrb.w	r1, [fp]
 80014d0:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 80014d4:	b179      	cbz	r1, 80014f6 <chvprintf+0x46>
      return n;
    if (c != '%') {
 80014d6:	2925      	cmp	r1, #37	; 0x25
 80014d8:	d011      	beq.n	80014fe <chvprintf+0x4e>
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 80014da:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 80014dc:	f8d9 2000 	ldr.w	r2, [r9]
 80014e0:	4648      	mov	r0, r9
 80014e2:	6892      	ldr	r2, [r2, #8]
 80014e4:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 80014e6:	f89b 1000 	ldrb.w	r1, [fp]
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 80014ea:	f108 0801 	add.w	r8, r8, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 80014ee:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 80014f2:	2900      	cmp	r1, #0
 80014f4:	d1ef      	bne.n	80014d6 <chvprintf+0x26>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 80014f6:	4640      	mov	r0, r8
 80014f8:	b007      	add	sp, #28
 80014fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 80014fe:	f89b 2001 	ldrb.w	r2, [fp, #1]
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8001502:	2600      	movs	r6, #0
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8001504:	2a2d      	cmp	r2, #45	; 0x2d
 8001506:	bf03      	ittte	eq
 8001508:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 800150c:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 8001510:	f04f 0a01 	moveq.w	sl, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8001514:	f04f 0a00 	movne.w	sl, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8001518:	2a30      	cmp	r2, #48	; 0x30
 800151a:	bf03      	ittte	eq
 800151c:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 800151e:	3301      	addeq	r3, #1
      filler = '0';
 8001520:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8001522:	2720      	movne	r7, #32
 8001524:	1c59      	adds	r1, r3, #1
 8001526:	e006      	b.n	8001536 <chvprintf+0x86>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8001528:	782b      	ldrb	r3, [r5, #0]
 800152a:	3504      	adds	r5, #4
 800152c:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 8001530:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 8001534:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8001536:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 800153e:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8001540:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8001544:	d9f2      	bls.n	800152c <chvprintf+0x7c>
        c -= '0';
      else if (c == '*')
 8001546:	2a2a      	cmp	r2, #42	; 0x2a
 8001548:	d0ee      	beq.n	8001528 <chvprintf+0x78>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 800154a:	2a2e      	cmp	r2, #46	; 0x2e
 800154c:	f04f 0100 	mov.w	r1, #0
 8001550:	d043      	beq.n	80015da <chvprintf+0x12a>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8001552:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8001556:	2b4c      	cmp	r3, #76	; 0x4c
 8001558:	d04e      	beq.n	80015f8 <chvprintf+0x148>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800155a:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 800155e:	2834      	cmp	r0, #52	; 0x34
 8001560:	f200 80f6 	bhi.w	8001750 <chvprintf+0x2a0>
 8001564:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001568:	00f400ea 	.word	0x00f400ea
 800156c:	00f400f4 	.word	0x00f400f4
 8001570:	00ea00f4 	.word	0x00ea00f4
 8001574:	00f400f4 	.word	0x00f400f4
 8001578:	00f400f4 	.word	0x00f400f4
 800157c:	00e800f4 	.word	0x00e800f4
 8001580:	00f400f4 	.word	0x00f400f4
 8001584:	00f400f4 	.word	0x00f400f4
 8001588:	00dd00f4 	.word	0x00dd00f4
 800158c:	00f400f4 	.word	0x00f400f4
 8001590:	00f400f1 	.word	0x00f400f1
 8001594:	00f400f4 	.word	0x00f400f4
 8001598:	00f400f4 	.word	0x00f400f4
 800159c:	00f400f4 	.word	0x00f400f4
 80015a0:	00f400f4 	.word	0x00f400f4
 80015a4:	00a100f4 	.word	0x00a100f4
 80015a8:	00f400ea 	.word	0x00f400ea
 80015ac:	00f400f4 	.word	0x00f400f4
 80015b0:	00ea00f4 	.word	0x00ea00f4
 80015b4:	00f400f4 	.word	0x00f400f4
 80015b8:	00f400f4 	.word	0x00f400f4
 80015bc:	00e800f4 	.word	0x00e800f4
 80015c0:	00f400f4 	.word	0x00f400f4
 80015c4:	007100f4 	.word	0x007100f4
 80015c8:	00dd00f4 	.word	0x00dd00f4
 80015cc:	00f400f4 	.word	0x00f400f4
 80015d0:	00f1      	.short	0x00f1
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 80015d2:	782b      	ldrb	r3, [r5, #0]
 80015d4:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 80015d6:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 80015da:	f81b 2b01 	ldrb.w	r2, [fp], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 80015de:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 80015e2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	d9f4      	bls.n	80015d6 <chvprintf+0x126>
          c -= '0';
        else if (c == '*')
 80015ec:	2a2a      	cmp	r2, #42	; 0x2a
 80015ee:	d0f0      	beq.n	80015d2 <chvprintf+0x122>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80015f0:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80015f4:	2b4c      	cmp	r3, #76	; 0x4c
 80015f6:	d1b0      	bne.n	800155a <chvprintf+0xaa>
      is_long = TRUE;
      if (*fmt)
 80015f8:	f89b 3000 	ldrb.w	r3, [fp]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80a7 	beq.w	8001750 <chvprintf+0x2a0>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8001602:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8001606:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800160a:	2a34      	cmp	r2, #52	; 0x34
 800160c:	f200 809f 	bhi.w	800174e <chvprintf+0x29e>
 8001610:	e8df f002 	tbb	[pc, r2]
 8001614:	9d9d9d94 	.word	0x9d9d9d94
 8001618:	9d9d949d 	.word	0x9d9d949d
 800161c:	929d9d9d 	.word	0x929d9d9d
 8001620:	9d9d9d9d 	.word	0x9d9d9d9d
 8001624:	9d9d879d 	.word	0x9d9d879d
 8001628:	9d9d9d9b 	.word	0x9d9d9d9b
 800162c:	9d9d9d9d 	.word	0x9d9d9d9d
 8001630:	4b9d9d9d 	.word	0x4b9d9d9d
 8001634:	9d9d9d94 	.word	0x9d9d9d94
 8001638:	9d9d949d 	.word	0x9d9d949d
 800163c:	929d9d9d 	.word	0x929d9d9d
 8001640:	1b9d9d9d 	.word	0x1b9d9d9d
 8001644:	9d9d879d 	.word	0x9d9d879d
 8001648:	9b          	.byte	0x9b
 8001649:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800164a:	682c      	ldr	r4, [r5, #0]
        s = "(null)";
 800164c:	4b59      	ldr	r3, [pc, #356]	; (80017b4 <chvprintf+0x304>)
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800164e:	3504      	adds	r5, #4
        s = "(null)";
 8001650:	2c00      	cmp	r4, #0
 8001652:	bf08      	it	eq
 8001654:	461c      	moveq	r4, r3
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8001656:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8001658:	2900      	cmp	r1, #0
 800165a:	f000 8093 	beq.w	8001784 <chvprintf+0x2d4>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8095 	beq.w	800178e <chvprintf+0x2de>
 8001664:	3901      	subs	r1, #1
 8001666:	4620      	mov	r0, r4
 8001668:	e001      	b.n	800166e <chvprintf+0x1be>
 800166a:	3901      	subs	r1, #1
 800166c:	d403      	bmi.n	8001676 <chvprintf+0x1c6>
 800166e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f9      	bne.n	800166a <chvprintf+0x1ba>
 8001676:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8001678:	1a36      	subs	r6, r6, r0
 800167a:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 800167c:	2720      	movs	r7, #32
 800167e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8001682:	f1ba 0f00 	cmp.w	sl, #0
 8001686:	d01f      	beq.n	80016c8 <chvprintf+0x218>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8001688:	2b00      	cmp	r3, #0
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	da34      	bge.n	80016f8 <chvprintf+0x248>
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 800168e:	2e00      	cmp	r6, #0
 8001690:	f43f af1c 	beq.w	80014cc <chvprintf+0x1c>
 8001694:	4634      	mov	r4, r6
      chSequentialStreamPut(chp, (uint8_t)filler);
 8001696:	f8d9 3000 	ldr.w	r3, [r9]
 800169a:	4648      	mov	r0, r9
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	4639      	mov	r1, r7
 80016a0:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80016a2:	3c01      	subs	r4, #1
 80016a4:	d1f7      	bne.n	8001696 <chvprintf+0x1e6>
 80016a6:	44b0      	add	r8, r6
 80016a8:	e710      	b.n	80014cc <chvprintf+0x1c>
 80016aa:	9a01      	ldr	r2, [sp, #4]

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80016ac:	682b      	ldr	r3, [r5, #0]
 80016ae:	4610      	mov	r0, r2
 80016b0:	f88d 300c 	strb.w	r3, [sp, #12]
 80016b4:	3504      	adds	r5, #4
 80016b6:	1e53      	subs	r3, r2, #1
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 80016b8:	2720      	movs	r7, #32
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80016ba:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 80016bc:	1a36      	subs	r6, r6, r0
 80016be:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 80016c2:	f1ba 0f00 	cmp.w	sl, #0
 80016c6:	d1df      	bne.n	8001688 <chvprintf+0x1d8>
 80016c8:	9300      	str	r3, [sp, #0]
      width = -width;
 80016ca:	f1c6 0a00 	rsb	sl, r6, #0
    if (width < 0) {
 80016ce:	f1ba 0f00 	cmp.w	sl, #0
 80016d2:	d044      	beq.n	800175e <chvprintf+0x2ae>
      if (*s == '-' && filler == '0') {
 80016d4:	7821      	ldrb	r1, [r4, #0]
 80016d6:	292d      	cmp	r1, #45	; 0x2d
 80016d8:	d046      	beq.n	8001768 <chvprintf+0x2b8>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
 80016da:	4656      	mov	r6, sl
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 80016dc:	f8d9 3000 	ldr.w	r3, [r9]
 80016e0:	4648      	mov	r0, r9
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4639      	mov	r1, r7
 80016e6:	4798      	blx	r3
        n++;
      } while (++width != 0);
 80016e8:	3601      	adds	r6, #1
 80016ea:	d1f7      	bne.n	80016dc <chvprintf+0x22c>
    }
    while (--i >= 0) {
 80016ec:	9b00      	ldr	r3, [sp, #0]
 80016ee:	ebca 0808 	rsb	r8, sl, r8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f6ff aeea 	blt.w	80014cc <chvprintf+0x1c>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80016f8:	f8dd a000 	ldr.w	sl, [sp]
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
 80016fc:	f8d9 3000 	ldr.w	r3, [r9]
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8001700:	f10a 3aff 	add.w	sl, sl, #4294967295
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	4648      	mov	r0, r9
 8001708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800170c:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800170e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8001712:	d1f3      	bne.n	80016fc <chvprintf+0x24c>
 8001714:	9b00      	ldr	r3, [sp, #0]
 8001716:	f108 0801 	add.w	r8, r8, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	bfa8      	it	ge
 800171e:	4498      	addge	r8, r3
 8001720:	e7b5      	b.n	800168e <chvprintf+0x1de>
 8001722:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8001724:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8001726:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8001728:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 800172a:	f001 fb51 	bl	8002dd0 <long_to_string_with_divisor.constprop.3>
 800172e:	ab03      	add	r3, sp, #12
 8001730:	1ac0      	subs	r0, r0, r3
 8001732:	1e43      	subs	r3, r0, #1
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8001734:	ac03      	add	r4, sp, #12
 8001736:	e7c1      	b.n	80016bc <chvprintf+0x20c>
 8001738:	2208      	movs	r2, #8
 800173a:	e7f3      	b.n	8001724 <chvprintf+0x274>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 800173c:	6829      	ldr	r1, [r5, #0]
 800173e:	3504      	adds	r5, #4
      if (l < 0) {
 8001740:	2900      	cmp	r1, #0
 8001742:	db2e      	blt.n	80017a2 <chvprintf+0x2f2>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8001744:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8001746:	220a      	movs	r2, #10
 8001748:	e7ef      	b.n	800172a <chvprintf+0x27a>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800174a:	2210      	movs	r2, #16
 800174c:	e7ea      	b.n	8001724 <chvprintf+0x274>
 800174e:	461a      	mov	r2, r3
 8001750:	9b01      	ldr	r3, [sp, #4]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8001752:	ac03      	add	r4, sp, #12
 8001754:	4618      	mov	r0, r3
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8001756:	f88d 200c 	strb.w	r2, [sp, #12]
 800175a:	3b01      	subs	r3, #1
 800175c:	e7ae      	b.n	80016bc <chvprintf+0x20c>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800175e:	9b00      	ldr	r3, [sp, #0]
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 8001760:	4656      	mov	r6, sl
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8001762:	2b00      	cmp	r3, #0
 8001764:	dac8      	bge.n	80016f8 <chvprintf+0x248>
 8001766:	e6b1      	b.n	80014cc <chvprintf+0x1c>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8001768:	2f30      	cmp	r7, #48	; 0x30
 800176a:	d1b6      	bne.n	80016da <chvprintf+0x22a>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 800176c:	f8d9 3000 	ldr.w	r3, [r9]
 8001770:	4648      	mov	r0, r9
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	4798      	blx	r3
 8001776:	9b00      	ldr	r3, [sp, #0]
 8001778:	3401      	adds	r4, #1
 800177a:	3b01      	subs	r3, #1
        n++;
 800177c:	f108 0801 	add.w	r8, r8, #1
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	e7aa      	b.n	80016da <chvprintf+0x22a>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8001784:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8001788:	2b00      	cmp	r3, #0
 800178a:	f47f af6c 	bne.w	8001666 <chvprintf+0x1b6>
 800178e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8001792:	f1ba 0f00 	cmp.w	sl, #0
 8001796:	d10b      	bne.n	80017b0 <chvprintf+0x300>
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2720      	movs	r7, #32
 80017a0:	e793      	b.n	80016ca <chvprintf+0x21a>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80017a2:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 80017a4:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80017a6:	f88d 300c 	strb.w	r3, [sp, #12]
 80017aa:	f10d 000d 	add.w	r0, sp, #13
 80017ae:	e7ca      	b.n	8001746 <chvprintf+0x296>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80017b0:	2720      	movs	r7, #32
 80017b2:	e76c      	b.n	800168e <chvprintf+0x1de>
 80017b4:	080030e0 	.word	0x080030e0
	...

080017c0 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80017c0:	b40e      	push	{r1, r2, r3}
 80017c2:	b500      	push	{lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	ab03      	add	r3, sp, #12
 80017c8:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 80017cc:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80017ce:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80017d0:	f7ff fe6e 	bl	80014b0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80017d4:	b002      	add	sp, #8
 80017d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80017da:	b003      	add	sp, #12
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop

080017e0 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 80017e0:	2900      	cmp	r1, #0
 80017e2:	dd03      	ble.n	80017ec <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80017e4:	4908      	ldr	r1, [pc, #32]	; (8001808 <cmd_systime+0x28>)
 80017e6:	4a09      	ldr	r2, [pc, #36]	; (800180c <cmd_systime+0x2c>)
 80017e8:	f7ff bfea 	b.w	80017c0 <chprintf>
 80017ec:	2320      	movs	r3, #32
 80017ee:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80017f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017f8:	2300      	movs	r3, #0
 80017fa:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 80017fe:	4904      	ldr	r1, [pc, #16]	; (8001810 <cmd_systime+0x30>)
 8001800:	b292      	uxth	r2, r2
 8001802:	f7ff bfdd 	b.w	80017c0 <chprintf>
 8001806:	bf00      	nop
 8001808:	080030e8 	.word	0x080030e8
 800180c:	080030f4 	.word	0x080030f4
 8001810:	080030fc 	.word	0x080030fc
	...

08001820 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8001820:	2900      	cmp	r1, #0
 8001822:	dd03      	ble.n	800182c <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001824:	4919      	ldr	r1, [pc, #100]	; (800188c <cmd_info+0x6c>)
 8001826:	4a1a      	ldr	r2, [pc, #104]	; (8001890 <cmd_info+0x70>)
 8001828:	f7ff bfca 	b.w	80017c0 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
 8001830:	b082      	sub	sp, #8
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8001832:	4918      	ldr	r1, [pc, #96]	; (8001894 <cmd_info+0x74>)
 8001834:	4a18      	ldr	r2, [pc, #96]	; (8001898 <cmd_info+0x78>)
 8001836:	f7ff ffc3 	bl	80017c0 <chprintf>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 800183a:	4620      	mov	r0, r4
 800183c:	4917      	ldr	r1, [pc, #92]	; (800189c <cmd_info+0x7c>)
 800183e:	4a18      	ldr	r2, [pc, #96]	; (80018a0 <cmd_info+0x80>)
 8001840:	f7ff ffbe 	bl	80017c0 <chprintf>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 8001844:	4620      	mov	r0, r4
 8001846:	4917      	ldr	r1, [pc, #92]	; (80018a4 <cmd_info+0x84>)
 8001848:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <cmd_info+0x88>)
 800184a:	f7ff ffb9 	bl	80017c0 <chprintf>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 800184e:	4620      	mov	r0, r4
 8001850:	4916      	ldr	r1, [pc, #88]	; (80018ac <cmd_info+0x8c>)
 8001852:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <cmd_info+0x90>)
 8001854:	f7ff ffb4 	bl	80017c0 <chprintf>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 8001858:	4620      	mov	r0, r4
 800185a:	4916      	ldr	r1, [pc, #88]	; (80018b4 <cmd_info+0x94>)
 800185c:	4a16      	ldr	r2, [pc, #88]	; (80018b8 <cmd_info+0x98>)
 800185e:	f7ff ffaf 	bl	80017c0 <chprintf>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 8001862:	4620      	mov	r0, r4
 8001864:	4915      	ldr	r1, [pc, #84]	; (80018bc <cmd_info+0x9c>)
 8001866:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <cmd_info+0xa0>)
 8001868:	f7ff ffaa 	bl	80017c0 <chprintf>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 800186c:	4620      	mov	r0, r4
 800186e:	4915      	ldr	r1, [pc, #84]	; (80018c4 <cmd_info+0xa4>)
 8001870:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <cmd_info+0xa8>)
 8001872:	f7ff ffa5 	bl	80017c0 <chprintf>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <cmd_info+0xac>)
 8001878:	4620      	mov	r0, r4
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	4914      	ldr	r1, [pc, #80]	; (80018d0 <cmd_info+0xb0>)
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <cmd_info+0xb4>)
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <cmd_info+0xb8>)
 8001882:	f7ff ff9d 	bl	80017c0 <chprintf>
#endif
#endif
}
 8001886:	b002      	add	sp, #8
 8001888:	bd10      	pop	{r4, pc}
 800188a:	bf00      	nop
 800188c:	080030e8 	.word	0x080030e8
 8001890:	08003104 	.word	0x08003104
 8001894:	0800310c 	.word	0x0800310c
 8001898:	08003120 	.word	0x08003120
 800189c:	08003128 	.word	0x08003128
 80018a0:	0800313c 	.word	0x0800313c
 80018a4:	08003184 	.word	0x08003184
 80018a8:	08003198 	.word	0x08003198
 80018ac:	080031a0 	.word	0x080031a0
 80018b0:	080031b4 	.word	0x080031b4
 80018b4:	080031c0 	.word	0x080031c0
 80018b8:	080031d4 	.word	0x080031d4
 80018bc:	080031ec 	.word	0x080031ec
 80018c0:	08003200 	.word	0x08003200
 80018c4:	0800322c 	.word	0x0800322c
 80018c8:	08003240 	.word	0x08003240
 80018cc:	0800327c 	.word	0x0800327c
 80018d0:	08003254 	.word	0x08003254
 80018d4:	0800326c 	.word	0x0800326c
 80018d8:	08003278 	.word	0x08003278
 80018dc:	00000000 	.word	0x00000000

080018e0 <shell_thread.lto_priv.33>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 80018e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80018e4:	4b79      	ldr	r3, [pc, #484]	; (8001acc <shell_thread.lto_priv.33+0x1ec>)
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 80018e6:	6804      	ldr	r4, [r0, #0]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	4a79      	ldr	r2, [pc, #484]	; (8001ad0 <shell_thread.lto_priv.33+0x1f0>)
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 80018ec:	b098      	sub	sp, #96	; 0x60
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 80018ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nSTech(saagar.tech@gmail.com)\r\n");
 80018f2:	4978      	ldr	r1, [pc, #480]	; (8001ad4 <shell_thread.lto_priv.33+0x1f4>)
 80018f4:	4620      	mov	r0, r4
 80018f6:	619a      	str	r2, [r3, #24]
 80018f8:	f7ff ff62 	bl	80017c0 <chprintf>
 80018fc:	ae08      	add	r6, sp, #32
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 80018fe:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nSTech(saagar.tech@gmail.com)\r\n");
  while (true) {
    chprintf(chp, "guest> ");
 8001902:	4620      	mov	r0, r4
 8001904:	4974      	ldr	r1, [pc, #464]	; (8001ad8 <shell_thread.lto_priv.33+0x1f8>)
 8001906:	f7ff ff5b 	bl	80017c0 <chprintf>
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 800190a:	4635      	mov	r5, r6

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	4620      	mov	r0, r4
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f10d 0107 	add.w	r1, sp, #7
 8001916:	2201      	movs	r2, #1
 8001918:	4798      	blx	r3
 800191a:	b370      	cbz	r0, 800197a <shell_thread.lto_priv.33+0x9a>
      return true;
    if (c == 4) {
 800191c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001920:	2904      	cmp	r1, #4
 8001922:	d026      	beq.n	8001972 <shell_thread.lto_priv.33+0x92>
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
 8001924:	2908      	cmp	r1, #8
 8001926:	d011      	beq.n	800194c <shell_thread.lto_priv.33+0x6c>
 8001928:	297f      	cmp	r1, #127	; 0x7f
 800192a:	d00f      	beq.n	800194c <shell_thread.lto_priv.33+0x6c>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 800192c:	290d      	cmp	r1, #13
 800192e:	d035      	beq.n	800199c <shell_thread.lto_priv.33+0xbc>
      chprintf(chp, "\r\n");
      *p = 0;
      return false;
    }
    if (c < 0x20)
 8001930:	291f      	cmp	r1, #31
 8001932:	d9eb      	bls.n	800190c <shell_thread.lto_priv.33+0x2c>
      continue;
    if (p < line + size - 1) {
 8001934:	42bd      	cmp	r5, r7
 8001936:	d2e9      	bcs.n	800190c <shell_thread.lto_priv.33+0x2c>
      chSequentialStreamPut(chp, c);
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	4620      	mov	r0, r4
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	4798      	blx	r3
      *p++ = (char)c;
 8001940:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001944:	3501      	adds	r5, #1
 8001946:	f805 3c01 	strb.w	r3, [r5, #-1]
 800194a:	e7df      	b.n	800190c <shell_thread.lto_priv.33+0x2c>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 800194c:	42b5      	cmp	r5, r6
 800194e:	d0dd      	beq.n	800190c <shell_thread.lto_priv.33+0x2c>
        chSequentialStreamPut(chp, c);
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	4620      	mov	r0, r4
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	4620      	mov	r0, r4
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2120      	movs	r1, #32
 8001960:	4798      	blx	r3
        chSequentialStreamPut(chp, c);
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	4620      	mov	r0, r4
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f89d 1007 	ldrb.w	r1, [sp, #7]
        p--;
 800196c:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
 800196e:	4798      	blx	r3
 8001970:	e7cc      	b.n	800190c <shell_thread.lto_priv.33+0x2c>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
    if (c == 4) {
      chprintf(chp, "^D");
 8001972:	4620      	mov	r0, r4
 8001974:	4959      	ldr	r1, [pc, #356]	; (8001adc <shell_thread.lto_priv.33+0x1fc>)
 8001976:	f7ff ff23 	bl	80017c0 <chprintf>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nSTech(saagar.tech@gmail.com)\r\n");
  while (true) {
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 800197a:	4620      	mov	r0, r4
 800197c:	4958      	ldr	r1, [pc, #352]	; (8001ae0 <shell_thread.lto_priv.33+0x200>)
 800197e:	f7ff ff1f 	bl	80017c0 <chprintf>
 8001982:	2320      	movs	r3, #32
 8001984:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8001988:	2100      	movs	r1, #0
 800198a:	4856      	ldr	r0, [pc, #344]	; (8001ae4 <shell_thread.lto_priv.33+0x204>)
 800198c:	f7ff fb50 	bl	8001030 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff fcad 	bl	80012f0 <chThdExitS>
        chprintf(chp, " ?\r\n");
      }
    }
  }
  shellExit(MSG_OK);
}
 8001996:	b018      	add	sp, #96	; 0x60
 8001998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 800199c:	4952      	ldr	r1, [pc, #328]	; (8001ae8 <shell_thread.lto_priv.33+0x208>)
 800199e:	4620      	mov	r0, r4
 80019a0:	f7ff ff0e 	bl	80017c0 <chprintf>
      *p = 0;
 80019a4:	2300      	movs	r3, #0
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80019a6:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 80019a8:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80019aa:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 80019ac:	461d      	mov	r5, r3
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80019ae:	f001 f9ef 	bl	8002d90 <_strtok.constprop.4>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80019b2:	a902      	add	r1, sp, #8
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80019b4:	4682      	mov	sl, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80019b6:	2000      	movs	r0, #0
 80019b8:	f10d 090c 	add.w	r9, sp, #12
 80019bc:	f001 f9e8 	bl	8002d90 <_strtok.constprop.4>
 80019c0:	b150      	cbz	r0, 80019d8 <shell_thread.lto_priv.33+0xf8>
      if (n >= SHELL_MAX_ARGUMENTS) {
 80019c2:	2d04      	cmp	r5, #4
 80019c4:	d01d      	beq.n	8001a02 <shell_thread.lto_priv.33+0x122>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 80019c6:	f849 0b04 	str.w	r0, [r9], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80019ca:	a902      	add	r1, sp, #8
 80019cc:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 80019ce:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80019d0:	f001 f9de 	bl	8002d90 <_strtok.constprop.4>
 80019d4:	2800      	cmp	r0, #0
 80019d6:	d1f4      	bne.n	80019c2 <shell_thread.lto_priv.33+0xe2>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 80019d8:	ab18      	add	r3, sp, #96	; 0x60
 80019da:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80019de:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 80019e2:	f1ba 0f00 	cmp.w	sl, #0
 80019e6:	d08c      	beq.n	8001902 <shell_thread.lto_priv.33+0x22>
      if (strcasecmp(cmd, "exit") == 0) {
 80019e8:	4650      	mov	r0, sl
 80019ea:	4940      	ldr	r1, [pc, #256]	; (8001aec <shell_thread.lto_priv.33+0x20c>)
 80019ec:	f001 fa68 	bl	8002ec0 <strcasecmp>
 80019f0:	b970      	cbnz	r0, 8001a10 <shell_thread.lto_priv.33+0x130>
        if (n > 0) {
 80019f2:	2d00      	cmp	r5, #0
 80019f4:	d0c5      	beq.n	8001982 <shell_thread.lto_priv.33+0xa2>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80019f6:	4620      	mov	r0, r4
 80019f8:	493d      	ldr	r1, [pc, #244]	; (8001af0 <shell_thread.lto_priv.33+0x210>)
 80019fa:	4a3c      	ldr	r2, [pc, #240]	; (8001aec <shell_thread.lto_priv.33+0x20c>)
 80019fc:	f7ff fee0 	bl	80017c0 <chprintf>
 8001a00:	e77f      	b.n	8001902 <shell_thread.lto_priv.33+0x22>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 8001a02:	4620      	mov	r0, r4
 8001a04:	493b      	ldr	r1, [pc, #236]	; (8001af4 <shell_thread.lto_priv.33+0x214>)
 8001a06:	f7ff fedb 	bl	80017c0 <chprintf>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9307      	str	r3, [sp, #28]
 8001a0e:	e778      	b.n	8001902 <shell_thread.lto_priv.33+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
 8001a10:	4650      	mov	r0, sl
 8001a12:	4939      	ldr	r1, [pc, #228]	; (8001af8 <shell_thread.lto_priv.33+0x218>)
 8001a14:	f001 fa54 	bl	8002ec0 <strcasecmp>
 8001a18:	b930      	cbnz	r0, 8001a28 <shell_thread.lto_priv.33+0x148>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001a1a:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
 8001a1c:	b1c5      	cbz	r5, 8001a50 <shell_thread.lto_priv.33+0x170>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001a1e:	4934      	ldr	r1, [pc, #208]	; (8001af0 <shell_thread.lto_priv.33+0x210>)
 8001a20:	4a35      	ldr	r2, [pc, #212]	; (8001af8 <shell_thread.lto_priv.33+0x218>)
 8001a22:	f7ff fecd 	bl	80017c0 <chprintf>
 8001a26:	e76c      	b.n	8001902 <shell_thread.lto_priv.33+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8001a28:	4b34      	ldr	r3, [pc, #208]	; (8001afc <shell_thread.lto_priv.33+0x21c>)
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	4699      	mov	r9, r3
 8001a2e:	b918      	cbnz	r0, 8001a38 <shell_thread.lto_priv.33+0x158>
 8001a30:	e031      	b.n	8001a96 <shell_thread.lto_priv.33+0x1b6>
 8001a32:	f859 0f08 	ldr.w	r0, [r9, #8]!
 8001a36:	b370      	cbz	r0, 8001a96 <shell_thread.lto_priv.33+0x1b6>
    if (strcasecmp(scp->sc_name, name) == 0) {
 8001a38:	4651      	mov	r1, sl
 8001a3a:	f001 fa41 	bl	8002ec0 <strcasecmp>
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	d1f7      	bne.n	8001a32 <shell_thread.lto_priv.33+0x152>
      scp->sc_function(chp, argc, argv);
 8001a42:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001a46:	4629      	mov	r1, r5
 8001a48:	aa03      	add	r2, sp, #12
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	4798      	blx	r3
 8001a4e:	e758      	b.n	8001902 <shell_thread.lto_priv.33+0x22>
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 8001a50:	492b      	ldr	r1, [pc, #172]	; (8001b00 <shell_thread.lto_priv.33+0x220>)
 8001a52:	f7ff feb5 	bl	80017c0 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001a56:	4b29      	ldr	r3, [pc, #164]	; (8001afc <shell_thread.lto_priv.33+0x21c>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	461d      	mov	r5, r3
 8001a5c:	b13a      	cbz	r2, 8001a6e <shell_thread.lto_priv.33+0x18e>
    chprintf(chp, "%s ", scp->sc_name);
 8001a5e:	4620      	mov	r0, r4
 8001a60:	4928      	ldr	r1, [pc, #160]	; (8001b04 <shell_thread.lto_priv.33+0x224>)
 8001a62:	f7ff fead 	bl	80017c0 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001a66:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8001a6a:	2a00      	cmp	r2, #0
 8001a6c:	d1f7      	bne.n	8001a5e <shell_thread.lto_priv.33+0x17e>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 8001a6e:	f1b8 0f00 	cmp.w	r8, #0
 8001a72:	d00b      	beq.n	8001a8c <shell_thread.lto_priv.33+0x1ac>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001a74:	f8d8 2000 	ldr.w	r2, [r8]
 8001a78:	b142      	cbz	r2, 8001a8c <shell_thread.lto_priv.33+0x1ac>
 8001a7a:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	4921      	ldr	r1, [pc, #132]	; (8001b04 <shell_thread.lto_priv.33+0x224>)
 8001a80:	f7ff fe9e 	bl	80017c0 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001a84:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8001a88:	2a00      	cmp	r2, #0
 8001a8a:	d1f7      	bne.n	8001a7c <shell_thread.lto_priv.33+0x19c>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	4916      	ldr	r1, [pc, #88]	; (8001ae8 <shell_thread.lto_priv.33+0x208>)
 8001a90:	f7ff fe96 	bl	80017c0 <chprintf>
 8001a94:	e735      	b.n	8001902 <shell_thread.lto_priv.33+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8001a96:	f1b8 0f00 	cmp.w	r8, #0
 8001a9a:	d00d      	beq.n	8001ab8 <shell_thread.lto_priv.33+0x1d8>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8001a9c:	f8d8 0000 	ldr.w	r0, [r8]
 8001aa0:	b150      	cbz	r0, 8001ab8 <shell_thread.lto_priv.33+0x1d8>
 8001aa2:	46c1      	mov	r9, r8
 8001aa4:	e002      	b.n	8001aac <shell_thread.lto_priv.33+0x1cc>
 8001aa6:	f859 0f08 	ldr.w	r0, [r9, #8]!
 8001aaa:	b128      	cbz	r0, 8001ab8 <shell_thread.lto_priv.33+0x1d8>
    if (strcasecmp(scp->sc_name, name) == 0) {
 8001aac:	4651      	mov	r1, sl
 8001aae:	f001 fa07 	bl	8002ec0 <strcasecmp>
 8001ab2:	2800      	cmp	r0, #0
 8001ab4:	d1f7      	bne.n	8001aa6 <shell_thread.lto_priv.33+0x1c6>
 8001ab6:	e7c4      	b.n	8001a42 <shell_thread.lto_priv.33+0x162>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 8001ab8:	4652      	mov	r2, sl
 8001aba:	4620      	mov	r0, r4
 8001abc:	4912      	ldr	r1, [pc, #72]	; (8001b08 <shell_thread.lto_priv.33+0x228>)
 8001abe:	f7ff fe7f 	bl	80017c0 <chprintf>
        chprintf(chp, " ?\r\n");
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	4911      	ldr	r1, [pc, #68]	; (8001b0c <shell_thread.lto_priv.33+0x22c>)
 8001ac6:	f7ff fe7b 	bl	80017c0 <chprintf>
 8001aca:	e71a      	b.n	8001902 <shell_thread.lto_priv.33+0x22>
 8001acc:	20000cf0 	.word	0x20000cf0
 8001ad0:	08003288 	.word	0x08003288
 8001ad4:	08003290 	.word	0x08003290
 8001ad8:	080032b4 	.word	0x080032b4
 8001adc:	080032bc 	.word	0x080032bc
 8001ae0:	08003310 	.word	0x08003310
 8001ae4:	20000cbc 	.word	0x20000cbc
 8001ae8:	0800323c 	.word	0x0800323c
 8001aec:	080032d8 	.word	0x080032d8
 8001af0:	080030e8 	.word	0x080030e8
 8001af4:	080032c0 	.word	0x080032c0
 8001af8:	080032e0 	.word	0x080032e0
 8001afc:	20000808 	.word	0x20000808
 8001b00:	080032e8 	.word	0x080032e8
 8001b04:	08003300 	.word	0x08003300
 8001b08:	08003304 	.word	0x08003304
 8001b0c:	08003308 	.word	0x08003308

08001b10 <Vector8C>:
 */
OSAL_IRQ_HANDLER(STM32_USB1_HP_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  OSAL_IRQ_EPILOGUE();
 8001b10:	f7ff ba0e 	b.w	8000f30 <_port_irq_epilogue>
	...

08001b20 <usb_packet_write_from_queue>:
 *                      not exceed the maximum packet size for this endpoint.
 *
 * @notapi
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
 8001b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001b22:	6803      	ldr	r3, [r0, #0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8001b24:	ea5f 0c52 	movs.w	ip, r2, lsr #1
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001b28:	f103 5e00 	add.w	lr, r3, #536870912	; 0x20000000
 8001b2c:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
 8001b30:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8001b34:	6042      	str	r2, [r0, #4]
  nhw = n / 2;
  while (nhw > 0) {
 8001b36:	d018      	beq.n	8001b6a <usb_packet_write_from_queue+0x4a>
 8001b38:	4677      	mov	r7, lr
 8001b3a:	4664      	mov	r4, ip
 8001b3c:	690e      	ldr	r6, [r1, #16]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8001b3e:	6988      	ldr	r0, [r1, #24]
 8001b40:	1c43      	adds	r3, r0, #1
    if (oqp->q_rdptr >= oqp->q_top)
 8001b42:	42b3      	cmp	r3, r6
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8001b44:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8001b46:	bf28      	it	cs
 8001b48:	68cb      	ldrcs	r3, [r1, #12]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8001b4a:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8001b4c:	1c5d      	adds	r5, r3, #1
 8001b4e:	618d      	str	r5, [r1, #24]
 8001b50:	781b      	ldrb	r3, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top)
 8001b52:	42b5      	cmp	r5, r6
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8001b54:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8001b58:	bf24      	itt	cs
 8001b5a:	68c8      	ldrcs	r0, [r1, #12]
 8001b5c:	6188      	strcs	r0, [r1, #24]
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8001b5e:	3c01      	subs	r4, #1
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 8001b60:	f847 3b04 	str.w	r3, [r7], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8001b64:	d1eb      	bne.n	8001b3e <usb_packet_write_from_queue+0x1e>
 8001b66:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
    *pmap++ = w;
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 8001b6a:	07d3      	lsls	r3, r2, #31
 8001b6c:	d50b      	bpl.n	8001b86 <usb_packet_write_from_queue+0x66>
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8001b6e:	6988      	ldr	r0, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8001b70:	690c      	ldr	r4, [r1, #16]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8001b72:	1c43      	adds	r3, r0, #1
 8001b74:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8001b76:	42a3      	cmp	r3, r4
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8001b78:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8001b7a:	bf28      	it	cs
 8001b7c:	68cb      	ldrcs	r3, [r1, #12]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8001b7e:	f8ce 0000 	str.w	r0, [lr]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8001b82:	bf28      	it	cs
 8001b84:	618b      	strcs	r3, [r1, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8001b86:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8001b8a:	b9cb      	cbnz	r3, 8001bc0 <usb_packet_write_from_queue+0xa0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b8c:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001b90:	2320      	movs	r3, #32
 8001b92:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 8001b96:	688b      	ldr	r3, [r1, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8001b98:	4608      	mov	r0, r1
 8001b9a:	441a      	add	r2, r3
 8001b9c:	608a      	str	r2, [r1, #8]
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	f7ff fb8e 	bl	80012c0 <chThdDequeueAllI>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ba4:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8001ba8:	f3c4 0408 	ubfx	r4, r4, #0, #9
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8001bac:	b11c      	cbz	r4, 8001bb6 <usb_packet_write_from_queue+0x96>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f383 8811 	msr	BASEPRI, r3
 8001bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8001bb6:	f7ff fbdb 	bl	8001370 <chSchRescheduleS>
 8001bba:	f384 8811 	msr	BASEPRI, r4
 8001bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bc0:	688b      	ldr	r3, [r1, #8]
 8001bc2:	4608      	mov	r0, r1
 8001bc4:	441a      	add	r2, r3
 8001bc6:	608a      	str	r2, [r1, #8]
  osalThreadDequeueAllI(&oqp->q_waiting, Q_OK);

  osalSysRestoreStatusX(sts);
}
 8001bc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001bcc:	2100      	movs	r1, #0
 8001bce:	f7ff bb77 	b.w	80012c0 <chThdDequeueAllI>
 8001bd2:	bf00      	nop
	...

08001be0 <VectorAC>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_CC_HANDLER) {
 8001be0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD1);
 8001be2:	f001 f885 	bl	8002cf0 <icu_lld_serve_interrupt.constprop.5>

  OSAL_IRQ_EPILOGUE();
}
 8001be6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD1);

  OSAL_IRQ_EPILOGUE();
 8001bea:	f7ff b9a1 	b.w	8000f30 <_port_irq_epilogue>
 8001bee:	bf00      	nop

08001bf0 <VectorA4>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8001bf0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD1);
 8001bf2:	f001 f87d 	bl	8002cf0 <icu_lld_serve_interrupt.constprop.5>

  OSAL_IRQ_EPILOGUE();
}
 8001bf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD1);

  OSAL_IRQ_EPILOGUE();
 8001bfa:	f7ff b999 	b.w	8000f30 <_port_irq_epilogue>
 8001bfe:	bf00      	nop

08001c00 <chprintf.lto_priv.48>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001c00:	b40e      	push	{r1, r2, r3}
 8001c02:	b500      	push	{lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	ab03      	add	r3, sp, #12
 8001c08:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 8001c0c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001c0e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8001c10:	f7ff fc4e 	bl	80014b0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8001c14:	b002      	add	sp, #8
 8001c16:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c1a:	b003      	add	sp, #12
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop

08001c20 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <__early_init+0x80>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001c22:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001c2c:	680b      	ldr	r3, [r1, #0]
 8001c2e:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <__early_init+0x80>)
 8001c30:	079b      	lsls	r3, r3, #30
 8001c32:	d5fb      	bpl.n	8001c2c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001c34:	4611      	mov	r1, r2
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001c36:	6813      	ldr	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001c38:	2000      	movs	r0, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001c3a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8001c3e:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001c40:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001c42:	684b      	ldr	r3, [r1, #4]
 8001c44:	4a16      	ldr	r2, [pc, #88]	; (8001ca0 <__early_init+0x80>)
 8001c46:	f013 0f0c 	tst.w	r3, #12
 8001c4a:	d1fa      	bne.n	8001c42 <__early_init+0x22>
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001c4c:	4611      	mov	r1, r2
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001c56:	680b      	ldr	r3, [r1, #0]
 8001c58:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <__early_init+0x80>)
 8001c5a:	0398      	lsls	r0, r3, #14
 8001c5c:	d5fb      	bpl.n	8001c56 <__early_init+0x36>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001c5e:	4611      	mov	r1, r2
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8001c60:	6853      	ldr	r3, [r2, #4]
 8001c62:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001c66:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8001c68:	6813      	ldr	r3, [r2, #0]
 8001c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6e:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001c70:	680b      	ldr	r3, [r1, #0]
 8001c72:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <__early_init+0x80>)
 8001c74:	019b      	lsls	r3, r3, #6
 8001c76:	d5fb      	bpl.n	8001c70 <__early_init+0x50>

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001c78:	4611      	mov	r1, r2
/*
 * Early initialization code.
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {
 8001c7a:	b410      	push	{r4}
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <__early_init+0x84>)
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8001c7e:	4c0a      	ldr	r4, [pc, #40]	; (8001ca8 <__early_init+0x88>)
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001c80:	2012      	movs	r0, #18
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8001c82:	6054      	str	r4, [r2, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001c84:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8001c86:	6853      	ldr	r3, [r2, #4]
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001c8e:	684b      	ldr	r3, [r1, #4]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d1fa      	bne.n	8001c8e <__early_init+0x6e>

  stm32_clock_init();
}
 8001c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40022000 	.word	0x40022000
 8001ca8:	001d6400 	.word	0x001d6400
 8001cac:	00000000 	.word	0x00000000

08001cb0 <usb_lld_prepare_transmit>:
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001cb0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001cb4:	68c3      	ldr	r3, [r0, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8001cb6:	b430      	push	{r4, r5}
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001cb8:	6958      	ldr	r0, [r3, #20]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8001cba:	460c      	mov	r4, r1
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
 8001cbc:	6842      	ldr	r2, [r0, #4]
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 8001cbe:	8a19      	ldrh	r1, [r3, #16]
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
 8001cc0:	7803      	ldrb	r3, [r0, #0]
 8001cc2:	428a      	cmp	r2, r1
 8001cc4:	bf28      	it	cs
 8001cc6:	460a      	movcs	r2, r1
 8001cc8:	bb03      	cbnz	r3, 8001d0c <usb_lld_prepare_transmit+0x5c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8001cca:	4917      	ldr	r1, [pc, #92]	; (8001d28 <usb_lld_prepare_transmit+0x78>)
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 8001ccc:	1c53      	adds	r3, r2, #1

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8001cce:	6d09      	ldr	r1, [r1, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8001cd6:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8001cda:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8001cde:	ea4f 0444 	mov.w	r4, r4, lsl #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001ce2:	6821      	ldr	r1, [r4, #0]

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8001ce4:	68c0      	ldr	r0, [r0, #12]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001ce6:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8001cea:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8001cee:	6865      	ldr	r5, [r4, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001cf0:	ea4f 0141 	mov.w	r1, r1, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8001cf4:	6062      	str	r2, [r4, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 8001cf6:	d007      	beq.n	8001d08 <usb_lld_prepare_transmit+0x58>
 8001cf8:	3802      	subs	r0, #2
 8001cfa:	1f0a      	subs	r2, r1, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8001cfc:	f830 1f02 	ldrh.w	r1, [r0, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8001d00:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8001d02:	f842 1f04 	str.w	r1, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8001d06:	d1f9      	bne.n	8001cfc <usb_lld_prepare_transmit+0x4c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8001d08:	bc30      	pop	{r4, r5}
 8001d0a:	4770      	bx	lr
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <usb_lld_prepare_transmit+0x78>)
 8001d0e:	68c1      	ldr	r1, [r0, #12]
 8001d10:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001d12:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8001d16:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8001d1a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001d1e:	0040      	lsls	r0, r0, #1
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8001d20:	bc30      	pop	{r4, r5}
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8001d22:	f7ff befd 	b.w	8001b20 <usb_packet_write_from_queue>
 8001d26:	bf00      	nop
 8001d28:	40005c00 	.word	0x40005c00
 8001d2c:	00000000 	.word	0x00000000

08001d30 <usb_lld_prepare_receive>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8001d30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001d34:	68c9      	ldr	r1, [r1, #12]
 8001d36:	698a      	ldr	r2, [r1, #24]

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8001d38:	6853      	ldr	r3, [r2, #4]
 8001d3a:	b133      	cbz	r3, 8001d4a <usb_lld_prepare_receive+0x1a>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8001d3c:	8a49      	ldrh	r1, [r1, #18]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	440b      	add	r3, r1
 8001d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d46:	8213      	strh	r3, [r2, #16]
 8001d48:	4770      	bx	lr
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
    osp->rxpkts = 1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	8213      	strh	r3, [r2, #16]
 8001d4e:	4770      	bx	lr

08001d50 <usb_event.lto_priv.37>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
  extern SerialUSBDriver SDU1;

  switch (event) {
 8001d50:	2902      	cmp	r1, #2
 8001d52:	d149      	bne.n	8001de8 <usb_event.lto_priv.37+0x98>
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8001d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d56:	4606      	mov	r6, r0
 8001d58:	460d      	mov	r5, r1
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	f383 8811 	msr	BASEPRI, r3
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
  USBDriver *usbp = sdup->config->usbp;
 8001d60:	4c22      	ldr	r4, [pc, #136]	; (8001dec <usb_event.lto_priv.37+0x9c>)
    chSysLockFromISR();

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 8001d62:	2101      	movs	r1, #1
 8001d64:	4a22      	ldr	r2, [pc, #136]	; (8001df0 <usb_event.lto_priv.37+0xa0>)
 8001d66:	f7ff f8c3 	bl	8000ef0 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 8001d6a:	4630      	mov	r0, r6
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	4a21      	ldr	r2, [pc, #132]	; (8001df4 <usb_event.lto_priv.37+0xa4>)
 8001d70:	f7ff f8be 	bl	8000ef0 <usbInitEndpointI>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8001d74:	69a3      	ldr	r3, [r4, #24]
 8001d76:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8001d7a:	f104 070c 	add.w	r7, r4, #12

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 8001d7e:	2500      	movs	r5, #0
 8001d80:	6816      	ldr	r6, [r2, #0]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8001d82:	4638      	mov	r0, r7
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8001d84:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_wrptr = iqp->q_buffer;
 8001d86:	6223      	str	r3, [r4, #32]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8001d88:	f06f 0101 	mvn.w	r1, #1

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 8001d8c:	6165      	str	r5, [r4, #20]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8001d8e:	f7ff fa97 	bl	80012c0 <chThdDequeueAllI>
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8001d92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8001d94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8001d96:	64a2      	str	r2, [r4, #72]	; 0x48
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8001d98:	1a9b      	subs	r3, r3, r2
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
 8001d9a:	6462      	str	r2, [r4, #68]	; 0x44
  oqp->q_counter = chQSizeX(oqp);
 8001d9c:	63a3      	str	r3, [r4, #56]	; 0x38
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8001d9e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001da2:	f06f 0101 	mvn.w	r1, #1
 8001da6:	f7ff fa8b 	bl	80012c0 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001daa:	1d20      	adds	r0, r4, #4
 8001dac:	2101      	movs	r1, #1
 8001dae:	f7ff f93f 	bl	8001030 <chEvtBroadcastFlagsI>
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 8001db2:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 8001db6:	2201      	movs	r2, #1
 8001db8:	7959      	ldrb	r1, [r3, #5]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8001dba:	4630      	mov	r0, r6
 8001dbc:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 8001dc0:	68db      	ldr	r3, [r3, #12]
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 8001dc2:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8001dc6:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 8001dc8:	f8c3 e004 	str.w	lr, [r3, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 8001dcc:	701a      	strb	r2, [r3, #0]
  osp->mode.queue.rxqueue = iqp;
 8001dce:	60df      	str	r7, [r3, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8001dd0:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8001dd2:	f7ff ffad 	bl	8001d30 <usb_lld_prepare_receive>
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 8001dd6:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8001dda:	4630      	mov	r0, r6
 8001ddc:	7959      	ldrb	r1, [r3, #5]
 8001dde:	f7fe fdaf 	bl	8000940 <usbStartReceiveI>
 8001de2:	f385 8811 	msr	BASEPRI, r5
 8001de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000a64 	.word	0x20000a64
 8001df0:	08002fc0 	.word	0x08002fc0
 8001df4:	080030b0 	.word	0x080030b0
	...

08001e00 <usb_lld_init_endpoint>:
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8001e00:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001e04:	68db      	ldr	r3, [r3, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8001e06:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];

  /* Setting the endpoint type.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	f002 0203 	and.w	r2, r2, #3
 8001e0e:	3a01      	subs	r2, #1
 8001e10:	2a02      	cmp	r2, #2
 8001e12:	bf96      	itet	ls
 8001e14:	4c2e      	ldrls	r4, [pc, #184]	; (8001ed0 <usb_lld_init_endpoint+0xd0>)
 8001e16:	f44f 7500 	movhi.w	r5, #512	; 0x200
 8001e1a:	f834 5012 	ldrhls.w	r5, [r4, r2, lsl #1]
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  /* IN endpoint initially in NAK mode.*/
  if (epcp->in_cb != NULL)
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	b10a      	cbz	r2, 8001e26 <usb_lld_init_endpoint+0x26>
    epr |= EPR_STAT_TX_NAK;
 8001e22:	f045 0520 	orr.w	r5, r5, #32

  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	b10a      	cbz	r2, 8001e2e <usb_lld_init_endpoint+0x2e>
    epr |= EPR_STAT_RX_NAK;
 8001e2a:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 8001e2e:	f647 0670 	movw	r6, #30832	; 0x7870
  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 8001e32:	ea45 0401 	orr.w	r4, r5, r1
 8001e36:	f424 4478 	bic.w	r4, r4, #63488	; 0xf800
 8001e3a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8001e3e:	008a      	lsls	r2, r1, #2
 8001e40:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8001e44:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001e48:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001e4c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001e50:	6014      	str	r4, [r2, #0]
  EPR_TOGGLE(ep, epr);
 8001e52:	6814      	ldr	r4, [r2, #0]
 8001e54:	402e      	ands	r6, r5
 8001e56:	4074      	eors	r4, r6

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8001e58:	8a5d      	ldrh	r5, [r3, #18]
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 8001e5a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8001e5e:	f044 0480 	orr.w	r4, r4, #128	; 0x80

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8001e62:	2d3e      	cmp	r5, #62	; 0x3e
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 8001e64:	6014      	str	r4, [r2, #0]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8001e66:	f105 34ff 	add.w	r4, r5, #4294967295
  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8001e6a:	d826      	bhi.n	8001eba <usb_lld_init_endpoint+0xba>
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 8001e6c:	f044 0401 	orr.w	r4, r4, #1
 8001e70:	3401      	adds	r4, #1
 8001e72:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8001e76:	0264      	lsls	r4, r4, #9
 8001e78:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
  dp = USB_GET_DESCRIPTOR(ep);
 8001e7c:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <usb_lld_init_endpoint+0xd4>)
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8001e7e:	8a1e      	ldrh	r6, [r3, #16]
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 8001e80:	6d12      	ldr	r2, [r2, #80]	; 0x50
  dp->TXCOUNT0 = 0;
 8001e82:	2700      	movs	r7, #0
 8001e84:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
 8001e88:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 8001e8c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8001e90:	0049      	lsls	r1, r1, #1
  dp->TXCOUNT0 = 0;
 8001e92:	684b      	ldr	r3, [r1, #4]
 8001e94:	604f      	str	r7, [r1, #4]
  dp->RXCOUNT0 = nblocks;
 8001e96:	68cb      	ldr	r3, [r1, #12]
 8001e98:	60cc      	str	r4, [r1, #12]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8001e9a:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  usbp->pmnext += size;
 8001e9e:	1993      	adds	r3, r2, r6
 8001ea0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8001ea4:	680b      	ldr	r3, [r1, #0]
 8001ea6:	600a      	str	r2, [r1, #0]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8001ea8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
  usbp->pmnext += size;
 8001eac:	441d      	add	r5, r3
 8001eae:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8001eb2:	688a      	ldr	r2, [r1, #8]
}
 8001eb4:	bcf0      	pop	{r4, r5, r6, r7}
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8001eb6:	608b      	str	r3, [r1, #8]
}
 8001eb8:	4770      	bx	lr
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8001eba:	f044 041f 	orr.w	r4, r4, #31
 8001ebe:	3401      	adds	r4, #1
 8001ec0:	1164      	asrs	r4, r4, #5
 8001ec2:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8001ec6:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8001eca:	b2a4      	uxth	r4, r4
 8001ecc:	e7d6      	b.n	8001e7c <usb_lld_init_endpoint+0x7c>
 8001ece:	bf00      	nop
 8001ed0:	08003390 	.word	0x08003390
 8001ed4:	40005c00 	.word	0x40005c00
	...

08001ee0 <usb_lld_reset>:
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8001ee0:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 8001ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8001ee4:	68c9      	ldr	r1, [r1, #12]
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <usb_lld_reset+0x3c>)
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8001ee8:	2900      	cmp	r1, #0

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 8001eea:	4d0d      	ldr	r5, [pc, #52]	; (8001f20 <usb_lld_reset+0x40>)
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8001eec:	f04f 0400 	mov.w	r4, #0
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
 8001ef0:	bf0c      	ite	eq
 8001ef2:	f44f 471c 	moveq.w	r7, #39936	; 0x9c00
 8001ef6:	f44f 471e 	movne.w	r7, #40448	; 0x9e00
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
  STM32_USB->DADDR  = DADDR_EF;
 8001efa:	f04f 0e80 	mov.w	lr, #128	; 0x80
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 8001efe:	2640      	movs	r6, #64	; 0x40
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8001f00:	651c      	str	r4, [r3, #80]	; 0x50
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8001f02:	4621      	mov	r1, r4
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
 8001f04:	645c      	str	r4, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8001f06:	f8c3 e04c 	str.w	lr, [r3, #76]	; 0x4c
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
  STM32_USB->CNTR = cntr;
 8001f0a:	641f      	str	r7, [r3, #64]	; 0x40
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 8001f0c:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 8001f10:	60c5      	str	r5, [r0, #12]
  usb_lld_init_endpoint(usbp, 0);
}
 8001f12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8001f16:	f7ff bf73 	b.w	8001e00 <usb_lld_init_endpoint>
 8001f1a:	bf00      	nop
 8001f1c:	40005c00 	.word	0x40005c00
 8001f20:	08003340 	.word	0x08003340
	...

08001f30 <Vector90>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8001f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8001f34:	4b99      	ldr	r3, [pc, #612]	; (800219c <Vector90+0x26c>)
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8001f36:	b085      	sub	sp, #20
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8001f38:	6c5c      	ldr	r4, [r3, #68]	; 0x44

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 8001f3a:	0563      	lsls	r3, r4, #21
 8001f3c:	f100 819c 	bmi.w	8002278 <Vector90+0x348>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
 8001f40:	0527      	lsls	r7, r4, #20
 8001f42:	d511      	bpl.n	8001f68 <Vector90+0x38>
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001f44:	f8df b258 	ldr.w	fp, [pc, #600]	; 80021a0 <Vector90+0x270>
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8001f48:	4a94      	ldr	r2, [pc, #592]	; (800219c <Vector90+0x26c>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001f4a:	f8db 1004 	ldr.w	r1, [fp, #4]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8001f4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001f50:	680d      	ldr	r5, [r1, #0]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8001f52:	f043 0308 	orr.w	r3, r3, #8
 8001f56:	6413      	str	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001f58:	b115      	cbz	r5, 8001f60 <Vector90+0x30>
 8001f5a:	4658      	mov	r0, fp
 8001f5c:	2103      	movs	r1, #3
 8001f5e:	47a8      	blx	r5
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 8001f60:	4b8e      	ldr	r3, [pc, #568]	; (800219c <Vector90+0x26c>)
 8001f62:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
 8001f68:	04e6      	lsls	r6, r4, #19
 8001f6a:	d508      	bpl.n	8001f7e <Vector90+0x4e>
    uint32_t fnr = STM32_USB->FNR;
 8001f6c:	4b8b      	ldr	r3, [pc, #556]	; (800219c <Vector90+0x26c>)
 8001f6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 8001f70:	0415      	lsls	r5, r2, #16
 8001f72:	f140 8171 	bpl.w	8002258 <Vector90+0x328>
      /* Just noise, going back in SUSPEND mode, reference manual 22.4.5,
         table 169.*/
      STM32_USB->CNTR |= CNTR_LP_MODE;
    }
#endif
    STM32_USB->ISTR = ~ISTR_WKUP;
 8001f76:	4b89      	ldr	r3, [pc, #548]	; (800219c <Vector90+0x26c>)
 8001f78:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* SOF handling.*/
  if (istr & ISTR_SOF) {
 8001f7e:	05a0      	lsls	r0, r4, #22
 8001f80:	d50b      	bpl.n	8001f9a <Vector90+0x6a>
    _usb_isr_invoke_sof_cb(usbp);
 8001f82:	f8df b21c 	ldr.w	fp, [pc, #540]	; 80021a0 <Vector90+0x270>
 8001f86:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	b10b      	cbz	r3, 8001f92 <Vector90+0x62>
 8001f8e:	4658      	mov	r0, fp
 8001f90:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 8001f92:	4b82      	ldr	r3, [pc, #520]	; (800219c <Vector90+0x26c>)
 8001f94:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8001f9a:	0421      	lsls	r1, r4, #16
 8001f9c:	f140 80d3 	bpl.w	8002146 <Vector90+0x216>
 8001fa0:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80021a0 <Vector90+0x270>
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8001fa4:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 800219c <Vector90+0x26c>

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
 8001fa8:	f004 040f 	and.w	r4, r4, #15
 8001fac:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8001fb0:	f108 4580 	add.w	r5, r8, #1073741824	; 0x40000000
 8001fb4:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 8001fb8:	f8d5 9000 	ldr.w	r9, [r5]
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8001fbc:	1ca6      	adds	r6, r4, #2
 8001fbe:	eb0b 0386 	add.w	r3, fp, r6, lsl #2

    if (epr & EPR_CTR_TX) {
 8001fc2:	f019 0f80 	tst.w	r9, #128	; 0x80
  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8001fc6:	685f      	ldr	r7, [r3, #4]

    if (epr & EPR_CTR_TX) {
 8001fc8:	d065      	beq.n	8002096 <Vector90+0x166>
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 8001fca:	682b      	ldr	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8001fcc:	00e0      	lsls	r0, r4, #3
    const USBEndpointConfig *epcp = usbp->epc[ep];

    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 8001fce:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8001fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fda:	602b      	str	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8001fdc:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
      epcp->in_state->txcnt  += transmitted;
 8001fe0:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8001fe4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001fe8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8001fec:	4403      	add	r3, r0
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	6859      	ldr	r1, [r3, #4]
      epcp->in_state->txcnt  += transmitted;
 8001ff2:	f8de 3008 	ldr.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
 8001ff6:	f8de 2004 	ldr.w	r2, [lr, #4]
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
      epcp->in_state->txcnt  += transmitted;
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f8ce 3008 	str.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
      if (n > 0) {
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f000 80bd 	beq.w	8002180 <Vector90+0x250>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
 8002006:	8a3a      	ldrh	r2, [r7, #16]
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
 8002008:	f89e c000 	ldrb.w	ip, [lr]
 800200c:	429a      	cmp	r2, r3
 800200e:	bf28      	it	cs
 8002010:	461a      	movcs	r2, r3
 8002012:	f1bc 0f00 	cmp.w	ip, #0
 8002016:	f040 8112 	bne.w	800223e <Vector90+0x30e>
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 800201a:	1c53      	adds	r3, r2, #1
 800201c:	9301      	str	r3, [sp, #4]
        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 800201e:	f8de 300c 	ldr.w	r3, [lr, #12]
 8002022:	4419      	add	r1, r3
 8002024:	f8ce 100c 	str.w	r1, [lr, #12]
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8002028:	f8da e050 	ldr.w	lr, [sl, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800202c:	9b01      	ldr	r3, [sp, #4]
 800202e:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 8002032:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8002036:	4470      	add	r0, lr
 8002038:	0040      	lsls	r0, r0, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800203a:	f8d0 e000 	ldr.w	lr, [r0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800203e:	085b      	lsrs	r3, r3, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8002040:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 8002044:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8002048:	f8d0 c004 	ldr.w	ip, [r0, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800204c:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8002050:	6042      	str	r2, [r0, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 8002052:	d008      	beq.n	8002066 <Vector90+0x136>
 8002054:	3902      	subs	r1, #2
 8002056:	f1ae 0204 	sub.w	r2, lr, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 800205a:	f831 0f02 	ldrh.w	r0, [r1, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800205e:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8002060:	f842 0f04 	str.w	r0, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8002064:	d1f9      	bne.n	800205a <Vector90+0x12a>
 8002066:	2320      	movs	r3, #32
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002070:	f508 48b8 	add.w	r8, r8, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8002074:	f8d8 3000 	ldr.w	r3, [r8]
 8002078:	2200      	movs	r2, #0
 800207a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800207e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002082:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800208a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800208e:	f8c8 3000 	str.w	r3, [r8]
 8002092:	f382 8811 	msr	BASEPRI, r2
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
 8002096:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 800209a:	d04f      	beq.n	800213c <Vector90+0x20c>
      EPR_CLEAR_CTR_RX(ep);
 800209c:	682b      	ldr	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 800209e:	f419 6f00 	tst.w	r9, #2048	; 0x800
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
      EPR_CLEAR_CTR_RX(ep);
 80020a2:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80020a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ae:	602b      	str	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 80020b0:	d15e      	bne.n	8002170 <Vector90+0x240>
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80020b2:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 80020b6:	69b9      	ldr	r1, [r7, #24]
 80020b8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80020bc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80020c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80020c4:	005b      	lsls	r3, r3, #1
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	4610      	mov	r0, r2
 80020ca:	9201      	str	r2, [sp, #4]

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 80020cc:	780a      	ldrb	r2, [r1, #0]
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80020ce:	f3c0 0809 	ubfx	r8, r0, #0, #10

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 80020d2:	2a00      	cmp	r2, #0
 80020d4:	d166      	bne.n	80021a4 <Vector90+0x274>
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80020d6:	689a      	ldr	r2, [r3, #8]

  n = (n + 1) / 2;
 80020d8:	f108 0301 	add.w	r3, r8, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80020dc:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 80020e0:	f502 5240 	add.w	r2, r2, #12288	; 0x3000

  n = (n + 1) / 2;
  while (n > 0) {
 80020e4:	085b      	lsrs	r3, r3, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80020e6:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
                                   epcp->out_state->mode.queue.rxqueue,
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
 80020ea:	68c8      	ldr	r0, [r1, #12]
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 80020ec:	d009      	beq.n	8002102 <Vector90+0x1d2>
 80020ee:	468e      	mov	lr, r1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80020f0:	f852 1b04 	ldr.w	r1, [r2], #4
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 80020f4:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80020f6:	f820 1b02 	strh.w	r1, [r0], #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 80020fa:	d1f9      	bne.n	80020f0 <Vector90+0x1c0>
 80020fc:	4671      	mov	r1, lr
 80020fe:	f8de 000c 	ldr.w	r0, [lr, #12]
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
 8002102:	4440      	add	r0, r8
 8002104:	60c8      	str	r0, [r1, #12]
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 8002106:	8a08      	ldrh	r0, [r1, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8002108:	8a7f      	ldrh	r7, [r7, #18]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 800210a:	688a      	ldr	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 800210c:	684b      	ldr	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;
 800210e:	3801      	subs	r0, #1
 8002110:	b280      	uxth	r0, r0
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8002112:	4442      	add	r2, r8
        epcp->out_state->rxsize             -= n;
 8002114:	ebc8 0303 	rsb	r3, r8, r3
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8002118:	45b8      	cmp	r8, r7
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 800211a:	8208      	strh	r0, [r1, #16]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 800211c:	608a      	str	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 800211e:	604b      	str	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8002120:	d316      	bcc.n	8002150 <Vector90+0x220>
 8002122:	b1a8      	cbz	r0, 8002150 <Vector90+0x220>
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
        }
        else {
          /* Transfer not complete, there are more packets to receive.*/
          EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8002124:	682b      	ldr	r3, [r5, #0]
 8002126:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800212a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800213a:	602b      	str	r3, [r5, #0]
        }
      }
    }
    istr = STM32_USB->ISTR;
 800213c:	f8da 4044 	ldr.w	r4, [sl, #68]	; 0x44
    _usb_isr_invoke_sof_cb(usbp);
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8002140:	0423      	lsls	r3, r4, #16
 8002142:	f53f af31 	bmi.w	8001fa8 <Vector90+0x78>
    }
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
}
 8002146:	b005      	add	sp, #20
 8002148:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
 800214c:	f7fe bef0 	b.w	8000f30 <_port_irq_epilogue>

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
 8002150:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8002154:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 8002158:	2101      	movs	r1, #1
 800215a:	40a1      	lsls	r1, r4
 800215c:	6872      	ldr	r2, [r6, #4]
 800215e:	ea23 0301 	bic.w	r3, r3, r1
 8002162:	68d2      	ldr	r2, [r2, #12]
 8002164:	f8ab 300a 	strh.w	r3, [fp, #10]
 8002168:	4621      	mov	r1, r4
 800216a:	480d      	ldr	r0, [pc, #52]	; (80021a0 <Vector90+0x270>)
 800216c:	4790      	blx	r2
 800216e:	e7e5      	b.n	800213c <Vector90+0x20c>
      EPR_CLEAR_CTR_RX(ep);
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
 8002170:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 8002174:	6873      	ldr	r3, [r6, #4]
 8002176:	4621      	mov	r1, r4
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4809      	ldr	r0, [pc, #36]	; (80021a0 <Vector90+0x270>)
 800217c:	4798      	blx	r3
 800217e:	e7dd      	b.n	800213c <Vector90+0x20c>
        usb_lld_start_in(usbp, ep);
        osalSysUnlockFromISR();
      }
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <Vector90+0x270>)
 8002182:	2201      	movs	r2, #1
 8002184:	891b      	ldrh	r3, [r3, #8]
 8002186:	40a2      	lsls	r2, r4
 8002188:	ea23 0302 	bic.w	r3, r3, r2
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <Vector90+0x270>)
 800218e:	4621      	mov	r1, r4
 8002190:	8113      	strh	r3, [r2, #8]
 8002192:	4610      	mov	r0, r2
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4798      	blx	r3
 8002198:	e77d      	b.n	8002096 <Vector90+0x166>
 800219a:	bf00      	nop
 800219c:	40005c00 	.word	0x40005c00
 80021a0:	200009e0 	.word	0x200009e0
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80021a4:	689b      	ldr	r3, [r3, #8]

  nhw = n / 2;
  while (nhw > 0) {
 80021a6:	ea5f 0258 	movs.w	r2, r8, lsr #1
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80021aa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80021ae:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80021b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
 80021b6:	68c9      	ldr	r1, [r1, #12]
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80021b8:	9302      	str	r3, [sp, #8]

  nhw = n / 2;
  while (nhw > 0) {
 80021ba:	9203      	str	r2, [sp, #12]
 80021bc:	d021      	beq.n	8002202 <Vector90+0x2d2>
 80021be:	4610      	mov	r0, r2
 80021c0:	469e      	mov	lr, r3
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 80021c2:	694b      	ldr	r3, [r1, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 80021c4:	f85e 2b04 	ldr.w	r2, [lr], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 80021c8:	f103 0901 	add.w	r9, r3, #1
 80021cc:	f8c1 9014 	str.w	r9, [r1, #20]
 80021d0:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 80021d2:	690b      	ldr	r3, [r1, #16]
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 80021d4:	ea4f 2c12 	mov.w	ip, r2, lsr #8
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
 80021d8:	694a      	ldr	r2, [r1, #20]
 80021da:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 80021dc:	bf28      	it	cs
 80021de:	68ca      	ldrcs	r2, [r1, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 80021e0:	1c53      	adds	r3, r2, #1
 80021e2:	614b      	str	r3, [r1, #20]
 80021e4:	f882 c000 	strb.w	ip, [r2]
    if (iqp->q_wrptr >= iqp->q_top)
 80021e8:	690b      	ldr	r3, [r1, #16]
 80021ea:	694a      	ldr	r2, [r1, #20]
 80021ec:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 80021ee:	bf24      	itt	cs
 80021f0:	68cb      	ldrcs	r3, [r1, #12]
 80021f2:	614b      	strcs	r3, [r1, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 80021f4:	3801      	subs	r0, #1
 80021f6:	d1e4      	bne.n	80021c2 <Vector90+0x292>
 80021f8:	9b02      	ldr	r3, [sp, #8]
 80021fa:	9a03      	ldr	r2, [sp, #12]
 80021fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002200:	9302      	str	r3, [sp, #8]
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	07da      	lsls	r2, r3, #31
 8002206:	d50b      	bpl.n	8002220 <Vector90+0x2f0>
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 8002208:	9a02      	ldr	r2, [sp, #8]
 800220a:	694b      	ldr	r3, [r1, #20]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	1c58      	adds	r0, r3, #1
 8002210:	6148      	str	r0, [r1, #20]
 8002212:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 8002214:	690b      	ldr	r3, [r1, #16]
 8002216:	694a      	ldr	r2, [r1, #20]
 8002218:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 800221a:	bf24      	itt	cs
 800221c:	68cb      	ldrcs	r3, [r1, #12]
 800221e:	614b      	strcs	r3, [r1, #20]
 8002220:	2320      	movs	r3, #32
 8002222:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  osalSysLockFromISR();

  iqp->q_counter += n;
 8002226:	688b      	ldr	r3, [r1, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8002228:	4608      	mov	r0, r1
 800222a:	4443      	add	r3, r8
 800222c:	608b      	str	r3, [r1, #8]
 800222e:	2100      	movs	r1, #0
 8002230:	f7ff f846 	bl	80012c0 <chThdDequeueAllI>
 8002234:	2300      	movs	r3, #0
 8002236:	f383 8811 	msr	BASEPRI, r3
 800223a:	69b9      	ldr	r1, [r7, #24]
 800223c:	e763      	b.n	8002106 <Vector90+0x1d6>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 800223e:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8002242:	f8de 100c 	ldr.w	r1, [lr, #12]
 8002246:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800224a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800224e:	4418      	add	r0, r3
 8002250:	0040      	lsls	r0, r0, #1
 8002252:	f7ff fc65 	bl	8001b20 <usb_packet_write_from_queue>
 8002256:	e706      	b.n	8002066 <Vector90+0x136>
  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8002258:	f8df b074 	ldr.w	fp, [pc, #116]	; 80022d0 <Vector90+0x3a0>

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 800225c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800225e:	f8db 1004 	ldr.w	r1, [fp, #4]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8002262:	f022 0208 	bic.w	r2, r2, #8
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8002266:	680d      	ldr	r5, [r1, #0]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800226a:	2d00      	cmp	r5, #0
 800226c:	f43f ae83 	beq.w	8001f76 <Vector90+0x46>
 8002270:	4658      	mov	r0, fp
 8002272:	2104      	movs	r1, #4
 8002274:	47a8      	blx	r5
 8002276:	e67e      	b.n	8001f76 <Vector90+0x46>
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8002278:	f8df b054 	ldr.w	fp, [pc, #84]	; 80022d0 <Vector90+0x3a0>
  usbp->status        = 0;
 800227c:	2300      	movs	r3, #0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 800227e:	2202      	movs	r2, #2
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8002280:	4619      	mov	r1, r3
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 8002282:	f8ab 307c 	strh.w	r3, [fp, #124]	; 0x7c
  usbp->address       = 0;
 8002286:	f88b 307e 	strb.w	r3, [fp, #126]	; 0x7e
  usbp->configuration = 0;
 800228a:	f88b 307f 	strb.w	r3, [fp, #127]	; 0x7f
  usbp->transmitting  = 0;
 800228e:	f8ab 3008 	strh.w	r3, [fp, #8]
  usbp->receiving     = 0;
 8002292:	f8ab 300a 	strh.w	r3, [fp, #10]
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8002296:	f88b 2000 	strb.w	r2, [fp]
 800229a:	f10b 0308 	add.w	r3, fp, #8
 800229e:	f10b 0228 	add.w	r2, fp, #40	; 0x28
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 80022a2:	f843 1f04 	str.w	r1, [r3, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 80022a6:	4293      	cmp	r3, r2
    usbp->epc[i] = NULL;
 80022a8:	f04f 0500 	mov.w	r5, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 80022ac:	d1f9      	bne.n	80022a2 <Vector90+0x372>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 80022ae:	4808      	ldr	r0, [pc, #32]	; (80022d0 <Vector90+0x3a0>)
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 80022b0:	f88b 5064 	strb.w	r5, [fp, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 80022b4:	f7ff fe14 	bl	8001ee0 <usb_lld_reset>
  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
    _usb_reset(usbp);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 80022b8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	b113      	cbz	r3, 80022c6 <Vector90+0x396>
 80022c0:	4629      	mov	r1, r5
 80022c2:	4803      	ldr	r0, [pc, #12]	; (80022d0 <Vector90+0x3a0>)
 80022c4:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_RESET;
 80022c6:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <Vector90+0x3a4>)
 80022c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
 80022ce:	e637      	b.n	8001f40 <Vector90+0x10>
 80022d0:	200009e0 	.word	0x200009e0
 80022d4:	40005c00 	.word	0x40005c00
	...

080022e0 <Thread1>:

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
    palClearPad(GPIOC, 13);
 80022e0:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 80022e4:	46b0      	mov	r8, r6
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <Thread1+0x38>)
 80022e8:	4a0c      	ldr	r2, [pc, #48]	; (800231c <Thread1+0x3c>)
 80022ea:	699b      	ldr	r3, [r3, #24]

/*
 * Blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
 80022ec:	b580      	push	{r7, lr}

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
    palClearPad(GPIOC, 13);
 80022ee:	4d0c      	ldr	r5, [pc, #48]	; (8002320 <Thread1+0x40>)
 80022f0:	4f0c      	ldr	r7, [pc, #48]	; (8002324 <Thread1+0x44>)
 80022f2:	619a      	str	r2, [r3, #24]
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
 80022f4:	783b      	ldrb	r3, [r7, #0]
    palClearPad(GPIOC, 13);
 80022f6:	f8c5 8014 	str.w	r8, [r5, #20]
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	bf0c      	ite	eq
 80022fe:	f44f 74fa 	moveq.w	r4, #500	; 0x1f4
 8002302:	f44f 64fa 	movne.w	r4, #2000	; 0x7d0
    palClearPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
 8002306:	4620      	mov	r0, r4
 8002308:	f7ff f81a 	bl	8001340 <chThdSleep>
    palSetPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
 800230c:	4620      	mov	r0, r4
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
    palClearPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
    palSetPad(GPIOC, 13);
 800230e:	612e      	str	r6, [r5, #16]
    chThdSleepMilliseconds(time);
 8002310:	f7ff f816 	bl	8001340 <chThdSleep>
 8002314:	e7ee      	b.n	80022f4 <Thread1+0x14>
 8002316:	bf00      	nop
 8002318:	20000cf0 	.word	0x20000cf0
 800231c:	08003440 	.word	0x08003440
 8002320:	40011000 	.word	0x40011000
 8002324:	200009e0 	.word	0x200009e0
	...

08002330 <adcWatch>:


static void adcWatch(BaseSequentialStream *chp, int argc, char *argv[]) {
  uint32_t qei;
  (void)argv;
  if (argc > 0) {
 8002330:	2900      	cmp	r1, #0
 8002332:	dc0c      	bgt.n	800234e <adcWatch+0x1e>
  }

}


static void adcWatch(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002334:	b538      	push	{r3, r4, r5, lr}
 8002336:	4604      	mov	r4, r0
 8002338:	4d06      	ldr	r5, [pc, #24]	; (8002354 <adcWatch+0x24>)
    chprintf(chp, "Usage: test\r\n");
    return;
  }
  while(1)
  {
    chprintf(chp, "Value : %d\r\n",encv);
 800233a:	4620      	mov	r0, r4
 800233c:	4906      	ldr	r1, [pc, #24]	; (8002358 <adcWatch+0x28>)
 800233e:	682a      	ldr	r2, [r5, #0]
 8002340:	f7ff fc5e 	bl	8001c00 <chprintf.lto_priv.48>
    chThdSleepMilliseconds(500);
 8002344:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002348:	f7fe fffa 	bl	8001340 <chThdSleep>
 800234c:	e7f5      	b.n	800233a <adcWatch+0xa>

static void adcWatch(BaseSequentialStream *chp, int argc, char *argv[]) {
  uint32_t qei;
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
 800234e:	4903      	ldr	r1, [pc, #12]	; (800235c <adcWatch+0x2c>)
 8002350:	f7ff bc56 	b.w	8001c00 <chprintf.lto_priv.48>
 8002354:	20000cc4 	.word	0x20000cc4
 8002358:	08003448 	.word	0x08003448
 800235c:	08003458 	.word	0x08003458

08002360 <cmd_mem>:


static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8002360:	2900      	cmp	r1, #0
 8002362:	dd02      	ble.n	800236a <cmd_mem+0xa>
    chprintf(chp, "Usage: mem\r\n");
 8002364:	4901      	ldr	r1, [pc, #4]	; (800236c <cmd_mem+0xc>)
 8002366:	f7ff bc4b 	b.w	8001c00 <chprintf.lto_priv.48>
 800236a:	4770      	bx	lr
 800236c:	08003468 	.word	0x08003468

08002370 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8002370:	2200      	movs	r2, #0
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002372:	4690      	mov	r8, r2
 8002374:	4ccd      	ldr	r4, [pc, #820]	; (80026ac <main+0x33c>)
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	6921      	ldr	r1, [r4, #16]
 * Application entry point.
 */



int __attribute__((noreturn)) main(void) {
 800237c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002380:	6123      	str	r3, [r4, #16]
 8002382:	6122      	str	r2, [r4, #16]
  rccResetAPB2(0xFFFFFFFF);
 8002384:	68e1      	ldr	r1, [r4, #12]
 8002386:	60e3      	str	r3, [r4, #12]
 8002388:	60e2      	str	r2, [r4, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800238a:	69e1      	ldr	r1, [r4, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800238c:	48c8      	ldr	r0, [pc, #800]	; (80026b0 <main+0x340>)
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800238e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002392:	61e1      	str	r1, [r4, #28]
  rccEnableBKPInterface(FALSE);
 8002394:	69e1      	ldr	r1, [r4, #28]
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8002396:	f8df e36c 	ldr.w	lr, [pc, #876]	; 8002704 <main+0x394>
 800239a:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800239e:	61e1      	str	r1, [r4, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80023a0:	6801      	ldr	r1, [r0, #0]
void icu_lld_init(void) {

#if STM32_ICU_USE_TIM1
  /* Driver initialization.*/
  icuObjectInit(&ICUD1);
  ICUD1.tim = STM32_TIM1;
 80023a2:	f8df a364 	ldr.w	sl, [pc, #868]	; 8002708 <main+0x398>
 80023a6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80023aa:	6001      	str	r1, [r0, #0]
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80023ac:	69a5      	ldr	r5, [r4, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80023ae:	f8df b35c 	ldr.w	fp, [pc, #860]	; 800270c <main+0x39c>
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80023b2:	f045 057d 	orr.w	r5, r5, #125	; 0x7d
 80023b6:	61a5      	str	r5, [r4, #24]
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 80023b8:	4dbe      	ldr	r5, [pc, #760]	; (80026b4 <main+0x344>)
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 80023ba:	4fbf      	ldr	r7, [pc, #764]	; (80026b8 <main+0x348>)
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80023bc:	4ebf      	ldr	r6, [pc, #764]	; (80026bc <main+0x34c>)
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 80023be:	f8df c350 	ldr.w	ip, [pc, #848]	; 8002710 <main+0x3a0>
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 80023c2:	f8df 9350 	ldr.w	r9, [pc, #848]	; 8002714 <main+0x3a4>
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80023c6:	f8ce 300c 	str.w	r3, [lr, #12]
  icup->config = NULL;
 80023ca:	606a      	str	r2, [r5, #4]
  GPIOA->CRH = config->PAData.crh;
 80023cc:	f8ce b004 	str.w	fp, [lr, #4]
 80023d0:	f8c5 a00c 	str.w	sl, [r5, #12]
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 80023d4:	f04f 3a88 	mov.w	sl, #2290649224	; 0x88888888
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 80023d8:	f8ce 9000 	str.w	r9, [lr]
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 80023dc:	4cb8      	ldr	r4, [pc, #736]	; (80026c0 <main+0x350>)
  GPIOB->ODR = config->PBData.odr;
 80023de:	60fb      	str	r3, [r7, #12]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80023e0:	49b8      	ldr	r1, [pc, #736]	; (80026c4 <main+0x354>)
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 80023e2:	f8c7 c004 	str.w	ip, [r7, #4]
  GPIOB->CRL = config->PBData.crl;
 80023e6:	f8c7 c000 	str.w	ip, [r7]
  GPIOC->ODR = config->PCData.odr;
 80023ea:	60f3      	str	r3, [r6, #12]
  GPIOC->CRH = config->PCData.crh;
 80023ec:	f8c6 a004 	str.w	sl, [r6, #4]
  GPIOC->CRL = config->PCData.crl;
 80023f0:	f8c6 a000 	str.w	sl, [r6]
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 80023f4:	4eb4      	ldr	r6, [pc, #720]	; (80026c8 <main+0x358>)
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 80023f6:	f500 4024 	add.w	r0, r0, #41984	; 0xa400
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 80023fa:	f04f 0e01 	mov.w	lr, #1
 80023fe:	60c3      	str	r3, [r0, #12]
 8002400:	b089      	sub	sp, #36	; 0x24
  GPIOD->CRH = config->PDData.crh;
 8002402:	f8c0 a004 	str.w	sl, [r0, #4]
 8002406:	f104 0728 	add.w	r7, r4, #40	; 0x28
  GPIOD->CRL = config->PDData.crl;
 800240a:	6006      	str	r6, [r0, #0]
 800240c:	f104 0c44 	add.w	ip, r4, #68	; 0x44
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002410:	60cb      	str	r3, [r1, #12]
  GPIOE->CRH = config->PEData.crh;
 8002412:	f8c1 a004 	str.w	sl, [r1, #4]
  GPIOE->CRL = config->PEData.crl;
 8002416:	f8c1 a000 	str.w	sl, [r1]
 800241a:	f885 e000 	strb.w	lr, [r5]
 800241e:	f884 e000 	strb.w	lr, [r4]
  usbp->config       = NULL;
 8002422:	6062      	str	r2, [r4, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002424:	f847 8f04 	str.w	r8, [r7, #4]!
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002428:	4567      	cmp	r7, ip
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
 800242a:	f8c7 801c 	str.w	r8, [r7, #28]
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800242e:	f04f 0900 	mov.w	r9, #0
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002432:	d1f7      	bne.n	8002424 <main+0xb4>

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002434:	f648 4e9f 	movw	lr, #35999	; 0x8c9f
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002438:	f64f 77ff 	movw	r7, #65535	; 0xffff
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800243c:	f64f 06ff 	movw	r6, #63743	; 0xf8ff

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002440:	f8df b268 	ldr.w	fp, [pc, #616]	; 80026ac <main+0x33c>

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002444:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8002718 <main+0x3a8>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002448:	f8db 101c 	ldr.w	r1, [fp, #28]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800244c:	489f      	ldr	r0, [pc, #636]	; (80026cc <main+0x35c>)
 800244e:	f041 0101 	orr.w	r1, r1, #1
 8002452:	f8cb 101c 	str.w	r1, [fp, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002456:	f8da 1004 	ldr.w	r1, [sl, #4]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800245a:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 800271c <main+0x3ac>
 800245e:	f441 6c00 	orr.w	ip, r1, #2048	; 0x800

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002462:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002466:	f8ca c004 	str.w	ip, [sl, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800246a:	f8c1 e028 	str.w	lr, [r1, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800246e:	f04f 0a01 	mov.w	sl, #1
 8002472:	f04f 0c80 	mov.w	ip, #128	; 0x80
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002476:	f04f 5e80 	mov.w	lr, #268435456	; 0x10000000
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800247a:	62cf      	str	r7, [r1, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800247c:	f8c1 9018 	str.w	r9, [r1, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8002480:	f8c1 9034 	str.w	r9, [r1, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8002484:	f8c1 900c 	str.w	r9, [r1, #12]
  STM32_ST_TIM->CR2    = 0;
 8002488:	f8c1 9004 	str.w	r9, [r1, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800248c:	f8c1 a014 	str.w	sl, [r1, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002490:	f8c1 a000 	str.w	sl, [r1]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002494:	f888 c31c 	strb.w	ip, [r8, #796]	; 0x31c
 8002498:	f8cd c004 	str.w	ip, [sp, #4]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800249c:	f8c8 e180 	str.w	lr, [r8, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80024a0:	f8c8 e000 	str.w	lr, [r8]
 80024a4:	f8c0 9008 	str.w	r9, [r0, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80024ac:	4988      	ldr	r1, [pc, #544]	; (80026d0 <main+0x360>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80024ae:	ea0e 0606 	and.w	r6, lr, r6
  reg_value  =  (reg_value                                 |
 80024b2:	4331      	orrs	r1, r6

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80024b4:	4e87      	ldr	r6, [pc, #540]	; (80026d4 <main+0x364>)
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80024b6:	60c1      	str	r1, [r0, #12]
 80024b8:	68f1      	ldr	r1, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80024ba:	f8df e264 	ldr.w	lr, [pc, #612]	; 8002720 <main+0x3b0>

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80024be:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80024c2:	60f1      	str	r1, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80024c4:	f8de 1000 	ldr.w	r1, [lr]
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 80024c8:	f8a4 9008 	strh.w	r9, [r4, #8]
 80024cc:	ea41 010a 	orr.w	r1, r1, sl
  usbp->receiving    = 0;
 80024d0:	f8a4 900a 	strh.w	r9, [r4, #10]
 80024d4:	f8ce 1000 	str.w	r1, [lr]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80024d8:	2110      	movs	r1, #16
 80024da:	77c1      	strb	r1, [r0, #31]
 80024dc:	f04f 0120 	mov.w	r1, #32
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80024e0:	4e7d      	ldr	r6, [pc, #500]	; (80026d8 <main+0x368>)
 80024e2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 80024e6:	f106 001c 	add.w	r0, r6, #28

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80024ea:	2200      	movs	r2, #0
 80024ec:	2300      	movs	r3, #0
 80024ee:	61f0      	str	r0, [r6, #28]
 80024f0:	6036      	str	r6, [r6, #0]
  tqp->p_prev = (thread_t *)tqp;
 80024f2:	6076      	str	r6, [r6, #4]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80024f4:	f8c6 9008 	str.w	r9, [r6, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 80024f8:	6136      	str	r6, [r6, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 80024fa:	6176      	str	r6, [r6, #20]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 80024fc:	6230      	str	r0, [r6, #32]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80024fe:	a802      	add	r0, sp, #8
  ch.vtlist.vt_delta = (systime_t)-1;
 8002500:	84b7      	strh	r7, [r6, #36]	; 0x24
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8002502:	f04f 37ff 	mov.w	r7, #4294967295
 8002506:	9702      	str	r7, [sp, #8]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8002508:	e9cd 2306 	strd	r2, r3, [sp, #24]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800250c:	f8a6 9026 	strh.w	r9, [r6, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8002510:	f8c6 9070 	str.w	r9, [r6, #112]	; 0x70
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8002514:	f8cd 900c 	str.w	r9, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 8002518:	f8cd 9010 	str.w	r9, [sp, #16]
  tmp->n          = (ucnt_t)0;
 800251c:	f8cd 9014 	str.w	r9, [sp, #20]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8002520:	f000 fbae 	bl	8002c80 <chTMStartMeasurementX.constprop.28>
  chTMStopMeasurementX(&tm);
 8002524:	a802      	add	r0, sp, #8
 8002526:	f7fe fea3 	bl	8001270 <chTMStopMeasurementX>
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800252a:	496c      	ldr	r1, [pc, #432]	; (80026dc <main+0x36c>)
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800252c:	4a6c      	ldr	r2, [pc, #432]	; (80026e0 <main+0x370>)
 800252e:	f101 0010 	add.w	r0, r1, #16
 8002532:	f022 0107 	bic.w	r1, r2, #7
  ch.tm.offset = tm.last;
 8002536:	9a04      	ldr	r2, [sp, #16]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8002538:	f1a0 0710 	sub.w	r7, r0, #16
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800253c:	f8d6 e014 	ldr.w	lr, [r6, #20]
 8002540:	6732      	str	r2, [r6, #112]	; 0x70
 8002542:	f8c0 9008 	str.w	r9, [r0, #8]
 8002546:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 800254a:	6138      	str	r0, [r7, #16]
  tqp->p_prev = (thread_t *)tqp;
 800254c:	6178      	str	r0, [r7, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800254e:	2040      	movs	r0, #64	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002550:	f8c6 e040 	str.w	lr, [r6, #64]	; 0x40
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002554:	6370      	str	r0, [r6, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8002556:	66b0      	str	r0, [r6, #104]	; 0x68
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002558:	f886 9049 	strb.w	r9, [r6, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800255c:	f8c6 9064 	str.w	r9, [r6, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8002560:	f8c6 9060 	str.w	r9, [r6, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002564:	f886 a04a 	strb.w	sl, [r6, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8002568:	f8c6 9044 	str.w	r9, [r6, #68]	; 0x44
  REG_INSERT(tp);
 800256c:	63f6      	str	r6, [r6, #60]	; 0x3c
 800256e:	f8ce 2010 	str.w	r2, [lr, #16]
 8002572:	6172      	str	r2, [r6, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8002574:	61b2      	str	r2, [r6, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002576:	f106 0250 	add.w	r2, r6, #80	; 0x50
 800257a:	6532      	str	r2, [r6, #80]	; 0x50
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800257c:	4b59      	ldr	r3, [pc, #356]	; (80026e4 <main+0x374>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800257e:	f106 0254 	add.w	r2, r6, #84	; 0x54
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8002582:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8002724 <main+0x3b4>
 8002586:	4858      	ldr	r0, [pc, #352]	; (80026e8 <main+0x378>)
 8002588:	6572      	str	r2, [r6, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 800258a:	65b2      	str	r2, [r6, #88]	; 0x58
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800258c:	4a57      	ldr	r2, [pc, #348]	; (80026ec <main+0x37c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800258e:	f023 0307 	bic.w	r3, r3, #7
 8002592:	f8c7 e000 	str.w	lr, [r7]
  default_heap.h_free.h.u.next = NULL;
 8002596:	f8c7 9008 	str.w	r9, [r7, #8]
  default_heap.h_free.h.size = 0;
 800259a:	f8c7 900c 	str.w	r9, [r7, #12]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800259e:	f886 a048 	strb.w	sl, [r6, #72]	; 0x48
 80025a2:	6003      	str	r3, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80025a4:	6011      	str	r1, [r2, #0]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80025a6:	f04f 0e02 	mov.w	lr, #2
 80025aa:	f389 8811 	msr	BASEPRI, r9
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80025ae:	b662      	cpsie	i
 80025b0:	4a4f      	ldr	r2, [pc, #316]	; (80026f0 <main+0x380>)
 80025b2:	69b3      	ldr	r3, [r6, #24]
 80025b4:	619a      	str	r2, [r3, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80025b6:	2320      	movs	r3, #32
 80025b8:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80025bc:	f506 7196 	add.w	r1, r6, #300	; 0x12c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80025c0:	6972      	ldr	r2, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80025c2:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
 80025c6:	484b      	ldr	r0, [pc, #300]	; (80026f4 <main+0x384>)
 80025c8:	494b      	ldr	r1, [pc, #300]	; (80026f8 <main+0x388>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80025ca:	f106 0378 	add.w	r3, r6, #120	; 0x78

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80025ce:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80025d2:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80025d6:	f8c6 114c 	str.w	r1, [r6, #332]	; 0x14c
 80025da:	f8c6 9130 	str.w	r9, [r6, #304]	; 0x130
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80025de:	f8c6 a080 	str.w	sl, [r6, #128]	; 0x80
  tp->p_state = CH_STATE_WTSTART;
 80025e2:	f886 e094 	strb.w	lr, [r6, #148]	; 0x94
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80025e6:	f886 9095 	strb.w	r9, [r6, #149]	; 0x95
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80025ea:	f8c6 a0b4 	str.w	sl, [r6, #180]	; 0xb4
  tp->p_mtxlist = NULL;
 80025ee:	f8c6 90b0 	str.w	r9, [r6, #176]	; 0xb0
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80025f2:	f8c6 90ac 	str.w	r9, [r6, #172]	; 0xac
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80025f6:	f886 a096 	strb.w	sl, [r6, #150]	; 0x96
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80025fa:	f8c6 9090 	str.w	r9, [r6, #144]	; 0x90
  REG_INSERT(tp);
 80025fe:	f8c6 6088 	str.w	r6, [r6, #136]	; 0x88
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002602:	f106 019c 	add.w	r1, r6, #156	; 0x9c
 8002606:	6113      	str	r3, [r2, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002608:	f106 02a0 	add.w	r2, r6, #160	; 0xa0
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800260c:	4618      	mov	r0, r3
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800260e:	f8c6 109c 	str.w	r1, [r6, #156]	; 0x9c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002612:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
  tqp->p_prev = (thread_t *)tqp;
 8002616:	f8c6 20a4 	str.w	r2, [r6, #164]	; 0xa4
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800261a:	6173      	str	r3, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800261c:	f000 fb00 	bl	8002c20 <chSchWakeupS.constprop.32>
 8002620:	f389 8811 	msr	BASEPRI, r9
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8002624:	4b35      	ldr	r3, [pc, #212]	; (80026fc <main+0x38c>)
  0
};

void initEncoder(void)
{
  palSetPadMode(GPIOA, 8, PAL_MODE_INPUT);
 8002626:	f44f 7080 	mov.w	r0, #256	; 0x100
 800262a:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 800262e:	f000 fb2f 	bl	8002c90 <_pal_lld_setgroupmode.constprop.6>
  palSetPadMode(GPIOA, 7, PAL_MODE_INPUT);
 8002632:	f8dd c004 	ldr.w	ip, [sp, #4]
 8002636:	4660      	mov	r0, ip
 8002638:	f000 fb2a 	bl	8002c90 <_pal_lld_setgroupmode.constprop.6>
 800263c:	2320      	movs	r3, #32
 800263e:	f383 8811 	msr	BASEPRI, r3

  osalDbgAssert((icup->config->channel == ICU_CHANNEL_1) ||
                (icup->config->channel == ICU_CHANNEL_2),
                "invalid input");

  if (icup->state == ICU_STOP) {
 8002642:	782b      	ldrb	r3, [r5, #0]
  osalDbgCheck((icup != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");
  icup->config = config;
 8002644:	482e      	ldr	r0, [pc, #184]	; (8002700 <main+0x390>)
 8002646:	4553      	cmp	r3, sl
 8002648:	6068      	str	r0, [r5, #4]
 800264a:	491a      	ldr	r1, [pc, #104]	; (80026b4 <main+0x344>)
 800264c:	f000 82b3 	beq.w	8002bb6 <main+0x846>
    }
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 8002650:	68cb      	ldr	r3, [r1, #12]
 8002652:	688a      	ldr	r2, [r1, #8]
 8002654:	f8c3 9000 	str.w	r9, [r3]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8002658:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 800265c:	f8c3 9038 	str.w	r9, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 8002660:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
 8002664:	6841      	ldr	r1, [r0, #4]
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
  icup->tim->ARR  = 0xFFFF;
 8002666:	f64f 7eff 	movw	lr, #65535	; 0xffff

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
 800266a:	fbb2 f2f1 	udiv	r2, r2, r1
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 800266e:	6981      	ldr	r1, [r0, #24]
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
  icup->tim->ARR  = 0xFFFF;

  if (icup->config->channel == ICU_CHANNEL_1) {
 8002670:	f890 c014 	ldrb.w	ip, [r0, #20]

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
 8002674:	3a01      	subs	r2, #1
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 8002676:	2000      	movs	r0, #0
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8002678:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 800267c:	6118      	str	r0, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 800267e:	60d9      	str	r1, [r3, #12]
 8002680:	481f      	ldr	r0, [pc, #124]	; (8002700 <main+0x390>)
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
 8002682:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
 8002684:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c

  if (icup->config->channel == ICU_CHANNEL_1) {
 8002688:	f1bc 0f00 	cmp.w	ip, #0
 800268c:	f040 8284 	bne.w	8002b98 <main+0x828>
    /* Selected input 1.
       CCMR1_CC1S = 01 = CH1 Input on TI1.
       CCMR1_CC2S = 10 = CH2 Input on TI1.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 8002690:	f240 2e01 	movw	lr, #513	; 0x201
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8002694:	7802      	ldrb	r2, [r0, #0]
       CCMR1_CC2S = 10 = CH2 Input on TI1.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);

    /* SMCR_TS  = 101, input is TI1FP1.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 8002696:	2154      	movs	r1, #84	; 0x54

  if (icup->config->channel == ICU_CHANNEL_1) {
    /* Selected input 1.
       CCMR1_CC1S = 01 = CH1 Input on TI1.
       CCMR1_CC2S = 10 = CH2 Input on TI1.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 8002698:	f8c3 e018 	str.w	lr, [r3, #24]

    /* SMCR_TS  = 101, input is TI1FP1.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 800269c:	6099      	str	r1, [r3, #8]

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 800269e:	2a00      	cmp	r2, #0
 80026a0:	f040 82b0 	bne.w	8002c04 <main+0x894>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 80026a4:	2231      	movs	r2, #49	; 0x31
 80026a6:	621a      	str	r2, [r3, #32]
 80026a8:	e03e      	b.n	8002728 <main+0x3b8>
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40007000 	.word	0x40007000
 80026b4:	20000e40 	.word	0x20000e40
 80026b8:	40010c00 	.word	0x40010c00
 80026bc:	40011000 	.word	0x40011000
 80026c0:	200009e0 	.word	0x200009e0
 80026c4:	40011800 	.word	0x40011800
 80026c8:	88888844 	.word	0x88888844
 80026cc:	e000ed00 	.word	0xe000ed00
 80026d0:	05fa0300 	.word	0x05fa0300
 80026d4:	e000edf0 	.word	0xe000edf0
 80026d8:	20000cf0 	.word	0x20000cf0
 80026dc:	20000cd0 	.word	0x20000cd0
 80026e0:	20005000 	.word	0x20005000
 80026e4:	20000e5f 	.word	0x20000e5f
 80026e8:	20000cc0 	.word	0x20000cc0
 80026ec:	20000cc8 	.word	0x20000cc8
 80026f0:	080033d0 	.word	0x080033d0
 80026f4:	08000401 	.word	0x08000401
 80026f8:	08000211 	.word	0x08000211
 80026fc:	08003478 	.word	0x08003478
 8002700:	20000820 	.word	0x20000820
 8002704:	40010800 	.word	0x40010800
 8002708:	40012c00 	.word	0x40012c00
 800270c:	888884b8 	.word	0x888884b8
 8002710:	88888838 	.word	0x88888838
 8002714:	88884b88 	.word	0x88884b88
 8002718:	e0042000 	.word	0xe0042000
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e0001000 	.word	0xe0001000
 8002724:	08000321 	.word	0x08000321
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
                        STM32_TIM_CCER_CC2E;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[1];
 8002728:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
 800272c:	3334      	adds	r3, #52	; 0x34
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
                        STM32_TIM_CCER_CC2E;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[1];
 800272e:	612a      	str	r2, [r5, #16]
    icup->pccrp = &icup->tim->CCR[0];
 8002730:	616b      	str	r3, [r5, #20]
  icu_lld_start(icup);
  icup->state = ICU_READY;
 8002732:	2302      	movs	r3, #2
 8002734:	702b      	strb	r3, [r5, #0]
 8002736:	f8df e390 	ldr.w	lr, [pc, #912]	; 8002ac8 <main+0x758>
 800273a:	2200      	movs	r2, #0
 800273c:	f382 8811 	msr	BASEPRI, r2
 8002740:	2020      	movs	r0, #32
 8002742:	f380 8811 	msr	BASEPRI, r0
 * @notapi
 */
void icu_lld_start_capture(ICUDriver *icup) {

  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 8002746:	68eb      	ldr	r3, [r5, #12]
  icup->tim->SR = 0;

  /* Timer is started.*/
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8002748:	f04f 0805 	mov.w	r8, #5
 * @notapi
 */
void icu_lld_start_capture(ICUDriver *icup) {

  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 800274c:	6959      	ldr	r1, [r3, #20]

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
 800274e:	f04f 0c03 	mov.w	ip, #3
 8002752:	f041 0101 	orr.w	r1, r1, #1
 8002756:	6159      	str	r1, [r3, #20]
  icup->tim->SR = 0;
 8002758:	611a      	str	r2, [r3, #16]

  /* Timer is started.*/
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 800275a:	f8c3 8000 	str.w	r8, [r3]
 800275e:	f885 c000 	strb.w	ip, [r5]
 8002762:	f382 8811 	msr	BASEPRI, r2
 8002766:	f380 8811 	msr	BASEPRI, r0
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icu_lld_enable_notifications(ICUDriver *icup) {
  uint32_t dier = icup->tim->DIER;
 800276a:	68ed      	ldr	r5, [r5, #12]
 800276c:	68ea      	ldr	r2, [r5, #12]

  /* If interrupts were already enabled then the operation is skipped.
     This is done in order to avoid clearing the SR and risk losing
     pending interrupts.*/
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 800276e:	f012 03ff 	ands.w	r3, r2, #255	; 0xff
 8002772:	d111      	bne.n	8002798 <main+0x428>
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;

    if (icup->config->channel == ICU_CHANNEL_1) {
 8002774:	f8de 1004 	ldr.w	r1, [lr, #4]
  /* If interrupts were already enabled then the operation is skipped.
     This is done in order to avoid clearing the SR and risk losing
     pending interrupts.*/
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;
 8002778:	612b      	str	r3, [r5, #16]

    if (icup->config->channel == ICU_CHANNEL_1) {
 800277a:	7d0b      	ldrb	r3, [r1, #20]
      /* Enabling periodic callback on CC1.*/
      dier |= STM32_TIM_DIER_CC1IE;

      /* Optionally enabling width callback on CC2.*/
      if (icup->config->width_cb != NULL)
 800277c:	6888      	ldr	r0, [r1, #8]
     pending interrupts.*/
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;

    if (icup->config->channel == ICU_CHANNEL_1) {
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 8204 	bne.w	8002b8c <main+0x81c>
      /* Enabling periodic callback on CC1.*/
      dier |= STM32_TIM_DIER_CC1IE;
 8002784:	f042 0302 	orr.w	r3, r2, #2

      /* Optionally enabling width callback on CC2.*/
      if (icup->config->width_cb != NULL)
 8002788:	b108      	cbz	r0, 800278e <main+0x41e>
      /* Enabling periodic callback on CC2.*/
      dier |= STM32_TIM_DIER_CC2IE;

      /* Optionally enabling width callback on CC1.*/
      if (icup->config->width_cb != NULL)
        dier |= STM32_TIM_DIER_CC1IE;
 800278a:	f042 0306 	orr.w	r3, r2, #6
    }

    /* If an overflow callback is defined then also the overflow callback
       is enabled.*/
    if (icup->config->overflow_cb != NULL)
 800278e:	690a      	ldr	r2, [r1, #16]
 8002790:	b10a      	cbz	r2, 8002796 <main+0x426>
      dier |= STM32_TIM_DIER_UIE;
 8002792:	f043 0301 	orr.w	r3, r3, #1

    /* One single atomic write.*/
    icup->tim->DIER = dier;
 8002796:	60eb      	str	r3, [r5, #12]
 8002798:	f04f 0800 	mov.w	r8, #0
 800279c:	f388 8811 	msr	BASEPRI, r8
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
 80027a0:	4dba      	ldr	r5, [pc, #744]	; (8002a8c <main+0x71c>)
 80027a2:	4abb      	ldr	r2, [pc, #748]	; (8002a90 <main+0x720>)
 80027a4:	4629      	mov	r1, r5
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80027a6:	48bb      	ldr	r0, [pc, #748]	; (8002a94 <main+0x724>)
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 80027a8:	f8df c320 	ldr.w	ip, [pc, #800]	; 8002acc <main+0x75c>
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 80027ac:	2301      	movs	r3, #1
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 80027ae:	f505 7915 	add.w	r9, r5, #596	; 0x254
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
 80027b2:	f841 2b04 	str.w	r2, [r1], #4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80027b6:	f105 0e0c 	add.w	lr, r5, #12
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80027ba:	f105 0254 	add.w	r2, r5, #84	; 0x54
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80027be:	f44f 7a80 	mov.w	sl, #256	; 0x100
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 80027c2:	722b      	strb	r3, [r5, #8]
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80027c4:	62a8      	str	r0, [r5, #40]	; 0x28
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80027c6:	f505 73aa 	add.w	r3, r5, #340	; 0x154
 80027ca:	f105 0030 	add.w	r0, r5, #48	; 0x30
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80027ce:	f8c5 8014 	str.w	r8, [r5, #20]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 80027d2:	f8c5 9040 	str.w	r9, [r5, #64]	; 0x40
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 80027d6:	62ed      	str	r5, [r5, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 80027d8:	652d      	str	r5, [r5, #80]	; 0x50
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80027da:	f8c5 a038 	str.w	sl, [r5, #56]	; 0x38
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 80027de:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 80027e2:	6069      	str	r1, [r5, #4]
 80027e4:	f8c5 e00c 	str.w	lr, [r5, #12]
  tqp->p_prev = (thread_t *)tqp;
 80027e8:	f8c5 e010 	str.w	lr, [r5, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80027ec:	61aa      	str	r2, [r5, #24]
  iqp->q_rdptr   = bp;
 80027ee:	626a      	str	r2, [r5, #36]	; 0x24
  iqp->q_wrptr   = bp;
 80027f0:	622a      	str	r2, [r5, #32]
  iqp->q_top     = bp + size;
 80027f2:	61eb      	str	r3, [r5, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 80027f4:	63eb      	str	r3, [r5, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 80027f6:	64ab      	str	r3, [r5, #72]	; 0x48
  oqp->q_wrptr   = bp;
 80027f8:	646b      	str	r3, [r5, #68]	; 0x44
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80027fa:	6328      	str	r0, [r5, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 80027fc:	6368      	str	r0, [r5, #52]	; 0x34
 80027fe:	f04f 0920 	mov.w	r9, #32
 8002802:	f389 8811 	msr	BASEPRI, r9
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  usbp->out_params[config->bulk_out - 1U] = sdup;
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
  }
  sdup->config = config;
 8002806:	4aa4      	ldr	r2, [pc, #656]	; (8002a98 <main+0x728>)
  sdup->state = SDU_READY;
 8002808:	2302      	movs	r3, #2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 800280a:	62e5      	str	r5, [r4, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1U] = sdup;
 800280c:	64a5      	str	r5, [r4, #72]	; 0x48
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
 800280e:	6325      	str	r5, [r4, #48]	; 0x30
  }
  sdup->config = config;
 8002810:	f8c5 2254 	str.w	r2, [r5, #596]	; 0x254
  sdup->state = SDU_READY;
 8002814:	722b      	strb	r3, [r5, #8]
 8002816:	f388 8811 	msr	BASEPRI, r8
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 800281a:	4ba0      	ldr	r3, [pc, #640]	; (8002a9c <main+0x72c>)
 800281c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002820:	611a      	str	r2, [r3, #16]
  chThdSleepMilliseconds(1500);
 8002822:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002826:	f7fe fd8b 	bl	8001340 <chThdSleep>
 800282a:	f389 8811 	msr	BASEPRI, r9
 800282e:	489c      	ldr	r0, [pc, #624]	; (8002aa0 <main+0x730>)
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 8002830:	4b9c      	ldr	r3, [pc, #624]	; (8002aa4 <main+0x734>)
 8002832:	4601      	mov	r1, r0
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8002834:	4642      	mov	r2, r8
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 8002836:	6063      	str	r3, [r4, #4]
 8002838:	eb00 0809 	add.w	r8, r0, r9
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800283c:	f841 2f04 	str.w	r2, [r1, #4]!

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002840:	4541      	cmp	r1, r8
    usbp->epc[i] = NULL;
 8002842:	f04f 0300 	mov.w	r3, #0

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002846:	d1f9      	bne.n	800283c <main+0x4cc>
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {

  if (usbp->state == USB_STOP) {
 8002848:	f894 c000 	ldrb.w	ip, [r4]
 800284c:	4a96      	ldr	r2, [pc, #600]	; (8002aa8 <main+0x738>)
 800284e:	f1bc 0f01 	cmp.w	ip, #1
 8002852:	f000 815f 	beq.w	8002b14 <main+0x7a4>
    usbp->epc[i] = NULL;
  }
  usb_lld_start(usbp);
  usbp->state = USB_READY;
 8002856:	2002      	movs	r0, #2
 8002858:	7020      	strb	r0, [r4, #0]
 800285a:	2400      	movs	r4, #0
 800285c:	f384 8811 	msr	BASEPRI, r4
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 8002860:	4a8e      	ldr	r2, [pc, #568]	; (8002a9c <main+0x72c>)
 8002862:	4b92      	ldr	r3, [pc, #584]	; (8002aac <main+0x73c>)
 8002864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002868:	6151      	str	r1, [r2, #20]
 800286a:	2220      	movs	r2, #32
 800286c:	601b      	str	r3, [r3, #0]
 800286e:	f382 8811 	msr	BASEPRI, r2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002872:	4b8f      	ldr	r3, [pc, #572]	; (8002ab0 <main+0x740>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002874:	6972      	ldr	r2, [r6, #20]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002876:	7718      	strb	r0, [r3, #28]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002878:	f8df c254 	ldr.w	ip, [pc, #596]	; 8002ad0 <main+0x760>
 800287c:	488d      	ldr	r0, [pc, #564]	; (8002ab4 <main+0x744>)
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800287e:	2140      	movs	r1, #64	; 0x40
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002880:	f04f 0e01 	mov.w	lr, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002884:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
 8002888:	f8c3 c124 	str.w	ip, [r3, #292]	; 0x124
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800288c:	f883 e01e 	strb.w	lr, [r3, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002890:	615a      	str	r2, [r3, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002892:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002896:	775c      	strb	r4, [r3, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8002898:	639c      	str	r4, [r3, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800289a:	635c      	str	r4, [r3, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800289c:	619c      	str	r4, [r3, #24]
  REG_INSERT(tp);
 800289e:	611e      	str	r6, [r3, #16]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80028a0:	f503 7c92 	add.w	ip, r3, #292	; 0x124
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80028a4:	63d9      	str	r1, [r3, #60]	; 0x3c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80028a6:	f103 0e24 	add.w	lr, r3, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80028aa:	6113      	str	r3, [r2, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80028ac:	f103 0228 	add.w	r2, r3, #40	; 0x28
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 80028b0:	4618      	mov	r0, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80028b2:	f8c3 c00c 	str.w	ip, [r3, #12]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80028b6:	6099      	str	r1, [r3, #8]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80028b8:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80028bc:	629a      	str	r2, [r3, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80028c0:	6173      	str	r3, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 80028c2:	f000 f9ad 	bl	8002c20 <chSchWakeupS.constprop.32>
 80028c6:	f384 8811 	msr	BASEPRI, r4
 80028ca:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8002ad4 <main+0x764>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 80028ce:	b144      	cbz	r4, 80028e2 <main+0x572>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
 80028d0:	7f23      	ldrb	r3, [r4, #28]
 80028d2:	2b0f      	cmp	r3, #15
 80028d4:	d067      	beq.n	80029a6 <main+0x636>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
    chThdSleepMilliseconds(1000);
 80028d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028da:	f7fe fd31 	bl	8001340 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 80028de:	2c00      	cmp	r4, #0
 80028e0:	d1f6      	bne.n	80028d0 <main+0x560>
 80028e2:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d1f0      	bne.n	80028d0 <main+0x560>
 80028ee:	2320      	movs	r3, #32
 80028f0:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chMtxLock(mutex_t *mp) {

  chSysLock();
  chMtxLockS(mp);
 80028f4:	4870      	ldr	r0, [pc, #448]	; (8002ab8 <main+0x748>)
 80028f6:	f7fe fc53 	bl	80011a0 <chMtxLockS>
 80028fa:	f384 8811 	msr	BASEPRI, r4
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
 80028fe:	4a6f      	ldr	r2, [pc, #444]	; (8002abc <main+0x74c>)

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8002900:	f640 00c7 	movw	r0, #2247	; 0x8c7
 8002904:	e004      	b.n	8002910 <main+0x5a0>
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	4281      	cmp	r1, r0
 800290a:	f200 80b1 	bhi.w	8002a70 <main+0x700>
 800290e:	461a      	mov	r2, r3

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 8002910:	6813      	ldr	r3, [r2, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f7      	bne.n	8002906 <main+0x596>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 8002916:	4868      	ldr	r0, [pc, #416]	; (8002ab8 <main+0x748>)
 8002918:	f7fe fd3a 	bl	8001390 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 800291c:	4b68      	ldr	r3, [pc, #416]	; (8002ac0 <main+0x750>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0d8      	beq.n	80028d6 <main+0x566>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8002924:	f44f 600d 	mov.w	r0, #2256	; 0x8d0
 8002928:	4798      	blx	r3
    if (hp != NULL) {
 800292a:	2800      	cmp	r0, #0
 800292c:	d0d3      	beq.n	80028d6 <main+0x566>
      hp->h.u.heap = heapp;
      hp->h.size = size;
 800292e:	f640 03c8 	movw	r3, #2248	; 0x8c8
  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
    hp = heapp->h_provider(size + sizeof(union heap_header));
    if (hp != NULL) {
      hp->h.u.heap = heapp;
 8002932:	4a63      	ldr	r2, [pc, #396]	; (8002ac0 <main+0x750>)
      hp->h.size = size;
      hp++;
 8002934:	f100 0408 	add.w	r4, r0, #8
     else fails.*/
  if (heapp->h_provider != NULL) {
    hp = heapp->h_provider(size + sizeof(union heap_header));
    if (hp != NULL) {
      hp->h.u.heap = heapp;
      hp->h.size = size;
 8002938:	e880 000c 	stmia.w	r0, {r2, r3}
                              tprio_t prio, tfunc_t pf, void *arg) {
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
  if (wsp == NULL) {
 800293c:	2c00      	cmp	r4, #0
 800293e:	d0ca      	beq.n	80028d6 <main+0x566>
 8002940:	2320      	movs	r3, #32
 8002942:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002946:	4f5f      	ldr	r7, [pc, #380]	; (8002ac4 <main+0x754>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002948:	6970      	ldr	r0, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800294a:	f8c4 78a8 	str.w	r7, [r4, #2216]	; 0x8a8
 800294e:	f604 01a4 	addw	r1, r4, #2212	; 0x8a4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002952:	2302      	movs	r3, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002954:	4f57      	ldr	r7, [pc, #348]	; (8002ab4 <main+0x744>)
 8002956:	60e1      	str	r1, [r4, #12]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002958:	f04f 0e40 	mov.w	lr, #64	; 0x40
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800295c:	f04f 0800 	mov.w	r8, #0
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002960:	2101      	movs	r1, #1
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002962:	7723      	strb	r3, [r4, #28]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8002964:	f104 0224 	add.w	r2, r4, #36	; 0x24
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8002968:	f104 0328 	add.w	r3, r4, #40	; 0x28
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800296c:	6160      	str	r0, [r4, #20]
 800296e:	6126      	str	r6, [r4, #16]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002970:	f8c4 e008 	str.w	lr, [r4, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002974:	f8c4 98a4 	str.w	r9, [r4, #2212]	; 0x8a4
 8002978:	f8c4 78c4 	str.w	r7, [r4, #2244]	; 0x8c4
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800297c:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 8002980:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8002984:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8002988:	f8c4 8018 	str.w	r8, [r4, #24]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800298c:	77a1      	strb	r1, [r4, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800298e:	6104      	str	r4, [r0, #16]
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8002990:	4620      	mov	r0, r4
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002992:	6262      	str	r2, [r4, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 8002994:	7761      	strb	r1, [r4, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002996:	62a3      	str	r3, [r4, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8002998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800299a:	6174      	str	r4, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 800299c:	f000 f940 	bl	8002c20 <chSchWakeupS.constprop.32>
 80029a0:	f388 8811 	msr	BASEPRI, r8
 80029a4:	e797      	b.n	80028d6 <main+0x566>
 80029a6:	2120      	movs	r1, #32
 80029a8:	f381 8811 	msr	BASEPRI, r1
void chThdRelease(thread_t *tp) {
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 80029ac:	7fa3      	ldrb	r3, [r4, #30]
 80029ae:	2200      	movs	r2, #0
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	77a3      	strb	r3, [r4, #30]
 80029b6:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 80029ba:	b9d3      	cbnz	r3, 80029f2 <main+0x682>
 80029bc:	7f22      	ldrb	r2, [r4, #28]
 80029be:	2a0f      	cmp	r2, #15
 80029c0:	d001      	beq.n	80029c6 <main+0x656>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 80029c2:	461c      	mov	r4, r3
 80029c4:	e787      	b.n	80028d6 <main+0x566>
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 80029c6:	7f62      	ldrb	r2, [r4, #29]
 80029c8:	f002 0203 	and.w	r2, r2, #3
 80029cc:	2a01      	cmp	r2, #1
 80029ce:	d012      	beq.n	80029f6 <main+0x686>
 80029d0:	2a02      	cmp	r2, #2
 80029d2:	d1f6      	bne.n	80029c2 <main+0x652>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 80029d4:	6927      	ldr	r7, [r4, #16]
 80029d6:	6960      	ldr	r0, [r4, #20]
#endif
      chPoolFree(tp->p_mpool, tp);
 80029d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 80029da:	6107      	str	r7, [r0, #16]
 80029dc:	6927      	ldr	r7, [r4, #16]
 80029de:	6178      	str	r0, [r7, #20]
 80029e0:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 80029e4:	6811      	ldr	r1, [r2, #0]
 80029e6:	6021      	str	r1, [r4, #0]
  mp->mp_next = php;
 80029e8:	6014      	str	r4, [r2, #0]
 80029ea:	f383 8811 	msr	BASEPRI, r3
 80029ee:	461c      	mov	r4, r3
 80029f0:	e771      	b.n	80028d6 <main+0x566>
 80029f2:	4614      	mov	r4, r2
 80029f4:	e76f      	b.n	80028d6 <main+0x566>
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 80029f6:	6922      	ldr	r2, [r4, #16]
 80029f8:	6960      	ldr	r0, [r4, #20]
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	6102      	str	r2, [r0, #16]
 80029fe:	6922      	ldr	r2, [r4, #16]
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 8002a00:	f1a4 0808 	sub.w	r8, r4, #8
 8002a04:	6150      	str	r0, [r2, #20]
  /*lint -restore*/
  heapp = hp->h.u.heap;
 8002a06:	f854 2c08 	ldr.w	r2, [r4, #-8]
  qp = &heapp->h_free;
 8002a0a:	f102 0a08 	add.w	sl, r2, #8

  H_LOCK(heapp);
 8002a0e:	f102 0b10 	add.w	fp, r2, #16
 8002a12:	f381 8811 	msr	BASEPRI, r1
 8002a16:	4658      	mov	r0, fp
 8002a18:	f7fe fbc2 	bl	80011a0 <chMtxLockS>
 8002a1c:	9b01      	ldr	r3, [sp, #4]
 8002a1e:	f383 8811 	msr	BASEPRI, r3

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8002a22:	4653      	mov	r3, sl

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8002a24:	459a      	cmp	sl, r3
 8002a26:	d004      	beq.n	8002a32 <main+0x6c2>
 8002a28:	4598      	cmp	r8, r3
 8002a2a:	d802      	bhi.n	8002a32 <main+0x6c2>
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	459a      	cmp	sl, r3
 8002a30:	d1fa      	bne.n	8002a28 <main+0x6b8>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8002a32:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8002a34:	b11a      	cbz	r2, 8002a3e <main+0x6ce>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8002a36:	4590      	cmp	r8, r2
 8002a38:	d301      	bcc.n	8002a3e <main+0x6ce>
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	e7f2      	b.n	8002a24 <main+0x6b4>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8002a3e:	f854 1c04 	ldr.w	r1, [r4, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8002a42:	f844 2c08 	str.w	r2, [r4, #-8]
      qp->h.u.next = hp;
 8002a46:	f8c3 8000 	str.w	r8, [r3]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8002a4a:	f101 0008 	add.w	r0, r1, #8
 8002a4e:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8002a52:	eb08 0e00 	add.w	lr, r8, r0
 8002a56:	4596      	cmp	lr, r2
 8002a58:	d053      	beq.n	8002b02 <main+0x792>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	f101 0208 	add.w	r2, r1, #8
 8002a60:	441a      	add	r2, r3
 8002a62:	4590      	cmp	r8, r2
 8002a64:	d046      	beq.n	8002af4 <main+0x784>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8002a66:	4658      	mov	r0, fp
 8002a68:	f7fe fc92 	bl	8001390 <chMtxUnlock>
 8002a6c:	2400      	movs	r4, #0
 8002a6e:	e732      	b.n	80028d6 <main+0x566>

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
 8002a70:	f5b1 6f0d 	cmp.w	r1, #2256	; 0x8d0
 8002a74:	d230      	bcs.n	8002ad8 <main+0x768>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8002a76:	6819      	ldr	r1, [r3, #0]
 8002a78:	6011      	str	r1, [r2, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8002a7a:	461c      	mov	r4, r3
      H_UNLOCK(heapp);
 8002a7c:	480e      	ldr	r0, [pc, #56]	; (8002ab8 <main+0x748>)
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8002a7e:	f1a0 0310 	sub.w	r3, r0, #16
 8002a82:	f844 3b08 	str.w	r3, [r4], #8
      H_UNLOCK(heapp);
 8002a86:	f7fe fc83 	bl	8001390 <chMtxUnlock>
 8002a8a:	e757      	b.n	800293c <main+0x5cc>
 8002a8c:	20000a64 	.word	0x20000a64
 8002a90:	08003490 	.word	0x08003490
 8002a94:	08000e71 	.word	0x08000e71
 8002a98:	08003410 	.word	0x08003410
 8002a9c:	40010c00 	.word	0x40010c00
 8002aa0:	200009e8 	.word	0x200009e8
 8002aa4:	08003400 	.word	0x08003400
 8002aa8:	200009e0 	.word	0x200009e0
 8002aac:	20000cbc 	.word	0x20000cbc
 8002ab0:	20000898 	.word	0x20000898
 8002ab4:	08000211 	.word	0x08000211
 8002ab8:	20000ce0 	.word	0x20000ce0
 8002abc:	20000cd8 	.word	0x20000cd8
 8002ac0:	20000cd0 	.word	0x20000cd0
 8002ac4:	080033f0 	.word	0x080033f0
 8002ac8:	20000e40 	.word	0x20000e40
 8002acc:	080004c1 	.word	0x080004c1
 8002ad0:	080022e1 	.word	0x080022e1
 8002ad4:	080018e1 	.word	0x080018e1
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
 8002ad8:	f640 04c8 	movw	r4, #2248	; 0x8c8
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8002adc:	681f      	ldr	r7, [r3, #0]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8002ade:	f5a1 610d 	sub.w	r1, r1, #2256	; 0x8d0
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8002ae2:	f503 600d 	add.w	r0, r3, #2256	; 0x8d0
 8002ae6:	f8c3 78d0 	str.w	r7, [r3, #2256]	; 0x8d0
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8002aea:	f8c3 18d4 	str.w	r1, [r3, #2260]	; 0x8d4
        qp->h.u.next = fp;
 8002aee:	6010      	str	r0, [r2, #0]
        hp->h.size = size;
 8002af0:	605c      	str	r4, [r3, #4]
 8002af2:	e7c2      	b.n	8002a7a <main+0x70a>
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 8002af4:	e914 0005 	ldmdb	r4, {r0, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 8002af8:	440a      	add	r2, r1
 8002afa:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 8002afc:	e883 0005 	stmia.w	r3, {r0, r2}
 8002b00:	e7b1      	b.n	8002a66 <main+0x6f6>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8002b02:	f8de 2004 	ldr.w	r2, [lr, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8002b06:	f858 0000 	ldr.w	r0, [r8, r0]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8002b0a:	4411      	add	r1, r2
 8002b0c:	3108      	adds	r1, #8
        hp->h.u.next = hp->h.u.next->h.u.next;
 8002b0e:	e904 0003 	stmdb	r4, {r0, r1}
 8002b12:	e7a2      	b.n	8002a5a <main+0x6ea>
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8002b14:	4699      	mov	r9, r3
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 8002b16:	f8df a100 	ldr.w	sl, [pc, #256]	; 8002c18 <main+0x8a8>
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 8002b1a:	f8a2 307c 	strh.w	r3, [r2, #124]	; 0x7c
 8002b1e:	f8da 101c 	ldr.w	r1, [sl, #28]
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8002b22:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8002c1c <main+0x8ac>
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 8002b26:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  usbp->address       = 0;
 8002b2a:	f882 307e 	strb.w	r3, [r2, #126]	; 0x7e
  usbp->configuration = 0;
 8002b2e:	f882 307f 	strb.w	r3, [r2, #127]	; 0x7f
  usbp->transmitting  = 0;
 8002b32:	8113      	strh	r3, [r2, #8]
  usbp->receiving     = 0;
 8002b34:	8153      	strh	r3, [r2, #10]
 8002b36:	f8ca 101c 	str.w	r1, [sl, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002b3a:	4934      	ldr	r1, [pc, #208]	; (8002c0c <main+0x89c>)
 8002b3c:	f04f 0ad0 	mov.w	sl, #208	; 0xd0
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8002b40:	f8ce c040 	str.w	ip, [lr, #64]	; 0x40
 8002b44:	f881 a313 	strb.w	sl, [r1, #787]	; 0x313
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002b48:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002b4c:	f04f 0ae0 	mov.w	sl, #224	; 0xe0
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002b50:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8002b54:	f8c1 c000 	str.w	ip, [r1]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002b58:	f881 a314 	strb.w	sl, [r1, #788]	; 0x314
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002b5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8002b60:	f04f 0a02 	mov.w	sl, #2
 8002b64:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8002b68:	f8c1 c000 	str.w	ip, [r1]
#if STM32_USB1_HP_NUMBER != STM32_USB1_LP_NUMBER
      nvicEnableVector(STM32_USB1_HP_NUMBER, STM32_USB_USB1_HP_IRQ_PRIORITY);
#endif
      nvicEnableVector(STM32_USB1_LP_NUMBER, STM32_USB_USB1_LP_IRQ_PRIORITY);
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
 8002b6c:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
 8002b70:	f882 a000 	strb.w	sl, [r2]
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8002b74:	f840 9f04 	str.w	r9, [r0, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002b78:	4580      	cmp	r8, r0
    usbp->epc[i] = NULL;
 8002b7a:	f04f 0300 	mov.w	r3, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002b7e:	d1f9      	bne.n	8002b74 <main+0x804>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8002b80:	4823      	ldr	r0, [pc, #140]	; (8002c10 <main+0x8a0>)
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002b82:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8002b86:	f7ff f9ab 	bl	8001ee0 <usb_lld_reset>
 8002b8a:	e664      	b.n	8002856 <main+0x4e6>
      if (icup->config->width_cb != NULL)
        dier |= STM32_TIM_DIER_CC2IE;
    }
    else {
      /* Enabling periodic callback on CC2.*/
      dier |= STM32_TIM_DIER_CC2IE;
 8002b8c:	f042 0304 	orr.w	r3, r2, #4

      /* Optionally enabling width callback on CC1.*/
      if (icup->config->width_cb != NULL)
 8002b90:	2800      	cmp	r0, #0
 8002b92:	f47f adfa 	bne.w	800278a <main+0x41a>
 8002b96:	e5fa      	b.n	800278e <main+0x41e>
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8002b98:	7802      	ldrb	r2, [r0, #0]
       CCMR1_CC2S = 01 = CH2 Input on TI2.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);

    /* SMCR_TS  = 110, input is TI2FP2.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8002b9a:	2164      	movs	r1, #100	; 0x64
  }
  else {
    /* Selected input 2.
       CCMR1_CC1S = 10 = CH1 Input on TI2.
       CCMR1_CC2S = 01 = CH2 Input on TI2.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 8002b9c:	f44f 7081 	mov.w	r0, #258	; 0x102
 8002ba0:	6198      	str	r0, [r3, #24]

    /* SMCR_TS  = 110, input is TI2FP2.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8002ba2:	6099      	str	r1, [r3, #8]

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8002ba4:	bb5a      	cbnz	r2, 8002bfe <main+0x88e>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8002ba6:	2213      	movs	r2, #19
 8002ba8:	621a      	str	r2, [r3, #32]
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[0];
 8002baa:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 8002bae:	3338      	adds	r3, #56	; 0x38
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[0];
 8002bb0:	612a      	str	r2, [r5, #16]
    icup->pccrp = &icup->tim->CCR[1];
 8002bb2:	616b      	str	r3, [r5, #20]
 8002bb4:	e5bd      	b.n	8002732 <main+0x3c2>

  if (icup->state == ICU_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_ICU_USE_TIM1
    if (&ICUD1 == icup) {
      rccEnableTIM1(FALSE);
 8002bb6:	f8db 3018 	ldr.w	r3, [fp, #24]
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_ICU_TIM1_IRQ_PRIORITY);
      nvicEnableVector(STM32_TIM1_CC_NUMBER, STM32_ICU_TIM1_IRQ_PRIORITY);
#if defined(STM32_TIM1CLK)
      icup->clock = STM32_TIM1CLK;
#else
      icup->clock = STM32_TIMCLK2;
 8002bba:	4a16      	ldr	r2, [pc, #88]	; (8002c14 <main+0x8a4>)

  if (icup->state == ICU_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_ICU_USE_TIM1
    if (&ICUD1 == icup) {
      rccEnableTIM1(FALSE);
 8002bbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bc0:	f8cb 3018 	str.w	r3, [fp, #24]
      rccResetTIM1();
 8002bc4:	f8db 300c 	ldr.w	r3, [fp, #12]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002bc8:	f04f 0c70 	mov.w	ip, #112	; 0x70
 8002bcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bd0:	f8cb 300c 	str.w	r3, [fp, #12]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002bd4:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 8002bd8:	f8cb 900c 	str.w	r9, [fp, #12]
 8002bdc:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_ICU_TIM1_IRQ_PRIORITY);
      nvicEnableVector(STM32_TIM1_CC_NUMBER, STM32_ICU_TIM1_IRQ_PRIORITY);
#if defined(STM32_TIM1CLK)
      icup->clock = STM32_TIM1CLK;
#else
      icup->clock = STM32_TIMCLK2;
 8002be0:	608a      	str	r2, [r1, #8]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002be2:	f888 c319 	strb.w	ip, [r8, #793]	; 0x319
 8002be6:	68cb      	ldr	r3, [r1, #12]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002be8:	f8c8 a180 	str.w	sl, [r8, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8002bec:	f8c8 a000 	str.w	sl, [r8]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002bf0:	f888 c31b 	strb.w	ip, [r8, #795]	; 0x31b
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002bf4:	f8c8 e180 	str.w	lr, [r8, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8002bf8:	f8c8 e000 	str.w	lr, [r8]
 8002bfc:	e532      	b.n	8002664 <main+0x2f4>
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
                        STM32_TIM_CCER_CC2E;
    else
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 8002bfe:	2231      	movs	r2, #49	; 0x31
 8002c00:	621a      	str	r2, [r3, #32]
 8002c02:	e7d2      	b.n	8002baa <main+0x83a>
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
                        STM32_TIM_CCER_CC2E | STM32_TIM_CCER_CC2P;
    else
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8002c04:	2213      	movs	r2, #19
 8002c06:	621a      	str	r2, [r3, #32]
 8002c08:	e58e      	b.n	8002728 <main+0x3b8>
 8002c0a:	bf00      	nop
 8002c0c:	e000e100 	.word	0xe000e100
 8002c10:	200009e0 	.word	0x200009e0
 8002c14:	044aa200 	.word	0x044aa200
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40005c00 	.word	0x40005c00

08002c20 <chSchWakeupS.constprop.32>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002c20:	b470      	push	{r4, r5, r6}
 8002c22:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8002c24:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <chSchWakeupS.constprop.32+0x54>)
 8002c26:	6881      	ldr	r1, [r0, #8]
 8002c28:	699d      	ldr	r5, [r3, #24]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8002c2a:	2600      	movs	r6, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8002c2c:	68a8      	ldr	r0, [r5, #8]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8002c2e:	6226      	str	r6, [r4, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8002c30:	4281      	cmp	r1, r0
 8002c32:	d80b      	bhi.n	8002c4c <chSchWakeupS.constprop.32+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8002c34:	7726      	strb	r6, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8002c36:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	4291      	cmp	r1, r2
 8002c3c:	d9fb      	bls.n	8002c36 <chSchWakeupS.constprop.32+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002c3e:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8002c40:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8002c42:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8002c44:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8002c46:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8002c48:	bc70      	pop	{r4, r5, r6}
 8002c4a:	4770      	bx	lr
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 8002c4c:	461a      	mov	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8002c4e:	772e      	strb	r6, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8002c50:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8002c52:	6891      	ldr	r1, [r2, #8]
 8002c54:	4288      	cmp	r0, r1
 8002c56:	d9fb      	bls.n	8002c50 <chSchWakeupS.constprop.32+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002c58:	6850      	ldr	r0, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8002c5a:	2601      	movs	r6, #1
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002c5c:	6068      	str	r0, [r5, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8002c5e:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8002c60:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 8002c62:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8002c64:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 8002c66:	4629      	mov	r1, r5
 8002c68:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8002c6a:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8002c6c:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8002c6e:	f7fd bac7 	b.w	8000200 <_port_switch>
 8002c72:	bf00      	nop
 8002c74:	20000cf0 	.word	0x20000cf0
	...

08002c80 <chTMStartMeasurementX.constprop.28>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8002c80:	4b01      	ldr	r3, [pc, #4]	; (8002c88 <chTMStartMeasurementX.constprop.28+0x8>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8002c84:	6083      	str	r3, [r0, #8]
 8002c86:	4770      	bx	lr
 8002c88:	e0001000 	.word	0xe0001000
 8002c8c:	00000000 	.word	0x00000000

08002c90 <_pal_lld_setgroupmode.constprop.6>:
  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 8002c90:	2300      	movs	r3, #0
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8002c92:	b430      	push	{r4, r5}
  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 8002c94:	461a      	mov	r2, r3
 8002c96:	461c      	mov	r4, r3
 8002c98:	4619      	mov	r1, r3
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8002c9a:	2508      	movs	r5, #8
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 8002c9c:	f010 0f80 	tst.w	r0, #128	; 0x80
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
 8002ca0:	ea4f 1101 	mov.w	r1, r1, lsl #4
    mh <<= 4;
    crl <<= 4;
 8002ca4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
 8002ca8:	ea4f 1404 	mov.w	r4, r4, lsl #4
    crl <<= 4;
    crh <<= 4;
 8002cac:	ea4f 1303 	mov.w	r3, r3, lsl #4
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
 8002cb0:	bf0c      	ite	eq
 8002cb2:	f041 010f 	orreq.w	r1, r1, #15
    else
      crl |= cfg;
 8002cb6:	f042 0204 	orrne.w	r2, r2, #4
    if ((mask & 0x8000) == 0)
 8002cba:	f410 4f00 	tst.w	r0, #32768	; 0x8000
      mh |= 0xf;
 8002cbe:	bf0c      	ite	eq
 8002cc0:	f044 040f 	orreq.w	r4, r4, #15
    else
      crh |= cfg;
 8002cc4:	f043 0304 	orrne.w	r3, r3, #4
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 8002cc8:	3d01      	subs	r5, #1
      crl |= cfg;
    if ((mask & 0x8000) == 0)
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
 8002cca:	ea4f 0040 	mov.w	r0, r0, lsl #1
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 8002cce:	d1e5      	bne.n	8002c9c <_pal_lld_setgroupmode.constprop.6+0xc>
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
  }
  port->CRH = (port->CRH & mh) | crh;
 8002cd0:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <_pal_lld_setgroupmode.constprop.6+0x58>)
 8002cd2:	6845      	ldr	r5, [r0, #4]
 8002cd4:	402c      	ands	r4, r5
 8002cd6:	4323      	orrs	r3, r4
 8002cd8:	6043      	str	r3, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 8002cda:	6803      	ldr	r3, [r0, #0]
}
 8002cdc:	bc30      	pop	{r4, r5}
    else
      crh |= cfg;
    mask <<= 1;
  }
  port->CRH = (port->CRH & mh) | crh;
  port->CRL = (port->CRL & ml) | crl;
 8002cde:	4019      	ands	r1, r3
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	6002      	str	r2, [r0, #0]
}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40010800 	.word	0x40010800
 8002cec:	00000000 	.word	0x00000000

08002cf0 <icu_lld_serve_interrupt.constprop.5>:
/**
 * @brief   Shared IRQ handler.
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
 8002cf0:	b538      	push	{r3, r4, r5, lr}
  uint32_t sr;

  sr  = icup->tim->SR;
 8002cf2:	4d25      	ldr	r5, [pc, #148]	; (8002d88 <icu_lld_serve_interrupt.constprop.5+0x98>)
 8002cf4:	68eb      	ldr	r3, [r5, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 8002cf6:	6869      	ldr	r1, [r5, #4]
 * @param[in] icup      pointer to the @p ICUDriver object
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 8002cf8:	691a      	ldr	r2, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8002cfa:	68dc      	ldr	r4, [r3, #12]
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 8002cfc:	7d08      	ldrb	r0, [r1, #20]
 8002cfe:	4014      	ands	r4, r2
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8002d00:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 8002d02:	43d2      	mvns	r2, r2
 8002d04:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 8002d06:	b9f8      	cbnz	r0, 8002d48 <icu_lld_serve_interrupt.constprop.5+0x58>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8002d08:	0760      	lsls	r0, r4, #29
 8002d0a:	d50c      	bpl.n	8002d26 <icu_lld_serve_interrupt.constprop.5+0x36>
      _icu_isr_invoke_width_cb(icup);
 8002d0c:	782b      	ldrb	r3, [r5, #0]
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d004      	beq.n	8002d1c <icu_lld_serve_interrupt.constprop.5+0x2c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8002d12:	07a1      	lsls	r1, r4, #30
 8002d14:	d40d      	bmi.n	8002d32 <icu_lld_serve_interrupt.constprop.5+0x42>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8002d16:	07e4      	lsls	r4, r4, #31
 8002d18:	d40f      	bmi.n	8002d3a <icu_lld_serve_interrupt.constprop.5+0x4a>
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}
  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 8002d1c:	688b      	ldr	r3, [r1, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d02b      	beq.n	8002d7a <icu_lld_serve_interrupt.constprop.5+0x8a>
 8002d22:	4628      	mov	r0, r5
 8002d24:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8002d26:	07a1      	lsls	r1, r4, #30
 8002d28:	d5f5      	bpl.n	8002d16 <icu_lld_serve_interrupt.constprop.5+0x26>
      _icu_isr_invoke_period_cb(icup);
 8002d2a:	782b      	ldrb	r3, [r5, #0]
 8002d2c:	4a16      	ldr	r2, [pc, #88]	; (8002d88 <icu_lld_serve_interrupt.constprop.5+0x98>)
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d01c      	beq.n	8002d6c <icu_lld_serve_interrupt.constprop.5+0x7c>
 8002d32:	2304      	movs	r3, #4
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8002d34:	07e4      	lsls	r4, r4, #31
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 8002d36:	702b      	strb	r3, [r5, #0]
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8002d38:	d5ef      	bpl.n	8002d1a <icu_lld_serve_interrupt.constprop.5+0x2a>
    _icu_isr_invoke_overflow_cb(icup);
 8002d3a:	686b      	ldr	r3, [r5, #4]
 8002d3c:	4812      	ldr	r0, [pc, #72]	; (8002d88 <icu_lld_serve_interrupt.constprop.5+0x98>)
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	4798      	blx	r3
 8002d42:	2303      	movs	r3, #3
 8002d44:	702b      	strb	r3, [r5, #0]
 8002d46:	bd38      	pop	{r3, r4, r5, pc}
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8002d48:	07a2      	lsls	r2, r4, #30
 8002d4a:	d509      	bpl.n	8002d60 <icu_lld_serve_interrupt.constprop.5+0x70>
      _icu_isr_invoke_width_cb(icup);
 8002d4c:	782b      	ldrb	r3, [r5, #0]
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d002      	beq.n	8002d58 <icu_lld_serve_interrupt.constprop.5+0x68>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8002d52:	0763      	lsls	r3, r4, #29
 8002d54:	d4ed      	bmi.n	8002d32 <icu_lld_serve_interrupt.constprop.5+0x42>
 8002d56:	e7de      	b.n	8002d16 <icu_lld_serve_interrupt.constprop.5+0x26>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 8002d58:	688b      	ldr	r3, [r1, #8]
 8002d5a:	b18b      	cbz	r3, 8002d80 <icu_lld_serve_interrupt.constprop.5+0x90>
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8002d60:	0763      	lsls	r3, r4, #29
 8002d62:	d5d8      	bpl.n	8002d16 <icu_lld_serve_interrupt.constprop.5+0x26>
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 8002d64:	782b      	ldrb	r3, [r5, #0]
 8002d66:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <icu_lld_serve_interrupt.constprop.5+0x98>)
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d1e2      	bne.n	8002d32 <icu_lld_serve_interrupt.constprop.5+0x42>
 8002d6c:	6851      	ldr	r1, [r2, #4]
 8002d6e:	68cb      	ldr	r3, [r1, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0de      	beq.n	8002d32 <icu_lld_serve_interrupt.constprop.5+0x42>
 8002d74:	4804      	ldr	r0, [pc, #16]	; (8002d88 <icu_lld_serve_interrupt.constprop.5+0x98>)
 8002d76:	4798      	blx	r3
 8002d78:	e7db      	b.n	8002d32 <icu_lld_serve_interrupt.constprop.5+0x42>
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8002d7a:	07a0      	lsls	r0, r4, #30
 8002d7c:	d4f7      	bmi.n	8002d6e <icu_lld_serve_interrupt.constprop.5+0x7e>
 8002d7e:	e7ca      	b.n	8002d16 <icu_lld_serve_interrupt.constprop.5+0x26>
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8002d80:	0762      	lsls	r2, r4, #29
 8002d82:	d4f4      	bmi.n	8002d6e <icu_lld_serve_interrupt.constprop.5+0x7e>
 8002d84:	e7c7      	b.n	8002d16 <icu_lld_serve_interrupt.constprop.5+0x26>
 8002d86:	bf00      	nop
 8002d88:	20000e40 	.word	0x20000e40
 8002d8c:	00000000 	.word	0x00000000

08002d90 <_strtok.constprop.4>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8002d90:	b538      	push	{r3, r4, r5, lr}
 8002d92:	460d      	mov	r5, r1
  char *token;
  if (str)
 8002d94:	4604      	mov	r4, r0
 8002d96:	b190      	cbz	r0, 8002dbe <_strtok.constprop.4+0x2e>
    *saveptr = str;
 8002d98:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	490b      	ldr	r1, [pc, #44]	; (8002dcc <_strtok.constprop.4+0x3c>)
 8002d9e:	f000 f8d7 	bl	8002f50 <strspn>
 8002da2:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8002da4:	4620      	mov	r0, r4
 8002da6:	4909      	ldr	r1, [pc, #36]	; (8002dcc <_strtok.constprop.4+0x3c>)
 8002da8:	f000 f8aa 	bl	8002f00 <strpbrk>
  if (*saveptr)
 8002dac:	b160      	cbz	r0, 8002dc8 <_strtok.constprop.4+0x38>
    *(*saveptr)++ = '\0';
 8002dae:	1c42      	adds	r2, r0, #1
 8002db0:	2300      	movs	r3, #0
 8002db2:	602a      	str	r2, [r5, #0]
 8002db4:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8002db6:	7823      	ldrb	r3, [r4, #0]
 8002db8:	b123      	cbz	r3, 8002dc4 <_strtok.constprop.4+0x34>
 8002dba:	4620      	mov	r0, r4
}
 8002dbc:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 8002dbe:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8002dc0:	2c00      	cmp	r4, #0
 8002dc2:	d1ea      	bne.n	8002d9a <_strtok.constprop.4+0xa>
    return NULL;
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8002dc8:	6028      	str	r0, [r5, #0]
 8002dca:	e7f4      	b.n	8002db6 <_strtok.constprop.4+0x26>
 8002dcc:	080034b0 	.word	0x080034b0

08002dd0 <long_to_string_with_divisor.constprop.3>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8002dd0:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8002dd2:	f100 070b 	add.w	r7, r0, #11
 8002dd6:	463c      	mov	r4, r7
 8002dd8:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 8002dda:	fbb1 f6f2 	udiv	r6, r1, r2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 8002dde:	fbb5 f5f2 	udiv	r5, r5, r2
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 8002de2:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8002de6:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8002dea:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8002dec:	bfc8      	it	gt
 8002dee:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
 8002df8:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8002dfa:	2d00      	cmp	r5, #0
 8002dfc:	d1ed      	bne.n	8002dda <long_to_string_with_divisor.constprop.3+0xa>

  i = (int)(p + MAX_FILLER - q);
 8002dfe:	1b3a      	subs	r2, r7, r4
 8002e00:	4402      	add	r2, r0
 8002e02:	e001      	b.n	8002e08 <long_to_string_with_divisor.constprop.3+0x38>
 8002e04:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8002e08:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8002e0c:	4290      	cmp	r0, r2
 8002e0e:	d1f9      	bne.n	8002e04 <long_to_string_with_divisor.constprop.3+0x34>

  return p;
}
 8002e10:	bcf0      	pop	{r4, r5, r6, r7}
 8002e12:	4770      	bx	lr
	...

08002e20 <memset>:
 8002e20:	b470      	push	{r4, r5, r6}
 8002e22:	0784      	lsls	r4, r0, #30
 8002e24:	d046      	beq.n	8002eb4 <memset+0x94>
 8002e26:	1e54      	subs	r4, r2, #1
 8002e28:	2a00      	cmp	r2, #0
 8002e2a:	d041      	beq.n	8002eb0 <memset+0x90>
 8002e2c:	b2cd      	uxtb	r5, r1
 8002e2e:	4603      	mov	r3, r0
 8002e30:	e002      	b.n	8002e38 <memset+0x18>
 8002e32:	1e62      	subs	r2, r4, #1
 8002e34:	b3e4      	cbz	r4, 8002eb0 <memset+0x90>
 8002e36:	4614      	mov	r4, r2
 8002e38:	f803 5b01 	strb.w	r5, [r3], #1
 8002e3c:	079a      	lsls	r2, r3, #30
 8002e3e:	d1f8      	bne.n	8002e32 <memset+0x12>
 8002e40:	2c03      	cmp	r4, #3
 8002e42:	d92e      	bls.n	8002ea2 <memset+0x82>
 8002e44:	b2cd      	uxtb	r5, r1
 8002e46:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8002e4a:	2c0f      	cmp	r4, #15
 8002e4c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8002e50:	d919      	bls.n	8002e86 <memset+0x66>
 8002e52:	4626      	mov	r6, r4
 8002e54:	f103 0210 	add.w	r2, r3, #16
 8002e58:	3e10      	subs	r6, #16
 8002e5a:	2e0f      	cmp	r6, #15
 8002e5c:	f842 5c10 	str.w	r5, [r2, #-16]
 8002e60:	f842 5c0c 	str.w	r5, [r2, #-12]
 8002e64:	f842 5c08 	str.w	r5, [r2, #-8]
 8002e68:	f842 5c04 	str.w	r5, [r2, #-4]
 8002e6c:	f102 0210 	add.w	r2, r2, #16
 8002e70:	d8f2      	bhi.n	8002e58 <memset+0x38>
 8002e72:	f1a4 0210 	sub.w	r2, r4, #16
 8002e76:	f022 020f 	bic.w	r2, r2, #15
 8002e7a:	f004 040f 	and.w	r4, r4, #15
 8002e7e:	3210      	adds	r2, #16
 8002e80:	2c03      	cmp	r4, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	d90d      	bls.n	8002ea2 <memset+0x82>
 8002e86:	461e      	mov	r6, r3
 8002e88:	4622      	mov	r2, r4
 8002e8a:	3a04      	subs	r2, #4
 8002e8c:	2a03      	cmp	r2, #3
 8002e8e:	f846 5b04 	str.w	r5, [r6], #4
 8002e92:	d8fa      	bhi.n	8002e8a <memset+0x6a>
 8002e94:	1f22      	subs	r2, r4, #4
 8002e96:	f022 0203 	bic.w	r2, r2, #3
 8002e9a:	3204      	adds	r2, #4
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f004 0403 	and.w	r4, r4, #3
 8002ea2:	b12c      	cbz	r4, 8002eb0 <memset+0x90>
 8002ea4:	b2c9      	uxtb	r1, r1
 8002ea6:	441c      	add	r4, r3
 8002ea8:	f803 1b01 	strb.w	r1, [r3], #1
 8002eac:	42a3      	cmp	r3, r4
 8002eae:	d1fb      	bne.n	8002ea8 <memset+0x88>
 8002eb0:	bc70      	pop	{r4, r5, r6}
 8002eb2:	4770      	bx	lr
 8002eb4:	4614      	mov	r4, r2
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	e7c2      	b.n	8002e40 <memset+0x20>
 8002eba:	bf00      	nop
 8002ebc:	0000      	movs	r0, r0
	...

08002ec0 <strcasecmp>:
 8002ec0:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <strcasecmp+0x3c>)
 8002ec2:	b430      	push	{r4, r5}
 8002ec4:	681d      	ldr	r5, [r3, #0]
 8002ec6:	e002      	b.n	8002ece <strcasecmp+0xe>
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	d114      	bne.n	8002ef6 <strcasecmp+0x36>
 8002ecc:	b19a      	cbz	r2, 8002ef6 <strcasecmp+0x36>
 8002ece:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002ed2:	18ea      	adds	r2, r5, r3
 8002ed4:	7852      	ldrb	r2, [r2, #1]
 8002ed6:	f002 0203 	and.w	r2, r2, #3
 8002eda:	2a01      	cmp	r2, #1
 8002edc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ee0:	bf08      	it	eq
 8002ee2:	3320      	addeq	r3, #32
 8002ee4:	18ac      	adds	r4, r5, r2
 8002ee6:	7864      	ldrb	r4, [r4, #1]
 8002ee8:	f004 0403 	and.w	r4, r4, #3
 8002eec:	2c01      	cmp	r4, #1
 8002eee:	d1eb      	bne.n	8002ec8 <strcasecmp+0x8>
 8002ef0:	3220      	adds	r2, #32
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	d0eb      	beq.n	8002ece <strcasecmp+0xe>
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	bc30      	pop	{r4, r5}
 8002efa:	4770      	bx	lr
 8002efc:	2000083c 	.word	0x2000083c

08002f00 <strpbrk>:
 8002f00:	b430      	push	{r4, r5}
 8002f02:	7804      	ldrb	r4, [r0, #0]
 8002f04:	b1ec      	cbz	r4, 8002f42 <strpbrk+0x42>
 8002f06:	780d      	ldrb	r5, [r1, #0]
 8002f08:	b1ad      	cbz	r5, 8002f36 <strpbrk+0x36>
 8002f0a:	42ac      	cmp	r4, r5
 8002f0c:	d00e      	beq.n	8002f2c <strpbrk+0x2c>
 8002f0e:	460a      	mov	r2, r1
 8002f10:	e001      	b.n	8002f16 <strpbrk+0x16>
 8002f12:	429c      	cmp	r4, r3
 8002f14:	d009      	beq.n	8002f2a <strpbrk+0x2a>
 8002f16:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f9      	bne.n	8002f12 <strpbrk+0x12>
 8002f1e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8002f22:	2c00      	cmp	r4, #0
 8002f24:	d1f0      	bne.n	8002f08 <strpbrk+0x8>
 8002f26:	7815      	ldrb	r5, [r2, #0]
 8002f28:	e000      	b.n	8002f2c <strpbrk+0x2c>
 8002f2a:	4625      	mov	r5, r4
 8002f2c:	2d00      	cmp	r5, #0
 8002f2e:	bf08      	it	eq
 8002f30:	2000      	moveq	r0, #0
 8002f32:	bc30      	pop	{r4, r5}
 8002f34:	4770      	bx	lr
 8002f36:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8002f3a:	460a      	mov	r2, r1
 8002f3c:	2c00      	cmp	r4, #0
 8002f3e:	d1e3      	bne.n	8002f08 <strpbrk+0x8>
 8002f40:	e7f1      	b.n	8002f26 <strpbrk+0x26>
 8002f42:	4620      	mov	r0, r4
 8002f44:	bc30      	pop	{r4, r5}
 8002f46:	4770      	bx	lr
	...

08002f50 <strspn>:
 8002f50:	b470      	push	{r4, r5, r6}
 8002f52:	7804      	ldrb	r4, [r0, #0]
 8002f54:	b1a4      	cbz	r4, 8002f80 <strspn+0x30>
 8002f56:	4605      	mov	r5, r0
 8002f58:	780e      	ldrb	r6, [r1, #0]
 8002f5a:	b14e      	cbz	r6, 8002f70 <strspn+0x20>
 8002f5c:	42b4      	cmp	r4, r6
 8002f5e:	d00a      	beq.n	8002f76 <strspn+0x26>
 8002f60:	460a      	mov	r2, r1
 8002f62:	e001      	b.n	8002f68 <strspn+0x18>
 8002f64:	429c      	cmp	r4, r3
 8002f66:	d006      	beq.n	8002f76 <strspn+0x26>
 8002f68:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f9      	bne.n	8002f64 <strspn+0x14>
 8002f70:	1a28      	subs	r0, r5, r0
 8002f72:	bc70      	pop	{r4, r5, r6}
 8002f74:	4770      	bx	lr
 8002f76:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8002f7a:	2c00      	cmp	r4, #0
 8002f7c:	d1ed      	bne.n	8002f5a <strspn+0xa>
 8002f7e:	e7f7      	b.n	8002f70 <strspn+0x20>
 8002f80:	4620      	mov	r0, r4
 8002f82:	e7f6      	b.n	8002f72 <strspn+0x22>
	...

08002f90 <zero_status>:
	...

08002fa0 <active_status>:
	...

08002fb0 <halted_status>:
 8002fb0:	0001 0000 0000 0000 0000 0000 0000 0000     ................

08002fc0 <ep1config>:
 8002fc0:	0002 0000 0000 0000 1111 0800 1091 0800     ................
 8002fd0:	0040 0040 0854 2000 0864 2000 0002 0000     @.@.T.. d.. ....
	...

08002ff0 <vcom_string1>:
 8002ff0:	0312 004c 0065 0061 0066 004c 0061 0062     ..L.e.a.f.L.a.b.
 8003000:	0073 0000 0000 0000 0000 0000 0000 0000     s...............

08003010 <vcom_configuration_descriptor_data>:
 8003010:	0209 0043 0102 c000 0932 0004 0100 0202     ..C.....2.......
 8003020:	0001 2405 1000 0501 0124 0100 2404 0202     ...$....$....$..
 8003030:	2405 0006 0701 8205 0803 ff00 0409 0001     .$..............
 8003040:	0a02 0000 0700 0105 4002 0000 0507 0281     .........@......
 8003050:	0040 0000 0000 0000 0000 0000 0000 0000     @...............

08003060 <vcom_string2>:
 8003060:	0338 0043 0068 0069 0062 0069 004f 0053     8.C.h.i.b.i.O.S.
 8003070:	002f 0052 0054 0020 0056 0069 0072 0074     /.R.T. .V.i.r.t.
 8003080:	0075 0061 006c 0020 0043 004f 004d 0020     u.a.l. .C.O.M. .
 8003090:	0050 006f 0072 0074 0000 0000 0000 0000     P.o.r.t.........

080030a0 <vcom_configuration_descriptor>:
 80030a0:	0043 0000 3010 0800 0000 0000 0000 0000     C....0..........

080030b0 <ep2config>:
 80030b0:	0003 0000 0000 0000 02b1 0800 0000 0000     ................
 80030c0:	0010 0000 0844 2000 0000 0000 0001 0000     ....D.. ........
	...
 80030e0:	6e28 6c75 296c 0000 7355 6761 3a65 2520     (null)..Usage: %
 80030f0:	0d73 000a 7973 7473 6d69 0065 6c25 0d75     s...systime.%lu.
 8003100:	000a 0000 6e69 6f66 0000 0000 654b 6e72     ....info....Kern
 8003110:	6c65 203a 2020 2020 2020 7325 0a0d 0000     el:       %s....
 8003120:	2e33 2e30 0031 0000 6f43 706d 6c69 7265     3.0.1...Compiler
 8003130:	203a 2020 2020 7325 0a0d 0000 4347 2043     :     %s....GCC 
 8003140:	2e34 2e39 2033 3032 3531 3530 3932 2820     4.9.3 20150529 (
 8003150:	6572 656c 7361 2965 5b20 5241 2f4d 6d65     release) [ARM/em
 8003160:	6562 6464 6465 342d 395f 622d 6172 636e     bedded-4_9-branc
 8003170:	2068 6572 6976 6973 6e6f 3220 3732 3739     h revision 22797
 8003180:	5d37 0000 7241 6863 7469 6365 7574 6572     7]..Architecture
 8003190:	203a 7325 0a0d 0000 5241 764d 2d37 004d     : %s....ARMv7-M.
 80031a0:	6f43 6572 5620 7261 6169 746e 203a 7325     Core Variant: %s
 80031b0:	0a0d 0000 6f43 7472 7865 4d2d 0033 0000     ....Cortex-M3...
 80031c0:	6f50 7472 4920 666e 3a6f 2020 2020 7325     Port Info:    %s
 80031d0:	0a0d 0000 6441 6176 636e 6465 6b20 7265     ....Advanced ker
 80031e0:	656e 206c 6f6d 6564 0000 0000 6c50 7461     nel mode....Plat
 80031f0:	6f66 6d72 203a 2020 2020 7325 0a0d 0000     form:     %s....
 8003200:	5453 334d 4632 3031 2078 6550 6672 726f     STM32F10x Perfor
 8003210:	616d 636e 2065 694c 656e 4d20 6465 7569     mance Line Mediu
 8003220:	206d 6544 736e 7469 0079 0000 6f42 7261     m Density...Boar
 8003230:	3a64 2020 2020 2020 2020 7325 0a0d 0000     d:        %s....
 8003240:	654c 6661 614c 7362 4d20 7061 656c 4d20     LeafLabs Maple M
 8003250:	6e69 0069 7542 6c69 2064 6974 656d 203a     ini.Build time: 
 8003260:	2020 7325 7325 7325 0a0d 0000 6f4e 2076       %s%s%s....Nov 
 8003270:	3431 3220 3130 0037 2d20 0020 3931 353a     14 2017. - .19:5
 8003280:	3a30 3130 0000 0000 6873 6c65 006c 0000     0:01....shell...
 8003290:	0a0d 5453 6365 2868 6173 6761 7261 742e     ..STech(saagar.t
 80032a0:	6365 4068 6d67 6961 2e6c 6f63 296d 0a0d     ech@gmail.com)..
 80032b0:	0000 0000 7567 7365 3e74 0020 445e 0000     ....guest> .^D..
 80032c0:	6f74 206f 616d 796e 6120 6772 6d75 6e65     too many argumen
 80032d0:	7374 0a0d 0000 0000 7865 7469 0000 0000     ts......exit....
 80032e0:	6568 706c 0000 0000 6f43 6d6d 6e61 7364     help....Commands
 80032f0:	203a 6568 706c 6520 6978 2074 0000 0000     : help exit ....
 8003300:	7325 0020 7325 0000 3f20 0a0d 0000 0000     %s .%s.. ?......
 8003310:	0a0d 6f6c 6f67 7475 0000 0000 0000 0000     ..logout........

08003320 <vcom_device_descriptor_data>:
 8003320:	0112 0110 0002 4000 1eaf 0004 0200 0201     .......@........
 8003330:	0103 0000 0000 0000 0000 0000 0000 0000     ................

08003340 <ep0config>:
 8003340:	0000 0000 0a81 0800 0991 0800 0411 0800     ................
 8003350:	0040 0040 0878 2000 0878 2000 0001 0000     @.@.x.. x.. ....
 8003360:	088c 2000 0000 0000 0000 0000 0000 0000     ... ............

08003370 <vcom_string0>:
 8003370:	0304 0409 0000 0000 0000 0000 0000 0000     ................

08003380 <vcom_string3>:
 8003380:	0308 0033 0030 0031 0000 0000 0000 0000     ..3.0.1.........

08003390 <CSWTCH.32>:
 8003390:	0400 0000 0600 0000 0000 0000 0000 0000     ................

080033a0 <vcom_strings>:
 80033a0:	0004 0000 3370 0800 0012 0000 2ff0 0800     ....p3......./..
 80033b0:	0038 0000 3060 0800 0008 0000 3380 0800     8...`0.......3..

080033c0 <vcom_device_descriptor>:
 80033c0:	0012 0000 3320 0800 0000 0000 0000 0000     .... 3..........

080033d0 <ch_debug>:
 80033d0:	616d 6e69 1600 1801 0204 0844 100c 1814     main......D.....
 80033e0:	1c00 1e1d 0000 0000 0000 0000 0000 0000     ................

080033f0 <shell_cfg1>:
 80033f0:	0a64 2000 3420 0800 0000 0000 0000 0000     d..  4..........

08003400 <usbcfg>:
 8003400:	1d51 0800 1441 0800 02c1 0800 0000 0000     Q...A...........

08003410 <serusbcfg>:
 8003410:	09e0 2000 0101 0002 0000 0000 0000 0000     ... ............

08003420 <commands>:
 8003420:	3480 0800 2361 0800 3484 0800 2331 0800     .4..a#...4..1#..
	...
 8003440:	6c62 6e69 656b 0072 6156 756c 2065 203a     blinker.Value : 
 8003450:	6425 0a0d 0000 0000 7355 6761 3a65 7420     %d......Usage: t
 8003460:	7365 0d74 000a 0000 7355 6761 3a65 6d20     est.....Usage: m
 8003470:	6d65 0a0d 0000 0000 6469 656c 0000 0000     em......idle....
 8003480:	656d 006d 6461 0063 0000 0000 0000 0000     mem.adc.........

08003490 <vmt>:
 8003490:	07a1 0800 08c1 0800 0821 0800 0931 0800     ........!...1...
 80034a0:	0811 0800 0921 0800 0791 0800 08b1 0800     ....!...........
 80034b0:	0920 0000 0000 0000 0000 0000 0000 0000      ...............

080034c0 <_ctype_>:
 80034c0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80034d0:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80034e0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80034f0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8003500:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8003510:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8003520:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8003530:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8003540:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
