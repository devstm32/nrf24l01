
build/rotaryEnc.elf:     file format elf32-littlearm


Disassembly of section .text:

08000140 <Reset_Handler>:
 8000140:	b672      	cpsid	i
 8000142:	4821      	ldr	r0, [pc, #132]	; (80001c8 <endfiniloop+0x4>)
 8000144:	f380 8809 	msr	PSP, r0
 8000148:	2002      	movs	r0, #2
 800014a:	f380 8814 	msr	CONTROL, r0
 800014e:	f3bf 8f6f 	isb	sy
 8000152:	f001 f925 	bl	80013a0 <__core_init>
 8000156:	f003 f88b 	bl	8003270 <__early_init>
 800015a:	481c      	ldr	r0, [pc, #112]	; (80001cc <endfiniloop+0x8>)
 800015c:	491c      	ldr	r1, [pc, #112]	; (80001d0 <endfiniloop+0xc>)
 800015e:	4a1d      	ldr	r2, [pc, #116]	; (80001d4 <endfiniloop+0x10>)

08000160 <msloop>:
 8000160:	4291      	cmp	r1, r2
 8000162:	bf3c      	itt	cc
 8000164:	f841 0b04 	strcc.w	r0, [r1], #4
 8000168:	e7fa      	bcc.n	8000160 <msloop>
 800016a:	491b      	ldr	r1, [pc, #108]	; (80001d8 <endfiniloop+0x14>)
 800016c:	4a16      	ldr	r2, [pc, #88]	; (80001c8 <endfiniloop+0x4>)

0800016e <psloop>:
 800016e:	4291      	cmp	r1, r2
 8000170:	bf3c      	itt	cc
 8000172:	f841 0b04 	strcc.w	r0, [r1], #4
 8000176:	e7fa      	bcc.n	800016e <psloop>
 8000178:	4918      	ldr	r1, [pc, #96]	; (80001dc <endfiniloop+0x18>)
 800017a:	4a19      	ldr	r2, [pc, #100]	; (80001e0 <endfiniloop+0x1c>)
 800017c:	4b19      	ldr	r3, [pc, #100]	; (80001e4 <endfiniloop+0x20>)

0800017e <dloop>:
 800017e:	429a      	cmp	r2, r3
 8000180:	bf3e      	ittt	cc
 8000182:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000186:	f842 0b04 	strcc.w	r0, [r2], #4
 800018a:	e7f8      	bcc.n	800017e <dloop>
 800018c:	2000      	movs	r0, #0
 800018e:	4916      	ldr	r1, [pc, #88]	; (80001e8 <endfiniloop+0x24>)
 8000190:	4a16      	ldr	r2, [pc, #88]	; (80001ec <endfiniloop+0x28>)

08000192 <bloop>:
 8000192:	4291      	cmp	r1, r2
 8000194:	bf3c      	itt	cc
 8000196:	f841 0b04 	strcc.w	r0, [r1], #4
 800019a:	e7fa      	bcc.n	8000192 <bloop>
 800019c:	f001 f8f8 	bl	8001390 <__late_init>
 80001a0:	4c13      	ldr	r4, [pc, #76]	; (80001f0 <endfiniloop+0x2c>)
 80001a2:	4d14      	ldr	r5, [pc, #80]	; (80001f4 <endfiniloop+0x30>)

080001a4 <initloop>:
 80001a4:	42ac      	cmp	r4, r5
 80001a6:	da03      	bge.n	80001b0 <endinitloop>
 80001a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80001ac:	4788      	blx	r1
 80001ae:	e7f9      	b.n	80001a4 <initloop>

080001b0 <endinitloop>:
 80001b0:	f001 face 	bl	8001750 <main>
 80001b4:	4c10      	ldr	r4, [pc, #64]	; (80001f8 <endfiniloop+0x34>)
 80001b6:	4d11      	ldr	r5, [pc, #68]	; (80001fc <endfiniloop+0x38>)

080001b8 <finiloop>:
 80001b8:	42ac      	cmp	r4, r5
 80001ba:	da03      	bge.n	80001c4 <endfiniloop>
 80001bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80001c0:	4788      	blx	r1
 80001c2:	e7f9      	b.n	80001b8 <finiloop>

080001c4 <endfiniloop>:
 80001c4:	f001 b8dc 	b.w	8001380 <__default_exit>
 80001c8:	20000800 	.word	0x20000800
 80001cc:	55555555 	.word	0x55555555
 80001d0:	20000000 	.word	0x20000000
 80001d4:	20000400 	.word	0x20000400
 80001d8:	20000400 	.word	0x20000400
 80001dc:	080045e8 	.word	0x080045e8
 80001e0:	20000800 	.word	0x20000800
 80001e4:	20000838 	.word	0x20000838
 80001e8:	20000838 	.word	0x20000838
 80001ec:	20001ac8 	.word	0x20001ac8
 80001f0:	08000140 	.word	0x08000140
 80001f4:	08000140 	.word	0x08000140
 80001f8:	08000140 	.word	0x08000140
 80001fc:	08000140 	.word	0x08000140

08000200 <_port_switch>:
 8000200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000204:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000208:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800020c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000210 <_port_thread_start>:
 8000210:	2300      	movs	r3, #0
 8000212:	f383 8811 	msr	BASEPRI, r3
 8000216:	4628      	mov	r0, r5
 8000218:	47a0      	blx	r4
 800021a:	2000      	movs	r0, #0
 800021c:	f001 f840 	bl	80012a0 <chThdExit>

08000220 <_port_switch_from_isr>:
 8000220:	f001 f856 	bl	80012d0 <chSchDoReschedule>

08000224 <_port_exit_from_isr>:
 8000224:	df00      	svc	0
 8000226:	e7fe      	b.n	8000226 <_port_exit_from_isr+0x2>
	...

08000230 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8000230:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 8000232:	b430      	push	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8000234:	fa02 f301 	lsl.w	r3, r2, r1
 8000238:	8904      	ldrh	r4, [r0, #8]
 800023a:	b29b      	uxth	r3, r3
 800023c:	ea13 0504 	ands.w	r5, r3, r4
 8000240:	d002      	beq.n	8000248 <usbStartTransmitI+0x18>
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 8000242:	bc30      	pop	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
 8000244:	4610      	mov	r0, r2
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 8000246:	4770      	bx	lr
 8000248:	0089      	lsls	r1, r1, #2
 800024a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800024e:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8000252:	680a      	ldr	r2, [r1, #0]

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000254:	4323      	orrs	r3, r4
 8000256:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800025a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800025e:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 8000262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000266:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800026a:	8103      	strh	r3, [r0, #8]
  usb_lld_start_in(usbp, ep);
  return false;
 800026c:	4628      	mov	r0, r5
}
 800026e:	bc30      	pop	{r4, r5}
 8000270:	600a      	str	r2, [r1, #0]
 8000272:	4770      	bx	lr
	...

08000280 <set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8000280:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8000284:	6842      	ldr	r2, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8000286:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 800028a:	4906      	ldr	r1, [pc, #24]	; (80002a4 <set_address+0x24>)
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800028c:	6812      	ldr	r2, [r2, #0]
 800028e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8000292:	b510      	push	{r4, lr}
 8000294:	4604      	mov	r4, r0
 8000296:	64cb      	str	r3, [r1, #76]	; 0x4c

  usbp->address = usbp->setup[2];
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8000298:	b10a      	cbz	r2, 800029e <set_address+0x1e>
 800029a:	2101      	movs	r1, #1
 800029c:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 800029e:	2303      	movs	r3, #3
 80002a0:	7023      	strb	r3, [r4, #0]
 80002a2:	bd10      	pop	{r4, pc}
 80002a4:	40005c00 	.word	0x40005c00
	...

080002b0 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
	...

080002c0 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 80002c0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80002c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80002c8:	2b20      	cmp	r3, #32
 80002ca:	d001      	beq.n	80002d0 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 80002cc:	2000      	movs	r0, #0
    }
  }
  return false;
}
 80002ce:	4770      	bx	lr
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 80002d0:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 80002d4:	2b21      	cmp	r3, #33	; 0x21
 80002d6:	d003      	beq.n	80002e0 <sduRequestsHook+0x20>
 80002d8:	2b22      	cmp	r3, #34	; 0x22
 80002da:	d009      	beq.n	80002f0 <sduRequestsHook+0x30>
 80002dc:	2b20      	cmp	r3, #32
 80002de:	d1f5      	bne.n	80002cc <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80002e0:	4906      	ldr	r1, [pc, #24]	; (80002fc <sduRequestsHook+0x3c>)
 80002e2:	2207      	movs	r2, #7
 80002e4:	2300      	movs	r3, #0
 80002e6:	6681      	str	r1, [r0, #104]	; 0x68
 80002e8:	66c2      	str	r2, [r0, #108]	; 0x6c
 80002ea:	6703      	str	r3, [r0, #112]	; 0x70
      return true;
 80002ec:	2001      	movs	r0, #1
 80002ee:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80002f0:	2300      	movs	r3, #0
 80002f2:	6683      	str	r3, [r0, #104]	; 0x68
 80002f4:	66c3      	str	r3, [r0, #108]	; 0x6c
 80002f6:	6703      	str	r3, [r0, #112]	; 0x70
      return true;
 80002f8:	2001      	movs	r0, #1
 80002fa:	4770      	bx	lr
 80002fc:	20000800 	.word	0x20000800

08000300 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000300:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000304:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000306:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800030a:	2300      	movs	r3, #0
 800030c:	f383 8811 	msr	BASEPRI, r3
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
	...

08000320 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000320:	b410      	push	{r4}
 8000322:	2320      	movs	r3, #32
 8000324:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000328:	4c09      	ldr	r4, [pc, #36]	; (8000350 <chCoreAlloc+0x30>)
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <chCoreAlloc+0x34>)
 800032c:	6822      	ldr	r2, [r4, #0]
 800032e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8000330:	1dc3      	adds	r3, r0, #7
 8000332:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000336:	1a89      	subs	r1, r1, r2
 8000338:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800033a:	bf9d      	ittte	ls
 800033c:	189b      	addls	r3, r3, r2
 800033e:	6023      	strls	r3, [r4, #0]

  return p;
 8000340:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8000342:	2000      	movhi	r0, #0
 8000344:	2300      	movs	r3, #0
 8000346:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800034a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	20000b88 	.word	0x20000b88
 8000354:	20000910 	.word	0x20000910
	...

08000360 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000360:	b410      	push	{r4}
 8000362:	2320      	movs	r3, #32
 8000364:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000368:	7f03      	ldrb	r3, [r0, #28]
 800036a:	2b07      	cmp	r3, #7
 800036c:	d80e      	bhi.n	800038c <wakeup+0x2c>
 800036e:	e8df f003 	tbb	[pc, r3]
 8000372:	0d27      	.short	0x0d27
 8000374:	0408230d 	.word	0x0408230d
 8000378:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800037a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800037c:	6893      	ldr	r3, [r2, #8]
 800037e:	3301      	adds	r3, #1
 8000380:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000382:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000386:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000388:	6802      	ldr	r2, [r0, #0]
 800038a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800038c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000390:	2200      	movs	r2, #0
 8000392:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000396:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000398:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800039a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	428a      	cmp	r2, r1
 80003a0:	d2fb      	bcs.n	800039a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80003a2:	685a      	ldr	r2, [r3, #4]
 80003a4:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80003a6:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 80003a8:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 80003aa:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80003ac:	6058      	str	r0, [r3, #4]
 80003ae:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80003b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003b6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 80003b8:	6a03      	ldr	r3, [r0, #32]
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	e7e5      	b.n	800038c <wakeup+0x2c>
 80003c0:	2300      	movs	r3, #0
 80003c2:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80003c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	20001960 	.word	0x20001960

080003d0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80003d0:	b410      	push	{r4}
 80003d2:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80003d4:	2200      	movs	r2, #0
 80003d6:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80003da:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80003dc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80003de:	689a      	ldr	r2, [r3, #8]
 80003e0:	428a      	cmp	r2, r1
 80003e2:	d2fb      	bcs.n	80003dc <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80003e4:	685a      	ldr	r2, [r3, #4]
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 80003e6:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80003e8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80003ea:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80003ec:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80003ee:	605c      	str	r4, [r3, #4]

  return tp;
}
 80003f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	20001960 	.word	0x20001960
 80003fc:	00000000 	.word	0x00000000

08000400 <_idle_thread.lto_priv.48>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000400:	e7fe      	b.n	8000400 <_idle_thread.lto_priv.48>
 8000402:	bf00      	nop
	...

08000410 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8000410:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8000414:	b538      	push	{r3, r4, r5, lr}
 8000416:	2a06      	cmp	r2, #6
 8000418:	d80a      	bhi.n	8000430 <_usb_ep0out+0x20>
 800041a:	2301      	movs	r3, #1
 800041c:	4093      	lsls	r3, r2
 800041e:	f013 0f67 	tst.w	r3, #103	; 0x67
 8000422:	4604      	mov	r4, r0
 8000424:	d111      	bne.n	800044a <_usb_ep0out+0x3a>
 8000426:	f013 0508 	ands.w	r5, r3, #8
 800042a:	d102      	bne.n	8000432 <_usb_ep0out+0x22>
 800042c:	06db      	lsls	r3, r3, #27
 800042e:	d42e      	bmi.n	800048e <_usb_ep0out+0x7e>
 8000430:	bd38      	pop	{r3, r4, r5, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 8000432:	68c3      	ldr	r3, [r0, #12]
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d1f9      	bne.n	8000430 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800043c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800043e:	b103      	cbz	r3, 8000442 <_usb_ep0out+0x32>
      usbp->ep0endcb(usbp);
 8000440:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8000442:	2300      	movs	r3, #0
 8000444:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000448:	bd38      	pop	{r3, r4, r5, pc}
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800044a:	4a1c      	ldr	r2, [pc, #112]	; (80004bc <_usb_ep0out+0xac>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800044c:	6841      	ldr	r1, [r0, #4]
 800044e:	6813      	ldr	r3, [r2, #0]
 8000450:	680d      	ldr	r5, [r1, #0]
 8000452:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800045a:	f083 0310 	eor.w	r3, r3, #16
 800045e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000466:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000468:	6813      	ldr	r3, [r2, #0]
 800046a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800046e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000472:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800047a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800047e:	6013      	str	r3, [r2, #0]
 8000480:	b10d      	cbz	r5, 8000486 <_usb_ep0out+0x76>
 8000482:	2105      	movs	r1, #5
 8000484:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8000486:	2306      	movs	r3, #6
 8000488:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800048c:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800048e:	68c3      	ldr	r3, [r0, #12]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8000490:	2205      	movs	r2, #5
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000492:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000494:	4629      	mov	r1, r5

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8000496:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800049a:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800049c:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800049e:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 80004a0:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 80004a2:	f002 ff2d 	bl	8003300 <usb_lld_prepare_transmit>
 80004a6:	2320      	movs	r3, #32
 80004a8:	f383 8811 	msr	BASEPRI, r3
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, 0);
 80004ac:	4620      	mov	r0, r4
 80004ae:	4629      	mov	r1, r5
 80004b0:	f7ff febe 	bl	8000230 <usbStartTransmitI>
 80004b4:	f385 8811 	msr	BASEPRI, r5
 80004b8:	bd38      	pop	{r3, r4, r5, pc}
 80004ba:	bf00      	nop
 80004bc:	40005c00 	.word	0x40005c00

080004c0 <onotify.lto_priv.47>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 80004c2:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80004c4:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 80004c8:	6813      	ldr	r3, [r2, #0]
 80004ca:	7819      	ldrb	r1, [r3, #0]
 80004cc:	2904      	cmp	r1, #4
 80004ce:	d000      	beq.n	80004d2 <onotify.lto_priv.47+0x12>
 80004d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004d2:	7a21      	ldrb	r1, [r4, #8]
 80004d4:	2902      	cmp	r1, #2
 80004d6:	d1fb      	bne.n	80004d0 <onotify.lto_priv.47+0x10>
    return;
  }

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80004d8:	7912      	ldrb	r2, [r2, #4]
 80004da:	891b      	ldrh	r3, [r3, #8]
 80004dc:	2601      	movs	r6, #1
 80004de:	fa06 f202 	lsl.w	r2, r6, r2
 80004e2:	ea12 0503 	ands.w	r5, r2, r3
 80004e6:	d1f3      	bne.n	80004d0 <onotify.lto_priv.47+0x10>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 80004e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80004ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80004ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80004ee:	1ad3      	subs	r3, r2, r3
    if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	d0ed      	beq.n	80004d0 <onotify.lto_priv.47+0x10>
 80004f4:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();

      usbPrepareQueuedTransmit(sdup->config->usbp,
 80004f8:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 80004fc:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8000500:	680a      	ldr	r2, [r1, #0]
 8000502:	7909      	ldrb	r1, [r1, #4]
  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000504:	4610      	mov	r0, r2
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000506:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800050a:	68d2      	ldr	r2, [r2, #12]
 800050c:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 800050e:	6053      	str	r3, [r2, #4]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 8000510:	7016      	strb	r6, [r2, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8000512:	6095      	str	r5, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 8000514:	60d7      	str	r7, [r2, #12]
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000516:	f002 fef3 	bl	8003300 <usb_lld_prepare_transmit>
 800051a:	2320      	movs	r3, #32
 800051c:	f383 8811 	msr	BASEPRI, r3
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8000520:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8000524:	6818      	ldr	r0, [r3, #0]
 8000526:	7919      	ldrb	r1, [r3, #4]
    }
  }
}
 8000528:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      usbPrepareQueuedTransmit(sdup->config->usbp,
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 800052c:	f7ff be80 	b.w	8000230 <usbStartTransmitI>

08000530 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000532:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000534:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8000536:	6994      	ldr	r4, [r2, #24]

  tqp->p_next = tp->p_next;
 8000538:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800053a:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 800053c:	2600      	movs	r6, #0
 800053e:	68a1      	ldr	r1, [r4, #8]
 8000540:	462b      	mov	r3, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000542:	606a      	str	r2, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000544:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000546:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000548:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800054a:	7726      	strb	r6, [r4, #28]
 800054c:	e000      	b.n	8000550 <chSchDoRescheduleAhead+0x20>
 800054e:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8000550:	689a      	ldr	r2, [r3, #8]
 8000552:	428a      	cmp	r2, r1
 8000554:	d8fb      	bhi.n	800054e <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8000556:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000558:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800055a:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 800055c:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = otp;
 800055e:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8000560:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 8000562:	bcf0      	pop	{r4, r5, r6, r7}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000564:	f7ff be4c 	b.w	8000200 <_port_switch>
 8000568:	20001960 	.word	0x20001960
 800056c:	00000000 	.word	0x00000000

08000570 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000572:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000574:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000576:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8000578:	6814      	ldr	r4, [r2, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800057a:	2501      	movs	r5, #1
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 800057c:	7708      	strb	r0, [r1, #28]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800057e:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000580:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000582:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8000584:	4610      	mov	r0, r2
}
 8000586:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000588:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800058a:	f7ff be39 	b.w	8000200 <_port_switch>
 800058e:	bf00      	nop
 8000590:	20001960 	.word	0x20001960
	...

080005a0 <chSchGoSleepTimeoutS>:
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80005a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80005a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80005a8:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80005aa:	b086      	sub	sp, #24

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80005ac:	d051      	beq.n	8000652 <chSchGoSleepTimeoutS+0xb2>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 80005ae:	4c49      	ldr	r4, [pc, #292]	; (80006d4 <chSchGoSleepTimeoutS+0x134>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80005b0:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80005b4:	4625      	mov	r5, r4
 80005b6:	f855 2f1c 	ldr.w	r2, [r5, #28]!
 80005ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80005bc:	2901      	cmp	r1, #1
 80005be:	4606      	mov	r6, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 80005c0:	f8df e114 	ldr.w	lr, [pc, #276]	; 80006d8 <chSchGoSleepTimeoutS+0x138>
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 80005c4:	69a0      	ldr	r0, [r4, #24]
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80005c6:	bf98      	it	ls
 80005c8:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80005ca:	42aa      	cmp	r2, r5
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 80005cc:	9005      	str	r0, [sp, #20]
 80005ce:	b29b      	uxth	r3, r3
  vtp->vt_func = vtfunc;
 80005d0:	f8cd e010 	str.w	lr, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80005d4:	d064      	beq.n	80006a0 <chSchGoSleepTimeoutS+0x100>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80005d6:	4419      	add	r1, r3
 80005d8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80005da:	b289      	uxth	r1, r1
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80005dc:	8910      	ldrh	r0, [r2, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80005de:	1acb      	subs	r3, r1, r3
 80005e0:	b29b      	uxth	r3, r3
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80005e2:	4283      	cmp	r3, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80005e4:	bf38      	it	cc
 80005e6:	6379      	strcc	r1, [r7, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80005e8:	4283      	cmp	r3, r0
 80005ea:	d905      	bls.n	80005f8 <chSchGoSleepTimeoutS+0x58>
    delta -= p->vt_delta;
    p = p->vt_next;
 80005ec:	6812      	ldr	r2, [r2, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 80005ee:	1a1b      	subs	r3, r3, r0
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80005f0:	8910      	ldrh	r0, [r2, #8]
    delta -= p->vt_delta;
 80005f2:	b29b      	uxth	r3, r3
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d3f9      	bcc.n	80005ec <chSchGoSleepTimeoutS+0x4c>
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
 80005f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 80005fc:	6851      	ldr	r1, [r2, #4]
  vtp->vt_prev->vt_next = vtp;
 80005fe:	f10d 0804 	add.w	r8, sp, #4
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000602:	9102      	str	r1, [sp, #8]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8000604:	9201      	str	r2, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8000606:	f8c1 8000 	str.w	r8, [r1]
  p->vt_prev = vtp;
 800060a:	f8c2 8004 	str.w	r8, [r2, #4]
  vtp->vt_delta = delta
 800060e:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000612:	8911      	ldrh	r1, [r2, #8]
 8000614:	1acb      	subs	r3, r1, r3
 8000616:	8113      	strh	r3, [r2, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000618:	84a0      	strh	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 800061a:	4630      	mov	r0, r6
 800061c:	f7ff ffa8 	bl	8000570 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000620:	9b04      	ldr	r3, [sp, #16]
 8000622:	b18b      	cbz	r3, 8000648 <chSchGoSleepTimeoutS+0xa8>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000624:	69e3      	ldr	r3, [r4, #28]
 8000626:	4a2b      	ldr	r2, [pc, #172]	; (80006d4 <chSchGoSleepTimeoutS+0x134>)
 8000628:	4543      	cmp	r3, r8
 800062a:	d01a      	beq.n	8000662 <chSchGoSleepTimeoutS+0xc2>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800062c:	9a02      	ldr	r2, [sp, #8]
 800062e:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 8000630:	2100      	movs	r1, #0

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8000632:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000634:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000636:	42ab      	cmp	r3, r5
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000638:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 800063a:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800063c:	d004      	beq.n	8000648 <chSchGoSleepTimeoutS+0xa8>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800063e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8000642:	891a      	ldrh	r2, [r3, #8]
 8000644:	440a      	add	r2, r1
 8000646:	811a      	strh	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000648:	69a3      	ldr	r3, [r4, #24]
}
 800064a:	6a18      	ldr	r0, [r3, #32]
 800064c:	b006      	add	sp, #24
 800064e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8000652:	f7ff ff8d 	bl	8000570 <chSchGoSleepS>
 8000656:	4c1f      	ldr	r4, [pc, #124]	; (80006d4 <chSchGoSleepTimeoutS+0x134>)
  }

  return currp->p_u.rdymsg;
 8000658:	69a3      	ldr	r3, [r4, #24]
}
 800065a:	6a18      	ldr	r0, [r3, #32]
 800065c:	b006      	add	sp, #24
 800065e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000662:	9e01      	ldr	r6, [sp, #4]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000664:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000666:	42ae      	cmp	r6, r5

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000668:	61d6      	str	r6, [r2, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800066a:	6075      	str	r5, [r6, #4]
  vtp->vt_func = NULL;
 800066c:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800066e:	d02c      	beq.n	80006ca <chSchGoSleepTimeoutS+0x12a>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000670:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000674:	6a41      	ldr	r1, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000676:	8cd5      	ldrh	r5, [r2, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000678:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 800067c:	8933      	ldrh	r3, [r6, #8]
 800067e:	b28a      	uxth	r2, r1
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000680:	1b51      	subs	r1, r2, r5

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000682:	443b      	add	r3, r7
 8000684:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000686:	b289      	uxth	r1, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000688:	428b      	cmp	r3, r1

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800068a:	8133      	strh	r3, [r6, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 800068c:	d9dc      	bls.n	8000648 <chSchGoSleepTimeoutS+0xa8>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 800068e:	1a5b      	subs	r3, r3, r1
 8000690:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000692:	2b01      	cmp	r3, #1
 8000694:	bf98      	it	ls
 8000696:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8000698:	4413      	add	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800069a:	b29b      	uxth	r3, r3
 800069c:	6343      	str	r3, [r0, #52]	; 0x34
 800069e:	e7d3      	b.n	8000648 <chSchGoSleepTimeoutS+0xa8>
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 80006a0:	18ca      	adds	r2, r1, r3
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 80006a2:	f10d 0804 	add.w	r8, sp, #4
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80006a6:	b292      	uxth	r2, r2
  STM32_ST_TIM->SR     = 0;
 80006a8:	f04f 0e00 	mov.w	lr, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80006ac:	2002      	movs	r0, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 80006ae:	84e3      	strh	r3, [r4, #38]	; 0x26
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 80006b0:	9501      	str	r5, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80006b2:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;
 80006b4:	f8ad 100c 	strh.w	r1, [sp, #12]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 80006b8:	f8c4 801c 	str.w	r8, [r4, #28]
      ch.vtlist.vt_prev = vtp;
 80006bc:	f8c4 8020 	str.w	r8, [r4, #32]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80006c0:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80006c2:	f8c7 e010 	str.w	lr, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	e7a7      	b.n	800061a <chSchGoSleepTimeoutS+0x7a>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80006ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ce:	60d3      	str	r3, [r2, #12]
 80006d0:	e7ba      	b.n	8000648 <chSchGoSleepTimeoutS+0xa8>
 80006d2:	bf00      	nop
 80006d4:	20001960 	.word	0x20001960
 80006d8:	08000361 	.word	0x08000361
 80006dc:	00000000 	.word	0x00000000

080006e0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80006e0:	b169      	cbz	r1, 80006fe <chThdEnqueueTimeoutS+0x1e>
 80006e2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80006e6:	b410      	push	{r4}

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80006e8:	699b      	ldr	r3, [r3, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80006ea:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80006ec:	2004      	movs	r0, #4
 80006ee:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 80006f2:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 80006f4:	6053      	str	r3, [r2, #4]
}
 80006f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80006fa:	f7ff bf51 	b.w	80005a0 <chSchGoSleepTimeoutS>
}
 80006fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000702:	4770      	bx	lr
 8000704:	20001960 	.word	0x20001960
	...

08000710 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8000710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000714:	b083      	sub	sp, #12
 8000716:	4604      	mov	r4, r0
 8000718:	468b      	mov	fp, r1
 800071a:	4615      	mov	r5, r2
 800071c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800071e:	69c7      	ldr	r7, [r0, #28]
 8000720:	f04f 0820 	mov.w	r8, #32
 8000724:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8000728:	2600      	movs	r6, #0
 800072a:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800072c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800072e:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8000732:	b1fb      	cbz	r3, 8000774 <chOQWriteTimeout+0x64>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000734:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8000736:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000738:	1c50      	adds	r0, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800073a:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800073c:	6160      	str	r0, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800073e:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000740:	f89b 3000 	ldrb.w	r3, [fp]
 8000744:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8000746:	6923      	ldr	r3, [r4, #16]
 8000748:	6962      	ldr	r2, [r4, #20]
 800074a:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800074c:	bf24      	itt	cs
 800074e:	68e3      	ldrcs	r3, [r4, #12]
 8000750:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8000752:	b10f      	cbz	r7, 8000758 <chOQWriteTimeout+0x48>
      nfy(oqp);
 8000754:	4620      	mov	r0, r4
 8000756:	47b8      	blx	r7
 8000758:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800075c:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 800075e:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8000762:	d011      	beq.n	8000788 <chOQWriteTimeout+0x78>
 8000764:	f388 8811 	msr	BASEPRI, r8
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000768:	46d3      	mov	fp, sl
 800076a:	68a3      	ldr	r3, [r4, #8]
 800076c:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8000770:	2b00      	cmp	r3, #0
 8000772:	d1df      	bne.n	8000734 <chOQWriteTimeout+0x24>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8000774:	4620      	mov	r0, r4
 8000776:	9901      	ldr	r1, [sp, #4]
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	f7ff ffb1 	bl	80006e0 <chThdEnqueueTimeoutS>
 800077e:	9b00      	ldr	r3, [sp, #0]
 8000780:	2800      	cmp	r0, #0
 8000782:	d0d3      	beq.n	800072c <chOQWriteTimeout+0x1c>
 8000784:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8000788:	4630      	mov	r0, r6
 800078a:	b003      	add	sp, #12
 800078c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000790 <writet.lto_priv.55>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
 8000790:	3030      	adds	r0, #48	; 0x30
 8000792:	f7ff bfbd 	b.w	8000710 <chOQWriteTimeout>
 8000796:	bf00      	nop
	...

080007a0 <write.lto_priv.49>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 80007a0:	3030      	adds	r0, #48	; 0x30
 80007a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007a6:	f7ff bfb3 	b.w	8000710 <chOQWriteTimeout>
 80007aa:	bf00      	nop
 80007ac:	0000      	movs	r0, r0
	...

080007b0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80007b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b2:	4604      	mov	r4, r0
 80007b4:	460f      	mov	r7, r1
 80007b6:	4616      	mov	r6, r2
 80007b8:	2320      	movs	r3, #32
 80007ba:	f383 8811 	msr	BASEPRI, r3
 80007be:	e005      	b.n	80007cc <chOQPutTimeout+0x1c>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80007c0:	4620      	mov	r0, r4
 80007c2:	4631      	mov	r1, r6
 80007c4:	f7ff ff8c 	bl	80006e0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80007c8:	2800      	cmp	r0, #0
 80007ca:	db17      	blt.n	80007fc <chOQPutTimeout+0x4c>
 80007cc:	68a5      	ldr	r5, [r4, #8]
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 80007ce:	2d00      	cmp	r5, #0
 80007d0:	d0f6      	beq.n	80007c0 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80007d2:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80007d4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80007d6:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80007d8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80007da:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80007dc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80007de:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80007e0:	6923      	ldr	r3, [r4, #16]
 80007e2:	6962      	ldr	r2, [r4, #20]
 80007e4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80007e6:	bf24      	itt	cs
 80007e8:	68e3      	ldrcs	r3, [r4, #12]
 80007ea:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 80007ec:	69e3      	ldr	r3, [r4, #28]
 80007ee:	b10b      	cbz	r3, 80007f4 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 80007f0:	4620      	mov	r0, r4
 80007f2:	4798      	blx	r3
 80007f4:	2000      	movs	r0, #0
 80007f6:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 80007fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007fc:	f385 8811 	msr	BASEPRI, r5
 8000800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000802:	bf00      	nop
	...

08000810 <putt.lto_priv.53>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 8000810:	3030      	adds	r0, #48	; 0x30
 8000812:	f7ff bfcd 	b.w	80007b0 <chOQPutTimeout>
 8000816:	bf00      	nop
	...

08000820 <put.lto_priv.51>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000820:	3030      	adds	r0, #48	; 0x30
 8000822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000826:	f7ff bfc3 	b.w	80007b0 <chOQPutTimeout>
 800082a:	bf00      	nop
 800082c:	0000      	movs	r0, r0
	...

08000830 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8000830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000834:	4604      	mov	r4, r0
 8000836:	b083      	sub	sp, #12
 8000838:	4689      	mov	r9, r1
 800083a:	4693      	mov	fp, r2
 800083c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800083e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000842:	2720      	movs	r7, #32
 8000844:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8000848:	2600      	movs	r6, #0
 800084a:	46b2      	mov	sl, r6
 800084c:	9701      	str	r7, [sp, #4]

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800084e:	f1b8 0f00 	cmp.w	r8, #0
 8000852:	d007      	beq.n	8000864 <chIQReadTimeout+0x34>
      nfy(iqp);
 8000854:	4620      	mov	r0, r4
 8000856:	47c0      	blx	r8
 8000858:	e004      	b.n	8000864 <chIQReadTimeout+0x34>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800085a:	4620      	mov	r0, r4
 800085c:	4629      	mov	r1, r5
 800085e:	f7ff ff3f 	bl	80006e0 <chThdEnqueueTimeoutS>
 8000862:	b9d0      	cbnz	r0, 800089a <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8000864:	68a7      	ldr	r7, [r4, #8]
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8000866:	2f00      	cmp	r7, #0
 8000868:	d0f7      	beq.n	800085a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800086a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800086c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800086e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000870:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8000872:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000874:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000876:	7813      	ldrb	r3, [r2, #0]
 8000878:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800087c:	6923      	ldr	r3, [r4, #16]
 800087e:	69a2      	ldr	r2, [r4, #24]
 8000880:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8000882:	bf24      	itt	cs
 8000884:	68e3      	ldrcs	r3, [r4, #12]
 8000886:	61a3      	strcs	r3, [r4, #24]
 8000888:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800088c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800088e:	45b3      	cmp	fp, r6
 8000890:	d005      	beq.n	800089e <chIQReadTimeout+0x6e>
 8000892:	9b01      	ldr	r3, [sp, #4]
 8000894:	f383 8811 	msr	BASEPRI, r3
 8000898:	e7d9      	b.n	800084e <chIQReadTimeout+0x1e>
 800089a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800089e:	4630      	mov	r0, r6
 80008a0:	b003      	add	sp, #12
 80008a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008a6:	bf00      	nop
	...

080008b0 <readt.lto_priv.56>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, timeout);
 80008b0:	300c      	adds	r0, #12
 80008b2:	f7ff bfbd 	b.w	8000830 <chIQReadTimeout>
 80008b6:	bf00      	nop
	...

080008c0 <read.lto_priv.50>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 80008c0:	300c      	adds	r0, #12
 80008c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c6:	f7ff bfb3 	b.w	8000830 <chIQReadTimeout>
 80008ca:	bf00      	nop
 80008cc:	0000      	movs	r0, r0
	...

080008d0 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	2320      	movs	r3, #32
 80008d4:	460e      	mov	r6, r1
 80008d6:	4604      	mov	r4, r0
 80008d8:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 80008dc:	69c3      	ldr	r3, [r0, #28]
 80008de:	b13b      	cbz	r3, 80008f0 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 80008e0:	4798      	blx	r3
 80008e2:	e005      	b.n	80008f0 <chIQGetTimeout+0x20>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80008e4:	4620      	mov	r0, r4
 80008e6:	4631      	mov	r1, r6
 80008e8:	f7ff fefa 	bl	80006e0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80008ec:	2800      	cmp	r0, #0
 80008ee:	db13      	blt.n	8000918 <chIQGetTimeout+0x48>
 80008f0:	68a5      	ldr	r5, [r4, #8]
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0f6      	beq.n	80008e4 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80008f6:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 80008f8:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 80008fa:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80008fc:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 80008fe:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8000900:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8000902:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8000904:	bf28      	it	cs
 8000906:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000908:	61a2      	str	r2, [r4, #24]
 800090a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800090c:	bf28      	it	cs
 800090e:	61a3      	strcs	r3, [r4, #24]
 8000910:	2300      	movs	r3, #0
 8000912:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f385 8811 	msr	BASEPRI, r5
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	bf00      	nop

08000920 <gett.lto_priv.54>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 8000920:	300c      	adds	r0, #12
 8000922:	f7ff bfd5 	b.w	80008d0 <chIQGetTimeout>
 8000926:	bf00      	nop
	...

08000930 <get.lto_priv.52>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 8000930:	300c      	adds	r0, #12
 8000932:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000936:	f7ff bfcb 	b.w	80008d0 <chIQGetTimeout>
 800093a:	bf00      	nop
 800093c:	0000      	movs	r0, r0
	...

08000940 <usbStartReceiveI>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 8000940:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 8000942:	b430      	push	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 8000944:	fa02 f301 	lsl.w	r3, r2, r1
 8000948:	8944      	ldrh	r4, [r0, #10]
 800094a:	b29b      	uxth	r3, r3
 800094c:	ea13 0504 	ands.w	r5, r3, r4
 8000950:	d002      	beq.n	8000958 <usbStartReceiveI+0x18>
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 8000952:	bc30      	pop	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
 8000954:	4610      	mov	r0, r2
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 8000956:	4770      	bx	lr
 8000958:	0089      	lsls	r1, r1, #2
 800095a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800095e:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8000962:	680a      	ldr	r2, [r1, #0]

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000964:	4323      	orrs	r3, r4
 8000966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800096a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800096e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8000972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000976:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800097a:	8143      	strh	r3, [r0, #10]
  usb_lld_start_out(usbp, ep);
  return false;
 800097c:	4628      	mov	r0, r5
}
 800097e:	bc30      	pop	{r4, r5}
 8000980:	600a      	str	r2, [r1, #0]
 8000982:	4770      	bx	lr
	...

08000990 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000990:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8000992:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000996:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8000998:	2b06      	cmp	r3, #6
 800099a:	d826      	bhi.n	80009ea <_usb_ep0in+0x5a>
 800099c:	e8df f003 	tbb	[pc, r3]
 80009a0:	042d4504 	.word	0x042d4504
 80009a4:	2604      	.short	0x2604
 80009a6:	04          	.byte	0x04
 80009a7:	00          	.byte	0x00
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80009a8:	4a33      	ldr	r2, [pc, #204]	; (8000a78 <_usb_ep0in+0xe8>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80009aa:	6841      	ldr	r1, [r0, #4]
 80009ac:	6813      	ldr	r3, [r2, #0]
 80009ae:	680d      	ldr	r5, [r1, #0]
 80009b0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80009b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009b8:	f083 0310 	eor.w	r3, r3, #16
 80009bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c4:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80009c6:	6813      	ldr	r3, [r2, #0]
 80009c8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80009cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80009d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009dc:	6013      	str	r3, [r2, #0]
 80009de:	b10d      	cbz	r5, 80009e4 <_usb_ep0in+0x54>
 80009e0:	2105      	movs	r1, #5
 80009e2:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 80009e4:	2306      	movs	r3, #6
 80009e6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80009ea:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 80009ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80009ee:	b103      	cbz	r3, 80009f2 <_usb_ep0in+0x62>
      usbp->ep0endcb(usbp);
 80009f0:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80009f8:	bd38      	pop	{r3, r4, r5, pc}
 80009fa:	68c3      	ldr	r3, [r0, #12]
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80009fc:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = false;
 80009fe:	2500      	movs	r5, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8000a00:	2203      	movs	r2, #3
 8000a02:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8000a06:	4629      	mov	r1, r5
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000a08:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 8000a0a:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 8000a0c:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8000a0e:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8000a10:	4620      	mov	r0, r4
 8000a12:	f002 fcb5 	bl	8003380 <usb_lld_prepare_receive>
 8000a16:	2320      	movs	r3, #32
 8000a18:	f383 8811 	msr	BASEPRI, r3
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, 0);
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	4629      	mov	r1, r5
 8000a20:	f7ff ff8e 	bl	8000940 <usbStartReceiveI>
 8000a24:	f385 8811 	msr	BASEPRI, r5
 8000a28:	bd38      	pop	{r3, r4, r5, pc}

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8000a2a:	f890 207b 	ldrb.w	r2, [r0, #123]	; 0x7b
 8000a2e:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000a32:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 8000a34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000a38:	428b      	cmp	r3, r1
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8000a3a:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000a3c:	d9de      	bls.n	80009fc <_usb_ep0in+0x6c>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8000a3e:	8a1d      	ldrh	r5, [r3, #16]
 8000a40:	fbb1 f2f5 	udiv	r2, r1, r5
 8000a44:	fb05 1512 	mls	r5, r5, r2, r1
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d1d7      	bne.n	80009fc <_usb_ep0in+0x6c>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000a4c:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000a4e:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000a50:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8000a52:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8000a54:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8000a56:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000a58:	f002 fc52 	bl	8003300 <usb_lld_prepare_transmit>
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	f383 8811 	msr	BASEPRI, r3
       transmitted.*/
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8000a62:	4620      	mov	r0, r4
 8000a64:	4629      	mov	r1, r5
 8000a66:	f7ff fbe3 	bl	8000230 <usbStartTransmitI>
 8000a6a:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000a74:	bd38      	pop	{r3, r4, r5, pc}
 8000a76:	bf00      	nop
 8000a78:	40005c00 	.word	0x40005c00
 8000a7c:	00000000 	.word	0x00000000

08000a80 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a82:	4604      	mov	r4, r0
  stm32_usb_pma_t *pmap;
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
 8000a84:	4bbc      	ldr	r3, [pc, #752]	; (8000d78 <_usb_ep0setup+0x2f8>)
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8000a86:	2200      	movs	r2, #0
 8000a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a8a:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 8000a8e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000a92:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000a96:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8000a9a:	0049      	lsls	r1, r1, #1
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8000a9c:	688b      	ldr	r3, [r1, #8]
  usbReadSetup(usbp, ep, usbp->setup);
 8000a9e:	f100 0274 	add.w	r2, r0, #116	; 0x74
 8000aa2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000aa6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	f100 067c 	add.w	r6, r0, #124	; 0x7c
  for (n = 0; n < 4; n++) {
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8000ab0:	f853 1b04 	ldr.w	r1, [r3], #4
 8000ab4:	f822 1b02 	strh.w	r1, [r2], #2
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
  pmap = USB_ADDR2PTR(udp->RXADDR0);
  for (n = 0; n < 4; n++) {
 8000ab8:	42b2      	cmp	r2, r6
 8000aba:	d1f9      	bne.n	8000ab0 <_usb_ep0setup+0x30>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8000abc:	6863      	ldr	r3, [r4, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	b36b      	cbz	r3, 8000b1e <_usb_ep0setup+0x9e>
      !(usbp->config->requests_hook_cb(usbp))) {
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8000ac6:	b350      	cbz	r0, 8000b1e <_usb_ep0setup+0x9e>
 8000ac8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8000aca:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8000ace:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 8000ad2:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 8000ad6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 8000ada:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 8000adc:	bf3c      	itt	cc
 8000ade:	4615      	movcc	r5, r2
 8000ae0:	66e2      	strcc	r2, [r4, #108]	; 0x6c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8000ae2:	f013 0f80 	tst.w	r3, #128	; 0x80
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000ae6:	68e3      	ldr	r3, [r4, #12]
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8000ae8:	f040 80b2 	bne.w	8000c50 <_usb_ep0setup+0x1d0>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	f040 8097 	bne.w	8000c20 <_usb_ep0setup+0x1a0>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000af2:	695b      	ldr	r3, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 8000af4:	2205      	movs	r2, #5
 8000af6:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000afa:	4620      	mov	r0, r4
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000afc:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8000afe:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8000b00:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8000b02:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000b04:	4629      	mov	r1, r5
 8000b06:	f002 fbfb 	bl	8003300 <usb_lld_prepare_transmit>
 8000b0a:	2320      	movs	r3, #32
 8000b0c:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8000b10:	4620      	mov	r0, r4
 8000b12:	4629      	mov	r1, r5
 8000b14:	f7ff fb8c 	bl	8000230 <usbStartTransmitI>
 8000b18:	f385 8811 	msr	BASEPRI, r5
 8000b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8000b1e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000b22:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 8000b26:	d022      	beq.n	8000b6e <_usb_ep0setup+0xee>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000b28:	4a93      	ldr	r2, [pc, #588]	; (8000d78 <_usb_ep0setup+0x2f8>)
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8000b2a:	6861      	ldr	r1, [r4, #4]
 8000b2c:	6813      	ldr	r3, [r2, #0]
 8000b2e:	680d      	ldr	r5, [r1, #0]
 8000b30:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b38:	f083 0310 	eor.w	r3, r3, #16
 8000b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b44:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000b46:	6813      	ldr	r3, [r2, #0]
 8000b48:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	b115      	cbz	r5, 8000b66 <_usb_ep0setup+0xe6>
 8000b60:	4620      	mov	r0, r4
 8000b62:	2105      	movs	r1, #5
 8000b64:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8000b66:	2306      	movs	r3, #6
 8000b68:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 8000b6e:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8000b76:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000b7a:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8000b7e:	f000 811a 	beq.w	8000db6 <_usb_ep0setup+0x336>
 8000b82:	d918      	bls.n	8000bb6 <_usb_ep0setup+0x136>
 8000b84:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8000b88:	f000 80fc 	beq.w	8000d84 <_usb_ep0setup+0x304>
 8000b8c:	f240 808f 	bls.w	8000cae <_usb_ep0setup+0x22e>
 8000b90:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 8000b94:	f000 8099 	beq.w	8000cca <_usb_ep0setup+0x24a>
 8000b98:	f640 4202 	movw	r2, #3074	; 0xc02
 8000b9c:	4295      	cmp	r5, r2
 8000b9e:	f000 80e3 	beq.w	8000d68 <_usb_ep0setup+0x2e8>
 8000ba2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000ba6:	d1bf      	bne.n	8000b28 <_usb_ep0setup+0xa8>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8000ba8:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 8000bac:	2501      	movs	r5, #1
 8000bae:	6727      	str	r7, [r4, #112]	; 0x70
 8000bb0:	66a2      	str	r2, [r4, #104]	; 0x68
 8000bb2:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000bb4:	e78b      	b.n	8000ace <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000bb6:	2d02      	cmp	r5, #2
 8000bb8:	f000 810d 	beq.w	8000dd6 <_usb_ep0setup+0x356>
 8000bbc:	f240 80ca 	bls.w	8000d54 <_usb_ep0setup+0x2d4>
 8000bc0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000bc4:	f000 8094 	beq.w	8000cf0 <_usb_ep0setup+0x270>
 8000bc8:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 8000bcc:	d1ac      	bne.n	8000b28 <_usb_ep0setup+0xa8>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8000bce:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	d1a8      	bne.n	8000b28 <_usb_ep0setup+0xa8>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8000bd6:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8000bda:	f011 020f 	ands.w	r2, r1, #15
 8000bde:	d01a      	beq.n	8000c16 <_usb_ep0setup+0x196>
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000be6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8000bea:	f011 0f80 	tst.w	r1, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8000bee:	6811      	ldr	r1, [r2, #0]
 8000bf0:	f040 8115 	bne.w	8000e1e <_usb_ep0setup+0x39e>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8000bf4:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 8000bf8:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8000bfc:	d00b      	beq.n	8000c16 <_usb_ep0setup+0x196>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8000bfe:	6813      	ldr	r3, [r2, #0]
 8000c00:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c08:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8000c16:	2500      	movs	r5, #0
 8000c18:	66a5      	str	r5, [r4, #104]	; 0x68
 8000c1a:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000c1c:	6725      	str	r5, [r4, #112]	; 0x70
 8000c1e:	e756      	b.n	8000ace <_usb_ep0setup+0x4e>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000c20:	699b      	ldr	r3, [r3, #24]
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 8000c22:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000c24:	2600      	movs	r6, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8000c26:	2104      	movs	r1, #4
 8000c28:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8000c2c:	4620      	mov	r0, r4
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
 8000c2e:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 8000c30:	605d      	str	r5, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000c32:	701e      	strb	r6, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8000c34:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8000c36:	4631      	mov	r1, r6
 8000c38:	f002 fba2 	bl	8003380 <usb_lld_prepare_receive>
 8000c3c:	2320      	movs	r3, #32
 8000c3e:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 8000c42:	4620      	mov	r0, r4
 8000c44:	4631      	mov	r1, r6
 8000c46:	f7ff fe7b 	bl	8000940 <usbStartReceiveI>
 8000c4a:	f386 8811 	msr	BASEPRI, r6
 8000c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 8000c50:	b1bd      	cbz	r5, 8000c82 <_usb_ep0setup+0x202>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000c52:	695b      	ldr	r3, [r3, #20]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 8000c54:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000c56:	2600      	movs	r6, #0
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8000c58:	2101      	movs	r1, #1
 8000c5a:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000c5e:	4620      	mov	r0, r4
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 8000c60:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 8000c62:	605d      	str	r5, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000c64:	701e      	strb	r6, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8000c66:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000c68:	4631      	mov	r1, r6
 8000c6a:	f002 fb49 	bl	8003300 <usb_lld_prepare_transmit>
 8000c6e:	2320      	movs	r3, #32
 8000c70:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8000c74:	4620      	mov	r0, r4
 8000c76:	4631      	mov	r1, r6
 8000c78:	f7ff fada 	bl	8000230 <usbStartTransmitI>
 8000c7c:	f386 8811 	msr	BASEPRI, r6
 8000c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000c82:	699b      	ldr	r3, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 8000c84:	2203      	movs	r2, #3
 8000c86:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8000c8a:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000c8c:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 8000c8e:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 8000c90:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8000c92:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8000c94:	4629      	mov	r1, r5
 8000c96:	f002 fb73 	bl	8003380 <usb_lld_prepare_receive>
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	4629      	mov	r1, r5
 8000ca4:	f7ff fe4c 	bl	8000940 <usbStartReceiveI>
 8000ca8:	f385 8811 	msr	BASEPRI, r5
 8000cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000cae:	f240 3202 	movw	r2, #770	; 0x302
 8000cb2:	4295      	cmp	r5, r2
 8000cb4:	d02c      	beq.n	8000d10 <_usb_ep0setup+0x290>
 8000cb6:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 8000cba:	f47f af35 	bne.w	8000b28 <_usb_ep0setup+0xa8>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
      set_address(usbp);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8000cbe:	4a2f      	ldr	r2, [pc, #188]	; (8000d7c <_usb_ep0setup+0x2fc>)
 8000cc0:	66a7      	str	r7, [r4, #104]	; 0x68
 8000cc2:	66e7      	str	r7, [r4, #108]	; 0x6c
 8000cc4:	463d      	mov	r5, r7
 8000cc6:	6722      	str	r2, [r4, #112]	; 0x70
 8000cc8:	e701      	b.n	8000ace <_usb_ep0setup+0x4e>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 8000cca:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000cce:	f884 207f 	strb.w	r2, [r4, #127]	; 0x7f
    if (usbp->configuration == 0U) {
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	f040 8095 	bne.w	8000e02 <_usb_ep0setup+0x382>
      usbp->state = USB_SELECTED;
 8000cd8:	2203      	movs	r2, #3
 8000cda:	7022      	strb	r2, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8000cdc:	6862      	ldr	r2, [r4, #4]
 8000cde:	6812      	ldr	r2, [r2, #0]
 8000ce0:	2a00      	cmp	r2, #0
 8000ce2:	d098      	beq.n	8000c16 <_usb_ep0setup+0x196>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4790      	blx	r2
 8000cea:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000cee:	e792      	b.n	8000c16 <_usb_ep0setup+0x196>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8000cf0:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000cf4:	2a01      	cmp	r2, #1
 8000cf6:	f47f af17 	bne.w	8000b28 <_usb_ep0setup+0xa8>
      usbp->status &= ~2U;
 8000cfa:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000cfe:	66a7      	str	r7, [r4, #104]	; 0x68
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8000d00:	f022 0202 	bic.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000d04:	66e7      	str	r7, [r4, #108]	; 0x6c
 8000d06:	6727      	str	r7, [r4, #112]	; 0x70
 8000d08:	463d      	mov	r5, r7
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8000d0a:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 8000d0e:	e6de      	b.n	8000ace <_usb_ep0setup+0x4e>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8000d10:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f47f af07 	bne.w	8000b28 <_usb_ep0setup+0xa8>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8000d1a:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8000d1e:	f011 020f 	ands.w	r2, r1, #15
 8000d22:	f43f af78 	beq.w	8000c16 <_usb_ep0setup+0x196>
 8000d26:	0093      	lsls	r3, r2, #2
 8000d28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d2c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8000d30:	0609      	lsls	r1, r1, #24
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	f100 8087 	bmi.w	8000e46 <_usb_ep0setup+0x3c6>
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000d38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000d3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000d40:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8000d44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000d52:	e760      	b.n	8000c16 <_usb_ep0setup+0x196>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000d54:	b92d      	cbnz	r5, 8000d62 <_usb_ep0setup+0x2e2>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8000d56:	2202      	movs	r2, #2
 8000d58:	6725      	str	r5, [r4, #112]	; 0x70
 8000d5a:	66a6      	str	r6, [r4, #104]	; 0x68
 8000d5c:	66e2      	str	r2, [r4, #108]	; 0x6c
 8000d5e:	4615      	mov	r5, r2
 8000d60:	e6b5      	b.n	8000ace <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000d62:	2d01      	cmp	r5, #1
 8000d64:	f47f aee0 	bne.w	8000b28 <_usb_ep0setup+0xa8>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8000d68:	4905      	ldr	r1, [pc, #20]	; (8000d80 <_usb_ep0setup+0x300>)
 8000d6a:	2502      	movs	r5, #2
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	66a1      	str	r1, [r4, #104]	; 0x68
 8000d70:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000d72:	6722      	str	r2, [r4, #112]	; 0x70
 8000d74:	e6ab      	b.n	8000ace <_usb_ep0setup+0x4e>
 8000d76:	bf00      	nop
 8000d78:	40005c00 	.word	0x40005c00
 8000d7c:	08000281 	.word	0x08000281
 8000d80:	08003d00 	.word	0x08003d00
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8000d84:	6861      	ldr	r1, [r4, #4]

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8000d86:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 8000d8a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8000d8e:	684d      	ldr	r5, [r1, #4]
 8000d90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d94:	4620      	mov	r0, r4
 8000d96:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8000d9a:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000d9e:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 8000da0:	2800      	cmp	r0, #0
 8000da2:	f43f aec1 	beq.w	8000b28 <_usb_ep0setup+0xa8>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8000da6:	6843      	ldr	r3, [r0, #4]
 8000da8:	6805      	ldr	r5, [r0, #0]
 8000daa:	66a3      	str	r3, [r4, #104]	; 0x68
 8000dac:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000dae:	6727      	str	r7, [r4, #112]	; 0x70
 8000db0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000db4:	e68b      	b.n	8000ace <_usb_ep0setup+0x4e>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8000db6:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000dba:	2a01      	cmp	r2, #1
 8000dbc:	f47f aeb4 	bne.w	8000b28 <_usb_ep0setup+0xa8>
      usbp->status |= 2U;
 8000dc0:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000dc4:	66a7      	str	r7, [r4, #104]	; 0x68
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8000dc6:	f042 0202 	orr.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000dca:	66e7      	str	r7, [r4, #108]	; 0x6c
 8000dcc:	6727      	str	r7, [r4, #112]	; 0x70
 8000dce:	463d      	mov	r5, r7
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8000dd0:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 8000dd4:	e67b      	b.n	8000ace <_usb_ep0setup+0x4e>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8000dd6:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8000dda:	4922      	ldr	r1, [pc, #136]	; (8000e64 <_usb_ep0setup+0x3e4>)
 8000ddc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000de0:	f002 020f 	and.w	r2, r2, #15
 8000de4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000de8:	d10e      	bne.n	8000e08 <_usb_ep0setup+0x388>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8000dea:	f412 5240 	ands.w	r2, r2, #12288	; 0x3000
 8000dee:	f43f ae9b 	beq.w	8000b28 <_usb_ep0setup+0xa8>
 8000df2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000df6:	d10d      	bne.n	8000e14 <_usb_ep0setup+0x394>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8000df8:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <_usb_ep0setup+0x3e8>)
 8000dfa:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000dfc:	6727      	str	r7, [r4, #112]	; 0x70
 8000dfe:	66a2      	str	r2, [r4, #104]	; 0x68
 8000e00:	e665      	b.n	8000ace <_usb_ep0setup+0x4e>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 8000e02:	2204      	movs	r2, #4
 8000e04:	7022      	strb	r2, [r4, #0]
 8000e06:	e769      	b.n	8000cdc <_usb_ep0setup+0x25c>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8000e08:	f012 0230 	ands.w	r2, r2, #48	; 0x30
 8000e0c:	f43f ae8c 	beq.w	8000b28 <_usb_ep0setup+0xa8>
 8000e10:	2a10      	cmp	r2, #16
 8000e12:	d0f1      	beq.n	8000df8 <_usb_ep0setup+0x378>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8000e14:	4a15      	ldr	r2, [pc, #84]	; (8000e6c <_usb_ep0setup+0x3ec>)
 8000e16:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000e18:	6727      	str	r7, [r4, #112]	; 0x70
 8000e1a:	66a2      	str	r2, [r4, #104]	; 0x68
 8000e1c:	e657      	b.n	8000ace <_usb_ep0setup+0x4e>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8000e1e:	f001 0130 	and.w	r1, r1, #48	; 0x30
 8000e22:	2930      	cmp	r1, #48	; 0x30
 8000e24:	f43f aef7 	beq.w	8000c16 <_usb_ep0setup+0x196>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8000e28:	6813      	ldr	r3, [r2, #0]
 8000e2a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e32:	f083 0320 	eor.w	r3, r3, #32
 8000e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000e44:	e6e7      	b.n	8000c16 <_usb_ep0setup+0x196>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000e46:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e4e:	f082 0210 	eor.w	r2, r2, #16
 8000e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000e60:	e6d9      	b.n	8000c16 <_usb_ep0setup+0x196>
 8000e62:	bf00      	nop
 8000e64:	40005c00 	.word	0x40005c00
 8000e68:	08003d20 	.word	0x08003d20
 8000e6c:	08003d10 	.word	0x08003d10

08000e70 <inotify.lto_priv.46>:
/**
 * @brief   Notification of data removed from the input queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void inotify(io_queue_t *qp) {
 8000e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = qGetLink(qp);
 8000e72:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000e74:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8000e78:	6813      	ldr	r3, [r2, #0]
 8000e7a:	7819      	ldrb	r1, [r3, #0]
 8000e7c:	2904      	cmp	r1, #4
 8000e7e:	d000      	beq.n	8000e82 <inotify.lto_priv.46+0x12>
 8000e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e82:	7a21      	ldrb	r1, [r4, #8]
 8000e84:	2902      	cmp	r1, #2
 8000e86:	d1fb      	bne.n	8000e80 <inotify.lto_priv.46+0x10>
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8000e88:	7951      	ldrb	r1, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8000e8a:	2601      	movs	r6, #1
 8000e8c:	895a      	ldrh	r2, [r3, #10]
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8000e8e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000e92:	68db      	ldr	r3, [r3, #12]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8000e94:	fa06 f101 	lsl.w	r1, r6, r1
 8000e98:	ea11 0502 	ands.w	r5, r1, r2
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8000e9c:	8a58      	ldrh	r0, [r3, #18]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8000e9e:	d1ef      	bne.n	8000e80 <inotify.lto_priv.46+0x10>
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 8000ea0:	69a3      	ldr	r3, [r4, #24]
 8000ea2:	69e2      	ldr	r2, [r4, #28]
 8000ea4:	6961      	ldr	r1, [r4, #20]
 8000ea6:	1ad2      	subs	r2, r2, r3
 8000ea8:	1a53      	subs	r3, r2, r1
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8000eaa:	4298      	cmp	r0, r3
 8000eac:	d8e8      	bhi.n	8000e80 <inotify.lto_priv.46+0x10>
 8000eae:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();

      n = (n / maxsize) * maxsize;
 8000eb2:	fbb3 f3f0 	udiv	r3, r3, r0
      usbPrepareQueuedReceive(sdup->config->usbp,
 8000eb6:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
      osalSysUnlock();

      n = (n / maxsize) * maxsize;
 8000eba:	fb00 f303 	mul.w	r3, r0, r3
      usbPrepareQueuedReceive(sdup->config->usbp,
 8000ebe:	7951      	ldrb	r1, [r2, #5]
 8000ec0:	6810      	ldr	r0, [r2, #0]
 8000ec2:	f104 070c 	add.w	r7, r4, #12
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000ec6:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8000eca:	68d2      	ldr	r2, [r2, #12]
 8000ecc:	6992      	ldr	r2, [r2, #24]

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 8000ece:	6053      	str	r3, [r2, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 8000ed0:	7016      	strb	r6, [r2, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8000ed2:	6095      	str	r5, [r2, #8]
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
 8000ed4:	60d7      	str	r7, [r2, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8000ed6:	f002 fa53 	bl	8003380 <usb_lld_prepare_receive>
 8000eda:	2320      	movs	r3, #32
 8000edc:	f383 8811 	msr	BASEPRI, r3
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8000ee0:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	7959      	ldrb	r1, [r3, #5]
    }
  }
}
 8000ee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      usbPrepareQueuedReceive(sdup->config->usbp,
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8000eec:	f7ff bd28 	b.w	8000940 <usbStartReceiveI>

08000ef0 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 8000ef0:	6953      	ldr	r3, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8000ef2:	b570      	push	{r4, r5, r6, lr}
 8000ef4:	4614      	mov	r4, r2
 8000ef6:	4606      	mov	r6, r0
 8000ef8:	460d      	mov	r5, r1
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 8000efa:	b123      	cbz	r3, 8000f06 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8000efc:	4618      	mov	r0, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	2210      	movs	r2, #16
 8000f02:	f002 fe3d 	bl	8003b80 <memset>
  }
  if (epcp->out_state != NULL) {
 8000f06:	69a0      	ldr	r0, [r4, #24]
 8000f08:	b118      	cbz	r0, 8000f12 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2214      	movs	r2, #20
 8000f0e:	f002 fe37 	bl	8003b80 <memset>
  }

  usbp->epc[ep] = epcp;
 8000f12:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8000f16:	60dc      	str	r4, [r3, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8000f18:	4630      	mov	r0, r6
 8000f1a:	4629      	mov	r1, r5
}
 8000f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  usbp->epc[ep] = epcp;

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8000f20:	f002 ba3e 	b.w	80033a0 <usb_lld_init_endpoint>
	...

08000f30 <_port_irq_epilogue>:
 8000f30:	2320      	movs	r3, #32
 8000f32:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <_port_irq_epilogue+0x44>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000f3e:	d102      	bne.n	8000f46 <_port_irq_epilogue+0x16>
 8000f40:	f383 8811 	msr	BASEPRI, r3
 8000f44:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000f46:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000f4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f4e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8000f52:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000f56:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <_port_irq_epilogue+0x48>)
 8000f5c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8000f5e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000f60:	6889      	ldr	r1, [r1, #8]
 8000f62:	6892      	ldr	r2, [r2, #8]
 8000f64:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000f66:	bf8c      	ite	hi
 8000f68:	4a04      	ldrhi	r2, [pc, #16]	; (8000f7c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000f6a:	4a05      	ldrls	r2, [pc, #20]	; (8000f80 <_port_irq_epilogue+0x50>)
 8000f6c:	f843 2c08 	str.w	r2, [r3, #-8]
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00
 8000f78:	20001960 	.word	0x20001960
 8000f7c:	08000221 	.word	0x08000221
 8000f80:	08000224 	.word	0x08000224
	...

08000f90 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8000f92:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000f94:	42a0      	cmp	r0, r4
 8000f96:	d021      	beq.n	8000fdc <chEvtBroadcastFlagsI+0x4c>
 8000f98:	460e      	mov	r6, r1
 8000f9a:	4607      	mov	r7, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000f9c:	2500      	movs	r5, #0
 8000f9e:	e002      	b.n	8000fa6 <chEvtBroadcastFlagsI+0x16>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8000fa0:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000fa2:	42a7      	cmp	r7, r4
 8000fa4:	d01a      	beq.n	8000fdc <chEvtBroadcastFlagsI+0x4c>
  /*lint -restore*/
    elp->el_flags |= flags;
 8000fa6:	68e3      	ldr	r3, [r4, #12]
 8000fa8:	4333      	orrs	r3, r6
 8000faa:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000fac:	b116      	cbz	r6, 8000fb4 <chEvtBroadcastFlagsI+0x24>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8000fae:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000fb0:	4213      	tst	r3, r2
 8000fb2:	d0f5      	beq.n	8000fa0 <chEvtBroadcastFlagsI+0x10>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8000fb4:	6860      	ldr	r0, [r4, #4]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000fb6:	68a3      	ldr	r3, [r4, #8]
 8000fb8:	6b41      	ldr	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000fba:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000fbc:	430b      	orrs	r3, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000fbe:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000fc0:	6343      	str	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000fc2:	d00c      	beq.n	8000fde <chEvtBroadcastFlagsI+0x4e>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000fc4:	2a0b      	cmp	r2, #11
 8000fc6:	d1eb      	bne.n	8000fa0 <chEvtBroadcastFlagsI+0x10>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8000fc8:	6a02      	ldr	r2, [r0, #32]
 8000fca:	4013      	ands	r3, r2

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d1e7      	bne.n	8000fa0 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000fd0:	6205      	str	r5, [r0, #32]
    (void) chSchReadyI(tp);
 8000fd2:	f7ff f9fd 	bl	80003d0 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8000fd6:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000fd8:	42a7      	cmp	r7, r4
 8000fda:	d1e4      	bne.n	8000fa6 <chEvtBroadcastFlagsI+0x16>
 8000fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000fde:	6a02      	ldr	r2, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000fe0:	4213      	tst	r3, r2
 8000fe2:	d0dd      	beq.n	8000fa0 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000fe4:	6205      	str	r5, [r0, #32]
    (void) chSchReadyI(tp);
 8000fe6:	f7ff f9f3 	bl	80003d0 <chSchReadyI>
 8000fea:	e7f4      	b.n	8000fd6 <chEvtBroadcastFlagsI+0x46>
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <sduDataReceived>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8000ff0:	f101 0311 	add.w	r3, r1, #17
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8000ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8000ff8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]

  if (sdup == NULL) {
 8000ffc:	b1bc      	cbz	r4, 800102e <sduDataReceived+0x3e>
 8000ffe:	4607      	mov	r7, r0
 8001000:	460d      	mov	r5, r1

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001002:	f04f 0820 	mov.w	r8, #32
 8001006:	f388 8811 	msr	BASEPRI, r8
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800100a:	2104      	movs	r1, #4
 800100c:	1860      	adds	r0, r4, r1
 800100e:	f7ff ffbf 	bl	8000f90 <chEvtBroadcastFlagsI>
 8001012:	eb07 0085 	add.w	r0, r7, r5, lsl #2
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 8001016:	68c1      	ldr	r1, [r0, #12]
 8001018:	69e2      	ldr	r2, [r4, #28]
 800101a:	69a6      	ldr	r6, [r4, #24]
 800101c:	6963      	ldr	r3, [r4, #20]
 800101e:	8a49      	ldrh	r1, [r1, #18]
 8001020:	1b92      	subs	r2, r2, r6
 8001022:	1ad3      	subs	r3, r2, r3
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8001024:	4299      	cmp	r1, r3
 8001026:	d904      	bls.n	8001032 <sduDataReceived+0x42>
 8001028:	2300      	movs	r3, #0
 800102a:	f383 8811 	msr	BASEPRI, r3
 800102e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001032:	f04f 0e00 	mov.w	lr, #0
 8001036:	f38e 8811 	msr	BASEPRI, lr
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800103e:	68c2      	ldr	r2, [r0, #12]
 8001040:	fb01 f303 	mul.w	r3, r1, r3
 8001044:	6992      	ldr	r2, [r2, #24]
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 8001046:	340c      	adds	r4, #12

  osp->rxqueued           = true;
 8001048:	2101      	movs	r1, #1
 800104a:	7011      	strb	r1, [r2, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 800104c:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 800104e:	f8c2 e008 	str.w	lr, [r2, #8]
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
 8001052:	60d4      	str	r4, [r2, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8001054:	4638      	mov	r0, r7
 8001056:	4629      	mov	r1, r5
 8001058:	f002 f992 	bl	8003380 <usb_lld_prepare_receive>
 800105c:	f388 8811 	msr	BASEPRI, r8

    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, ep);
 8001060:	4638      	mov	r0, r7
 8001062:	4629      	mov	r1, r5
 8001064:	f7ff fc6c 	bl	8000940 <usbStartReceiveI>
 8001068:	e7de      	b.n	8001028 <sduDataReceived+0x38>
 800106a:	bf00      	nop
 800106c:	0000      	movs	r0, r0
	...

08001070 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001072:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001076:	6a9c      	ldr	r4, [r3, #40]	; 0x28

  if (sdup == NULL) {
 8001078:	b1bc      	cbz	r4, 80010aa <sduDataTransmitted+0x3a>
 800107a:	460e      	mov	r6, r1
 800107c:	4605      	mov	r5, r0
 800107e:	2720      	movs	r7, #32
 8001080:	f387 8811 	msr	BASEPRI, r7
 8001084:	2108      	movs	r1, #8
 8001086:	1d20      	adds	r0, r4, #4
 8001088:	f7ff ff82 	bl	8000f90 <chEvtBroadcastFlagsI>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 800108c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800108e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001090:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001092:	1ad3      	subs	r3, r2, r3

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 8001094:	1a5b      	subs	r3, r3, r1
 8001096:	d118      	bne.n	80010ca <sduDataTransmitted+0x5a>
 8001098:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800109c:	68cb      	ldr	r3, [r1, #12]
 800109e:	695a      	ldr	r2, [r3, #20]
 80010a0:	6852      	ldr	r2, [r2, #4]
 80010a2:	b91a      	cbnz	r2, 80010ac <sduDataTransmitted+0x3c>
 80010a4:	2300      	movs	r3, #0
 80010a6:	f383 8811 	msr	BASEPRI, r3
 80010aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           ((usbp->epc[ep]->in_state->txsize &
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 80010ac:	8a1b      	ldrh	r3, [r3, #16]
 80010ae:	3b01      	subs	r3, #1
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 80010b0:	4013      	ands	r3, r2
 80010b2:	d1f7      	bne.n	80010a4 <sduDataTransmitted+0x34>
 80010b4:	f383 8811 	msr	BASEPRI, r3
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80010b8:	68ca      	ldr	r2, [r1, #12]
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 80010ba:	3430      	adds	r4, #48	; 0x30
 80010bc:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
 80010be:	2101      	movs	r1, #1
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 80010c0:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 80010c2:	6093      	str	r3, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 80010c4:	60d4      	str	r4, [r2, #12]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 80010c6:	7011      	strb	r1, [r2, #0]
 80010c8:	e00c      	b.n	80010e4 <sduDataTransmitted+0x74>
 80010ca:	2100      	movs	r1, #0
 80010cc:	f381 8811 	msr	BASEPRI, r1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80010d0:	eb05 0286 	add.w	r2, r5, r6, lsl #2
 80010d4:	68d2      	ldr	r2, [r2, #12]
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);
 80010d6:	3430      	adds	r4, #48	; 0x30
 80010d8:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
 80010da:	2001      	movs	r0, #1
  isp->mode.queue.txqueue = oqp;
 80010dc:	60d4      	str	r4, [r2, #12]
  isp->txsize             = n;
 80010de:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 80010e0:	6091      	str	r1, [r2, #8]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 80010e2:	7010      	strb	r0, [r2, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 80010e4:	4628      	mov	r0, r5
 80010e6:	4631      	mov	r1, r6
 80010e8:	f002 f90a 	bl	8003300 <usb_lld_prepare_transmit>
 80010ec:	f387 8811 	msr	BASEPRI, r7
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
 80010f0:	4628      	mov	r0, r5
 80010f2:	4631      	mov	r1, r6
 80010f4:	f7ff f89c 	bl	8000230 <usbStartTransmitI>
 80010f8:	e7d4      	b.n	80010a4 <sduDataTransmitted+0x34>
 80010fa:	bf00      	nop
 80010fc:	0000      	movs	r0, r0
	...

08001100 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8001100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001102:	2320      	movs	r3, #32
 8001104:	f383 8811 	msr	BASEPRI, r3
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001108:	4b32      	ldr	r3, [pc, #200]	; (80011d4 <chMtxLock+0xd4>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 800110a:	6882      	ldr	r2, [r0, #8]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 800110c:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 800110e:	2a00      	cmp	r2, #0
 8001110:	d057      	beq.n	80011c2 <chMtxLock+0xc2>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8001112:	68a1      	ldr	r1, [r4, #8]
 8001114:	6893      	ldr	r3, [r2, #8]
 8001116:	4605      	mov	r5, r0
 8001118:	4299      	cmp	r1, r3
 800111a:	d906      	bls.n	800112a <chMtxLock+0x2a>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800111c:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 800111e:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8001120:	2b06      	cmp	r3, #6
 8001122:	d035      	beq.n	8001190 <chMtxLock+0x90>
 8001124:	2b07      	cmp	r3, #7
 8001126:	d01f      	beq.n	8001168 <chMtxLock+0x68>
 8001128:	b1ab      	cbz	r3, 8001156 <chMtxLock+0x56>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800112a:	462b      	mov	r3, r5
 800112c:	e003      	b.n	8001136 <chMtxLock+0x36>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800112e:	6899      	ldr	r1, [r3, #8]
 8001130:	68a2      	ldr	r2, [r4, #8]
 8001132:	4291      	cmp	r1, r2
 8001134:	d302      	bcc.n	800113c <chMtxLock+0x3c>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001136:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001138:	429d      	cmp	r5, r3
 800113a:	d1f8      	bne.n	800112e <chMtxLock+0x2e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800113c:	685a      	ldr	r2, [r3, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 800113e:	2006      	movs	r0, #6

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001140:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8001142:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8001144:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001146:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 8001148:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 800114a:	f7ff fa11 	bl	8000570 <chSchGoSleepS>
 800114e:	2300      	movs	r3, #0
 8001150:	f383 8811 	msr	BASEPRI, r3
 8001154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001156:	e892 000a 	ldmia.w	r2, {r1, r3}
 800115a:	6019      	str	r1, [r3, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 800115c:	4610      	mov	r0, r2
  tp->p_next->p_prev = tp->p_prev;
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	6053      	str	r3, [r2, #4]
 8001162:	f7ff f935 	bl	80003d0 <chSchReadyI>
 8001166:	e7e0      	b.n	800112a <chMtxLock+0x2a>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001168:	6817      	ldr	r7, [r2, #0]
 800116a:	6850      	ldr	r0, [r2, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800116c:	6a16      	ldr	r6, [r2, #32]
 800116e:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001170:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001172:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	e002      	b.n	800117e <chMtxLock+0x7e>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001178:	6898      	ldr	r0, [r3, #8]
 800117a:	4281      	cmp	r1, r0
 800117c:	d802      	bhi.n	8001184 <chMtxLock+0x84>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800117e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001180:	429e      	cmp	r6, r3
 8001182:	d1f9      	bne.n	8001178 <chMtxLock+0x78>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001184:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001186:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8001188:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 800118a:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	e7cc      	b.n	800112a <chMtxLock+0x2a>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001190:	6817      	ldr	r7, [r2, #0]
 8001192:	6850      	ldr	r0, [r2, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8001194:	6a16      	ldr	r6, [r2, #32]
 8001196:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001198:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800119a:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	e002      	b.n	80011a6 <chMtxLock+0xa6>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80011a0:	6898      	ldr	r0, [r3, #8]
 80011a2:	4288      	cmp	r0, r1
 80011a4:	d302      	bcc.n	80011ac <chMtxLock+0xac>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80011a6:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80011a8:	429e      	cmp	r6, r3
 80011aa:	d1f9      	bne.n	80011a0 <chMtxLock+0xa0>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80011ac:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80011ae:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 80011b0:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 80011b2:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 80011b4:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 80011b6:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 80011b8:	68a1      	ldr	r1, [r4, #8]
 80011ba:	6893      	ldr	r3, [r2, #8]
 80011bc:	4299      	cmp	r1, r3
 80011be:	d8ad      	bhi.n	800111c <chMtxLock+0x1c>
 80011c0:	e7b3      	b.n	800112a <chMtxLock+0x2a>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 80011c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 80011c4:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 80011c6:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 80011c8:	63a0      	str	r0, [r4, #56]	; 0x38
 80011ca:	2300      	movs	r3, #0
 80011cc:	f383 8811 	msr	BASEPRI, r3
 80011d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20001960 	.word	0x20001960
	...

080011e0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80011e2:	490f      	ldr	r1, [pc, #60]	; (8001220 <chTMStopMeasurementX+0x40>)
 80011e4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80011e6:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80011e8:	6f09      	ldr	r1, [r1, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80011ee:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 80011f0:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80011f2:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80011f4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80011f8:	18e4      	adds	r4, r4, r3
 80011fa:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80011fe:	3201      	adds	r2, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8001200:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8001202:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8001204:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8001206:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800120a:	d805      	bhi.n	8001218 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 800120c:	6802      	ldr	r2, [r0, #0]
 800120e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8001210:	bf38      	it	cc
 8001212:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8001214:	bc30      	pop	{r4, r5}
 8001216:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8001218:	6043      	str	r3, [r0, #4]
 800121a:	e7fb      	b.n	8001214 <chTMStopMeasurementX+0x34>
 800121c:	e0001000 	.word	0xe0001000
 8001220:	20001960 	.word	0x20001960
	...

08001230 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001230:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001232:	6803      	ldr	r3, [r0, #0]
 8001234:	4604      	mov	r4, r0

  while (queue_notempty(tqp)) {
 8001236:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001238:	460d      	mov	r5, r1

  while (queue_notempty(tqp)) {
 800123a:	d009      	beq.n	8001250 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800123c:	681a      	ldr	r2, [r3, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  (void) chSchReadyI(tp);
 800123e:	4618      	mov	r0, r3
 8001240:	6022      	str	r2, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001242:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001244:	621d      	str	r5, [r3, #32]
  (void) chSchReadyI(tp);
 8001246:	f7ff f8c3 	bl	80003d0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	429c      	cmp	r4, r3
 800124e:	d1f5      	bne.n	800123c <chThdDequeueAllI+0xc>
 8001250:	bd38      	pop	{r3, r4, r5, pc}
 8001252:	bf00      	nop
	...

08001260 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8001260:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <chThdExitS+0x3c>)
 8001264:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001266:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001268:	f104 0524 	add.w	r5, r4, #36	; 0x24
 800126c:	429d      	cmp	r5, r3
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 800126e:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001270:	d007      	beq.n	8001282 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8001272:	681a      	ldr	r2, [r3, #0]
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8001274:	4618      	mov	r0, r3
 8001276:	6262      	str	r2, [r4, #36]	; 0x24
 8001278:	f7ff f8aa 	bl	80003d0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800127c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800127e:	42ab      	cmp	r3, r5
 8001280:	d1f7      	bne.n	8001272 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001282:	7f63      	ldrb	r3, [r4, #29]
 8001284:	079b      	lsls	r3, r3, #30
 8001286:	d104      	bne.n	8001292 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8001288:	6922      	ldr	r2, [r4, #16]
 800128a:	6963      	ldr	r3, [r4, #20]
 800128c:	611a      	str	r2, [r3, #16]
 800128e:	6922      	ldr	r2, [r4, #16]
 8001290:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001292:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8001294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001298:	f7ff b96a 	b.w	8000570 <chSchGoSleepS>
 800129c:	20001960 	.word	0x20001960

080012a0 <chThdExit>:
 80012a0:	2320      	movs	r3, #32
 80012a2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 80012a6:	f7ff bfdb 	b.w	8001260 <chThdExitS>
 80012aa:	bf00      	nop
 80012ac:	0000      	movs	r0, r0
	...

080012b0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 80012b0:	b508      	push	{r3, lr}
 80012b2:	4601      	mov	r1, r0
 80012b4:	2320      	movs	r3, #32
 80012b6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80012ba:	2008      	movs	r0, #8
 80012bc:	f7ff f970 	bl	80005a0 <chSchGoSleepTimeoutS>
 80012c0:	2300      	movs	r3, #0
 80012c2:	f383 8811 	msr	BASEPRI, r3
 80012c6:	bd08      	pop	{r3, pc}
	...

080012d0 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 80012d0:	f7ff b92e 	b.w	8000530 <chSchDoRescheduleAhead>
	...

080012e0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <chSchRescheduleS+0x14>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 80012e6:	6892      	ldr	r2, [r2, #8]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d800      	bhi.n	80012f0 <chSchRescheduleS+0x10>
 80012ee:	4770      	bx	lr
    chSchDoRescheduleAhead();
 80012f0:	f7ff b91e 	b.w	8000530 <chSchDoRescheduleAhead>
 80012f4:	20001960 	.word	0x20001960
	...

08001300 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <chMtxUnlock+0x60>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001302:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001304:	699d      	ldr	r5, [r3, #24]
 8001306:	2320      	movs	r3, #32
 8001308:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800130c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800130e:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001310:	42a0      	cmp	r0, r4
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001312:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001314:	d01d      	beq.n	8001352 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001316:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001318:	b14b      	cbz	r3, 800132e <chMtxUnlock+0x2e>
 800131a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800131c:	4293      	cmp	r3, r2
 800131e:	d003      	beq.n	8001328 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8001320:	6892      	ldr	r2, [r2, #8]
 8001322:	4291      	cmp	r1, r2
 8001324:	bf38      	it	cc
 8001326:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8001328:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f5      	bne.n	800131a <chMtxUnlock+0x1a>
 800132e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001330:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001332:	6ba6      	ldr	r6, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001334:	4620      	mov	r0, r4
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8001336:	60a9      	str	r1, [r5, #8]
 8001338:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800133a:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 800133c:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 800133e:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8001340:	63a3      	str	r3, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001342:	f7ff f845 	bl	80003d0 <chSchReadyI>
      chSchRescheduleS();
 8001346:	f7ff ffcb 	bl	80012e0 <chSchRescheduleS>
 800134a:	2300      	movs	r3, #0
 800134c:	f383 8811 	msr	BASEPRI, r3
 8001350:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 8001352:	2300      	movs	r3, #0
 8001354:	6083      	str	r3, [r0, #8]
 8001356:	2300      	movs	r3, #0
 8001358:	f383 8811 	msr	BASEPRI, r3
 800135c:	bd70      	pop	{r4, r5, r6, pc}
 800135e:	bf00      	nop
 8001360:	20001960 	.word	0x20001960
	...

08001370 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8001370:	e7fe      	b.n	8001370 <BusFault_Handler>
 8001372:	bf00      	nop
	...

08001380 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001380:	e7fe      	b.n	8001380 <__default_exit>
 8001382:	bf00      	nop
	...

08001390 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
	...

080013a0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
	...

080013b0 <get_descriptor>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 80013b0:	2902      	cmp	r1, #2
 80013b2:	d006      	beq.n	80013c2 <get_descriptor+0x12>
 80013b4:	2903      	cmp	r1, #3
 80013b6:	d006      	beq.n	80013c6 <get_descriptor+0x16>
 80013b8:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 80013ba:	4806      	ldr	r0, [pc, #24]	; (80013d4 <get_descriptor+0x24>)
 80013bc:	bf18      	it	ne
 80013be:	2000      	movne	r0, #0
 80013c0:	4770      	bx	lr
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <get_descriptor+0x28>)
 80013c4:	4770      	bx	lr
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 80013c6:	2a03      	cmp	r2, #3
      return &vcom_strings[dindex];
 80013c8:	bf9a      	itte	ls
 80013ca:	4b04      	ldrls	r3, [pc, #16]	; (80013dc <get_descriptor+0x2c>)
 80013cc:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
  }
  return NULL;
 80013d0:	2000      	movhi	r0, #0
}
 80013d2:	4770      	bx	lr
 80013d4:	08003dd0 	.word	0x08003dd0
 80013d8:	08003f20 	.word	0x08003f20
 80013dc:	08003db0 	.word	0x08003db0

080013e0 <lcd_2x16_write>:
	LCD_2X16_DATA = 0x00,
} lcd_2x16_command;

//-----------------------------------------------------------------------------
void lcd_2x16_write(uint8_t data)
{
 80013e0:	b538      	push	{r3, r4, r5, lr}
	pal_lld_clearport(LCD_PORT, LCD_PINS_DATA);

	palSetPad(LCD_PORT, LCD_PIN_E);

#ifdef LCD_PIN_OFFSET
	pal_lld_setport(LCD_PORT, ((LCD_PINS_DATA | (data & 0xF0))<<LCD_PIN_OFFSET) );
 80013e2:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
} lcd_2x16_command;

//-----------------------------------------------------------------------------
void lcd_2x16_write(uint8_t data)
{
	pal_lld_clearport(LCD_PORT, LCD_PINS_DATA);
 80013e6:	4c08      	ldr	r4, [pc, #32]	; (8001408 <lcd_2x16_write+0x28>)

	palSetPad(LCD_PORT, LCD_PIN_E);

#ifdef LCD_PIN_OFFSET
	pal_lld_setport(LCD_PORT, ((LCD_PINS_DATA | (data & 0xF0))<<LCD_PIN_OFFSET) );
 80013e8:	f440 4370 	orr.w	r3, r0, #61440	; 0xf000
 80013ec:	021b      	lsls	r3, r3, #8
} lcd_2x16_command;

//-----------------------------------------------------------------------------
void lcd_2x16_write(uint8_t data)
{
	pal_lld_clearport(LCD_PORT, LCD_PINS_DATA);
 80013ee:	f44f 4270 	mov.w	r2, #61440	; 0xf000

	palSetPad(LCD_PORT, LCD_PIN_E);
 80013f2:	f44f 6500 	mov.w	r5, #2048	; 0x800
} lcd_2x16_command;

//-----------------------------------------------------------------------------
void lcd_2x16_write(uint8_t data)
{
	pal_lld_clearport(LCD_PORT, LCD_PINS_DATA);
 80013f6:	6162      	str	r2, [r4, #20]

	if (data & 0x10)
		palSetPad(LCD_PORT, LCD_PIN_DB4);
#endif

	chThdSleepMicroseconds(1);
 80013f8:	2001      	movs	r0, #1
//-----------------------------------------------------------------------------
void lcd_2x16_write(uint8_t data)
{
	pal_lld_clearport(LCD_PORT, LCD_PINS_DATA);

	palSetPad(LCD_PORT, LCD_PIN_E);
 80013fa:	6125      	str	r5, [r4, #16]

#ifdef LCD_PIN_OFFSET
	pal_lld_setport(LCD_PORT, ((LCD_PINS_DATA | (data & 0xF0))<<LCD_PIN_OFFSET) );
 80013fc:	6123      	str	r3, [r4, #16]

	if (data & 0x10)
		palSetPad(LCD_PORT, LCD_PIN_DB4);
#endif

	chThdSleepMicroseconds(1);
 80013fe:	f7ff ff57 	bl	80012b0 <chThdSleep>
	palClearPad(LCD_PORT, LCD_PIN_E);
 8001402:	6165      	str	r5, [r4, #20]
 8001404:	bd38      	pop	{r3, r4, r5, pc}
 8001406:	bf00      	nop
 8001408:	40010c00 	.word	0x40010c00
 800140c:	00000000 	.word	0x00000000

08001410 <lcd_2x16_write_command>:
}

//-----------------------------------------------------------------------------
void lcd_2x16_write_command(uint8_t data)
{
 8001410:	b510      	push	{r4, lr}
 8001412:	4604      	mov	r4, r0
	palClearPad(LCD_PORT, LCD_PIN_RS);
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <lcd_2x16_write_command+0x20>)
 8001416:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800141a:	615a      	str	r2, [r3, #20]

	lcd_2x16_write(data);
 800141c:	f7ff ffe0 	bl	80013e0 <lcd_2x16_write>
	lcd_2x16_write(data << 4);
 8001420:	0120      	lsls	r0, r4, #4
 8001422:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 8001426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void lcd_2x16_write_command(uint8_t data)
{
	palClearPad(LCD_PORT, LCD_PIN_RS);

	lcd_2x16_write(data);
	lcd_2x16_write(data << 4);
 800142a:	f7ff bfd9 	b.w	80013e0 <lcd_2x16_write>
 800142e:	bf00      	nop
 8001430:	40010c00 	.word	0x40010c00
	...

08001440 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001440:	b40e      	push	{r1, r2, r3}
 8001442:	b500      	push	{lr}
 8001444:	b082      	sub	sp, #8
 8001446:	ab03      	add	r3, sp, #12
 8001448:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 800144c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800144e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8001450:	f001 fa6e 	bl	8002930 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8001454:	b002      	add	sp, #8
 8001456:	f85d eb04 	ldr.w	lr, [sp], #4
 800145a:	b003      	add	sp, #12
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop

08001460 <Thread1>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <Thread1+0x40>)
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <Thread1+0x44>)
 8001464:	699b      	ldr	r3, [r3, #24]

/*
 * Blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
 8001466:	b580      	push	{r7, lr}
  (void)arg;
  chRegSetThreadName("blinker");
  chprintf((BaseSequentialStream *)&SDU1, "Init Completed\r\n");
 8001468:	480f      	ldr	r0, [pc, #60]	; (80014a8 <Thread1+0x48>)
 800146a:	619a      	str	r2, [r3, #24]
 800146c:	490f      	ldr	r1, [pc, #60]	; (80014ac <Thread1+0x4c>)
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
    palClearPad(GPIOC, 13);
 800146e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
  (void)arg;
  chRegSetThreadName("blinker");
  chprintf((BaseSequentialStream *)&SDU1, "Init Completed\r\n");
 8001472:	f7ff ffe5 	bl	8001440 <chprintf>
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
    palClearPad(GPIOC, 13);
 8001476:	46b0      	mov	r8, r6
 8001478:	4f0d      	ldr	r7, [pc, #52]	; (80014b0 <Thread1+0x50>)
 800147a:	4d0e      	ldr	r5, [pc, #56]	; (80014b4 <Thread1+0x54>)
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
  (void)arg;
  chRegSetThreadName("blinker");
  chprintf((BaseSequentialStream *)&SDU1, "Init Completed\r\n");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
 800147c:	783b      	ldrb	r3, [r7, #0]
    palClearPad(GPIOC, 13);
 800147e:	f8c5 8014 	str.w	r8, [r5, #20]
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
  (void)arg;
  chRegSetThreadName("blinker");
  chprintf((BaseSequentialStream *)&SDU1, "Init Completed\r\n");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf0c      	ite	eq
 8001486:	f44f 74fa 	moveq.w	r4, #500	; 0x1f4
 800148a:	f44f 64fa 	movne.w	r4, #2000	; 0x7d0
    palClearPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
 800148e:	4620      	mov	r0, r4
 8001490:	f7ff ff0e 	bl	80012b0 <chThdSleep>
    palSetPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
 8001494:	4620      	mov	r0, r4
  chprintf((BaseSequentialStream *)&SDU1, "Init Completed\r\n");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
    palClearPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
    palSetPad(GPIOC, 13);
 8001496:	612e      	str	r6, [r5, #16]
    chThdSleepMilliseconds(time);
 8001498:	f7ff ff0a 	bl	80012b0 <chThdSleep>
 800149c:	e7ee      	b.n	800147c <Thread1+0x1c>
 800149e:	bf00      	nop
 80014a0:	20001960 	.word	0x20001960
 80014a4:	08003f30 	.word	0x08003f30
 80014a8:	20000920 	.word	0x20000920
 80014ac:	08003f38 	.word	0x08003f38
 80014b0:	20000850 	.word	0x20000850
 80014b4:	40011000 	.word	0x40011000
	...

080014c0 <encoderData>:
}


static void encoderData(BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)argv;
  if (argc > 0) {
 80014c0:	2900      	cmp	r1, #0
 80014c2:	dc1a      	bgt.n	80014fa <encoderData+0x3a>
    return;
  }
}


static void encoderData(BaseSequentialStream *chp, int argc, char *argv[]) {
 80014c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c8:	4604      	mov	r4, r0
 80014ca:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800150c <encoderData+0x4c>
 80014ce:	4f0c      	ldr	r7, [pc, #48]	; (8001500 <encoderData+0x40>)
 80014d0:	2620      	movs	r6, #32
 80014d2:	2500      	movs	r5, #0
 80014d4:	f386 8811 	msr	BASEPRI, r6
 */
qeicnt_t qeiGetCount(QEIDriver *qeip) {
  qeicnt_t cnt;

  osalSysLock();
  cnt = qeiGetCountI(qeip);
 80014d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	f385 8811 	msr	BASEPRI, r5
    chprintf(chp, "Usage: enc\r\n");
    return;
  }
  while(1)
  {
    encv = qeiGetCount(&QEID4);
 80014e2:	b29b      	uxth	r3, r3
    chprintf(chp, "Value : %5d\r",encv);
 80014e4:	461a      	mov	r2, r3
 80014e6:	4620      	mov	r0, r4
 80014e8:	4906      	ldr	r1, [pc, #24]	; (8001504 <encoderData+0x44>)
    chprintf(chp, "Usage: enc\r\n");
    return;
  }
  while(1)
  {
    encv = qeiGetCount(&QEID4);
 80014ea:	603b      	str	r3, [r7, #0]
    chprintf(chp, "Value : %5d\r",encv);
 80014ec:	f7ff ffa8 	bl	8001440 <chprintf>
    chThdSleepMilliseconds(500);
 80014f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f4:	f7ff fedc 	bl	80012b0 <chThdSleep>
 80014f8:	e7ec      	b.n	80014d4 <encoderData+0x14>


static void encoderData(BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: enc\r\n");
 80014fa:	4903      	ldr	r1, [pc, #12]	; (8001508 <encoderData+0x48>)
 80014fc:	f7ff bfa0 	b.w	8001440 <chprintf>
 8001500:	20000914 	.word	0x20000914
 8001504:	08003f4c 	.word	0x08003f4c
 8001508:	08003f5c 	.word	0x08003f5c
 800150c:	20000ba0 	.word	0x20000ba0

08001510 <cmd_mem>:
#define USB2SER_WA_SIZE    THD_WORKING_AREA_SIZE(512)


static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)argv;
  if (argc > 0) {
 8001510:	2900      	cmp	r1, #0
 8001512:	dd02      	ble.n	800151a <cmd_mem+0xa>
    chprintf(chp, "Usage: mem\r\n");
 8001514:	4901      	ldr	r1, [pc, #4]	; (800151c <cmd_mem+0xc>)
 8001516:	f7ff bf93 	b.w	8001440 <chprintf>
 800151a:	4770      	bx	lr
 800151c:	08003f6c 	.word	0x08003f6c

08001520 <usb_event>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
  extern SerialUSBDriver SDU1;

  switch (event) {
 8001520:	2902      	cmp	r1, #2
 8001522:	d149      	bne.n	80015b8 <usb_event+0x98>
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8001524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001526:	4606      	mov	r6, r0
 8001528:	460d      	mov	r5, r1
 800152a:	2320      	movs	r3, #32
 800152c:	f383 8811 	msr	BASEPRI, r3
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
  USBDriver *usbp = sdup->config->usbp;
 8001530:	4c22      	ldr	r4, [pc, #136]	; (80015bc <usb_event+0x9c>)
    chSysLockFromISR();

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 8001532:	2101      	movs	r1, #1
 8001534:	4a22      	ldr	r2, [pc, #136]	; (80015c0 <usb_event+0xa0>)
 8001536:	f7ff fcdb 	bl	8000ef0 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 800153a:	4630      	mov	r0, r6
 800153c:	4629      	mov	r1, r5
 800153e:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <usb_event+0xa4>)
 8001540:	f7ff fcd6 	bl	8000ef0 <usbInitEndpointI>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8001544:	69a3      	ldr	r3, [r4, #24]
 8001546:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 800154a:	f104 070c 	add.w	r7, r4, #12

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800154e:	2500      	movs	r5, #0
 8001550:	6816      	ldr	r6, [r2, #0]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8001552:	4638      	mov	r0, r7
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8001554:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_wrptr = iqp->q_buffer;
 8001556:	6223      	str	r3, [r4, #32]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8001558:	f06f 0101 	mvn.w	r1, #1

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800155c:	6165      	str	r5, [r4, #20]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 800155e:	f7ff fe67 	bl	8001230 <chThdDequeueAllI>
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8001562:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8001564:	6c23      	ldr	r3, [r4, #64]	; 0x40
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8001566:	64a2      	str	r2, [r4, #72]	; 0x48
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8001568:	1a9b      	subs	r3, r3, r2
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
 800156a:	6462      	str	r2, [r4, #68]	; 0x44
  oqp->q_counter = chQSizeX(oqp);
 800156c:	63a3      	str	r3, [r4, #56]	; 0x38
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800156e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001572:	f06f 0101 	mvn.w	r1, #1
 8001576:	f7ff fe5b 	bl	8001230 <chThdDequeueAllI>
 800157a:	1d20      	adds	r0, r4, #4
 800157c:	2101      	movs	r1, #1
 800157e:	f7ff fd07 	bl	8000f90 <chEvtBroadcastFlagsI>
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 8001582:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 8001586:	2201      	movs	r2, #1
 8001588:	7959      	ldrb	r1, [r3, #5]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800158a:	4630      	mov	r0, r6
 800158c:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 8001590:	68db      	ldr	r3, [r3, #12]
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 8001592:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8001596:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 8001598:	f8c3 e004 	str.w	lr, [r3, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 800159c:	701a      	strb	r2, [r3, #0]
  osp->mode.queue.rxqueue = iqp;
 800159e:	60df      	str	r7, [r3, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 80015a0:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 80015a2:	f001 feed 	bl	8003380 <usb_lld_prepare_receive>
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 80015a6:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 80015aa:	4630      	mov	r0, r6
 80015ac:	7959      	ldrb	r1, [r3, #5]
 80015ae:	f7ff f9c7 	bl	8000940 <usbStartReceiveI>
 80015b2:	f385 8811 	msr	BASEPRI, r5
 80015b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000920 	.word	0x20000920
 80015c0:	080041f0 	.word	0x080041f0
 80015c4:	08003d80 	.word	0x08003d80
	...

080015d0 <rx_thread.lto_priv.62>:
		chThdSleepMilliseconds(1);
	}

}

static THD_FUNCTION(rx_thread, arg) {
 80015d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void)arg;

	int res;
	chRegSetThreadName("Nrf RX");
	rx_running = true;
 80015d4:	f8df a164 	ldr.w	sl, [pc, #356]	; 800173c <rx_thread.lto_priv.62+0x16c>
 80015d8:	2301      	movs	r3, #1

	for(;;) {
		if (rx_stop) {
 80015da:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8001740 <rx_thread.lto_priv.62+0x170>
 80015de:	4a51      	ldr	r2, [pc, #324]	; (8001724 <rx_thread.lto_priv.62+0x154>)
static THD_FUNCTION(rx_thread, arg) {
	(void)arg;

	int res;
	chRegSetThreadName("Nrf RX");
	rx_running = true;
 80015e0:	f88a 3000 	strb.w	r3, [sl]
 80015e4:	6992      	ldr	r2, [r2, #24]
 80015e6:	4950      	ldr	r1, [pc, #320]	; (8001728 <rx_thread.lto_priv.62+0x158>)

	for(;;) {
		if (rx_stop) {
 80015e8:	f899 3000 	ldrb.w	r3, [r9]
		chThdSleepMilliseconds(1);
	}

}

static THD_FUNCTION(rx_thread, arg) {
 80015ec:	b08b      	sub	sp, #44	; 0x2c
 80015ee:	6191      	str	r1, [r2, #24]
	int res;
	chRegSetThreadName("Nrf RX");
	rx_running = true;

	for(;;) {
		if (rx_stop) {
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d17d      	bne.n	80016f0 <rx_thread.lto_priv.62+0x120>
 80015f4:	4f4d      	ldr	r7, [pc, #308]	; (800172c <rx_thread.lto_priv.62+0x15c>)
 80015f6:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8001738 <rx_thread.lto_priv.62+0x168>
 80015fa:	4c4d      	ldr	r4, [pc, #308]	; (8001730 <rx_thread.lto_priv.62+0x160>)
	rf_write_reg_byte(NRF_REG_STATUS, NRF_STATUS_MAX_RT);
}

int rf_get_payload_width(void) {
	char w;
	char cmd = NRF_CMD_READ_RX_PAYLOAD_WIDTH;
 80015fc:	2660      	movs	r6, #96	; 0x60
 80015fe:	e007      	b.n	8001610 <rx_thread.lto_priv.62+0x40>
			int buttons;

			// If something was read
			if (res >= 0) {

				nrf_restart_rx_time = NRF_RESTART_TIMEOUT;
 8001600:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

			}

			// Stop when there is no more data to read.
			if (res <= 0) {
 8001604:	2d07      	cmp	r5, #7
			int buttons;

			// If something was read
			if (res >= 0) {

				nrf_restart_rx_time = NRF_RESTART_TIMEOUT;
 8001606:	603b      	str	r3, [r7, #0]

			}

			// Stop when there is no more data to read.
			if (res <= 0) {
 8001608:	d05e      	beq.n	80016c8 <rx_thread.lto_priv.62+0xf8>
				break;
			} else {
				// Sleep a bit to prevent locking the other threads.
				chThdSleepMilliseconds(1);
 800160a:	2002      	movs	r0, #2
 800160c:	f7ff fe50 	bl	80012b0 <chThdSleep>
 * -2: Wrong length read. Something is likely wrong.
 */
int rfhelp_read_rx_data(char *data, int *len, int *pipe) {
	int retval = -1;

	chMtxLock(&rf_mutex);
 8001610:	4848      	ldr	r0, [pc, #288]	; (8001734 <rx_thread.lto_priv.62+0x164>)
 8001612:	f7ff fd75 	bl	8001100 <chMtxLock>

	int s = rf_status();
 8001616:	f000 ff0b 	bl	8002430 <rf_status>
	int pipe_n = NRF_STATUS_GET_RX_P_NO(s);
 800161a:	f3c0 0042 	ubfx	r0, r0, #1, #3

	if (pipe_n != 7) {
 800161e:	2807      	cmp	r0, #7
 8001620:	d06c      	beq.n	80016fc <rx_thread.lto_priv.62+0x12c>
 8001622:	ad0a      	add	r5, sp, #40	; 0x28
 8001624:	f805 6d22 	strb.w	r6, [r5, #-34]!
	spi_sw_begin();
 8001628:	f000 fcf2 	bl	8002010 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 800162c:	4629      	mov	r1, r5
 800162e:	2000      	movs	r0, #0
 8001630:	2201      	movs	r2, #1
 8001632:	f000 fd05 	bl	8002040 <spi_sw_transfer>
	spi_sw_transfer(&w, 0, 1);
 8001636:	f10d 0005 	add.w	r0, sp, #5
 800163a:	2100      	movs	r1, #0
 800163c:	2201      	movs	r2, #1
 800163e:	f000 fcff 	bl	8002040 <spi_sw_transfer>
	spi_sw_end();
 8001642:	f000 fccd 	bl	8001fe0 <spi_sw_end>
	return w;
 8001646:	f89d b005 	ldrb.w	fp, [sp, #5]
		*len = rf_get_payload_width();
		if (pipe) {
			*pipe = pipe_n;
		}
		if (*len <= 32 && *len >= 0) {
 800164a:	f1bb 0f20 	cmp.w	fp, #32
 800164e:	d855      	bhi.n	80016fc <rx_thread.lto_priv.62+0x12c>

}

// Read recieved payload
void rf_read_rx_payload(char *data, int length) {
	char cmd = NRF_CMD_READ_RX_PAYLOAD;
 8001650:	2361      	movs	r3, #97	; 0x61
 8001652:	f88d 3006 	strb.w	r3, [sp, #6]
	spi_sw_begin();
 8001656:	f000 fcdb 	bl	8002010 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 800165a:	4629      	mov	r1, r5
 800165c:	2000      	movs	r0, #0
 800165e:	2201      	movs	r2, #1
 8001660:	f000 fcee 	bl	8002040 <spi_sw_transfer>
	spi_sw_transfer(data, 0, length);
 8001664:	a802      	add	r0, sp, #8
 8001666:	2100      	movs	r1, #0
 8001668:	465a      	mov	r2, fp
 800166a:	f000 fce9 	bl	8002040 <spi_sw_transfer>
	spi_sw_end();
 800166e:	f000 fcb7 	bl	8001fe0 <spi_sw_end>
 8001672:	a90a      	add	r1, sp, #40	; 0x28
 8001674:	2340      	movs	r3, #64	; 0x40
 8001676:	f801 3d21 	strb.w	r3, [r1, #-33]!
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 800167a:	2201      	movs	r2, #1
 800167c:	2007      	movs	r0, #7
 800167e:	f000 fd77 	bl	8002170 <rf_write_reg>
			rf_read_rx_payload(data, *len);
			rf_clear_rx_irq();
//			rf_flush_rx();

			s = rf_status();
 8001682:	f000 fed5 	bl	8002430 <rf_status>
			if (NRF_STATUS_GET_RX_P_NO(s) == 7) {
 8001686:	f3c0 0542 	ubfx	r5, r0, #1, #3
			*len = 0;
			retval = -2;
		}
	}

	chMtxUnlock(&rf_mutex);
 800168a:	482a      	ldr	r0, [pc, #168]	; (8001734 <rx_thread.lto_priv.62+0x164>)
 800168c:	f7ff fe38 	bl	8001300 <chMtxUnlock>
 * -3: Data read, but CRC does not match.
 */
int rfhelp_read_rx_data_crc(char *data, int *len, int *pipe) {
	int res = rfhelp_read_rx_data(data, len, pipe);

	if (res >= 0 && *len > 2) {
 8001690:	f1bb 0f02 	cmp.w	fp, #2
 8001694:	ddb4      	ble.n	8001600 <rx_thread.lto_priv.62+0x30>
 8001696:	a902      	add	r1, sp, #8
 8001698:	f1ab 0002 	sub.w	r0, fp, #2
 800169c:	4408      	add	r0, r1
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
 800169e:	2300      	movs	r3, #0
	for (i = 0; i < len; i++) {
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 80016a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80016a4:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 80016a8:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
	for (i = 0; i < len; i++) {
 80016ac:	4281      	cmp	r1, r0
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 80016ae:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
 80016b2:	b29b      	uxth	r3, r3
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
	for (i = 0; i < len; i++) {
 80016b4:	d1f4      	bne.n	80016a0 <rx_thread.lto_priv.62+0xd0>
		unsigned short crc = crc16((unsigned char*)data, *len - 2);

		if (crc	!= ((unsigned short) data[*len - 2] << 8 | (unsigned short) data[*len - 1])) {
 80016b6:	aa0a      	add	r2, sp, #40	; 0x28
 80016b8:	4493      	add	fp, r2
 80016ba:	f81b 2c21 	ldrb.w	r2, [fp, #-33]
 80016be:	7809      	ldrb	r1, [r1, #0]
 80016c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d09b      	beq.n	8001600 <rx_thread.lto_priv.62+0x30>
			}
		}

		chThdSleepMilliseconds(5);
 80016c8:	200a      	movs	r0, #10
 80016ca:	f7ff fdf1 	bl	80012b0 <chThdSleep>

		// Restart the nrf if nothing has been received for a while
		if (nrf_restart_rx_time > 0 && nrf_restart_tx_time > 0) {
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	4916      	ldr	r1, [pc, #88]	; (800172c <rx_thread.lto_priv.62+0x15c>)
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	dd16      	ble.n	8001704 <rx_thread.lto_priv.62+0x134>
 80016d6:	f8d8 2000 	ldr.w	r2, [r8]
 80016da:	4817      	ldr	r0, [pc, #92]	; (8001738 <rx_thread.lto_priv.62+0x168>)
 80016dc:	2a00      	cmp	r2, #0
 80016de:	dd11      	ble.n	8001704 <rx_thread.lto_priv.62+0x134>
			nrf_restart_rx_time -= 5;
 80016e0:	3b05      	subs	r3, #5
			nrf_restart_tx_time -= 5;
 80016e2:	3a05      	subs	r2, #5

		chThdSleepMilliseconds(5);

		// Restart the nrf if nothing has been received for a while
		if (nrf_restart_rx_time > 0 && nrf_restart_tx_time > 0) {
			nrf_restart_rx_time -= 5;
 80016e4:	600b      	str	r3, [r1, #0]
			nrf_restart_tx_time -= 5;
 80016e6:	6002      	str	r2, [r0, #0]
	int res;
	chRegSetThreadName("Nrf RX");
	rx_running = true;

	for(;;) {
		if (rx_stop) {
 80016e8:	f899 3000 	ldrb.w	r3, [r9]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d085      	beq.n	80015fc <rx_thread.lto_priv.62+0x2c>
			rx_running = false;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f88a 3000 	strb.w	r3, [sl]
			rfhelp_restart();
			nrf_restart_rx_time = NRF_RESTART_TIMEOUT;
			nrf_restart_tx_time = NRF_RESTART_TIMEOUT;
		}
	}
}
 80016f6:	b00b      	add	sp, #44	; 0x2c
 80016f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*len = 0;
			retval = -2;
		}
	}

	chMtxUnlock(&rf_mutex);
 80016fc:	480d      	ldr	r0, [pc, #52]	; (8001734 <rx_thread.lto_priv.62+0x164>)
 80016fe:	f7ff fdff 	bl	8001300 <chMtxUnlock>
 8001702:	e7e1      	b.n	80016c8 <rx_thread.lto_priv.62+0xf8>
	rf_power_down();
	chMtxUnlock(&rf_mutex);
}

void rfhelp_power_up(void) {
	chMtxLock(&rf_mutex);
 8001704:	480b      	ldr	r0, [pc, #44]	; (8001734 <rx_thread.lto_priv.62+0x164>)
 8001706:	f7ff fcfb 	bl	8001100 <chMtxLock>
	rf_power_up();
 800170a:	f000 fe71 	bl	80023f0 <rf_power_up>
	chMtxUnlock(&rf_mutex);
 800170e:	4809      	ldr	r0, [pc, #36]	; (8001734 <rx_thread.lto_priv.62+0x164>)
 8001710:	f7ff fdf6 	bl	8001300 <chMtxUnlock>
		if (nrf_restart_rx_time > 0 && nrf_restart_tx_time > 0) {
			nrf_restart_rx_time -= 5;
			nrf_restart_tx_time -= 5;
		} else {
			rfhelp_power_up();
			rfhelp_restart();
 8001714:	f000 ffb4 	bl	8002680 <rfhelp_restart>
			nrf_restart_rx_time = NRF_RESTART_TIMEOUT;
 8001718:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800171c:	603b      	str	r3, [r7, #0]
			nrf_restart_tx_time = NRF_RESTART_TIMEOUT;
 800171e:	f8c8 3000 	str.w	r3, [r8]
 8001722:	e7e1      	b.n	80016e8 <rx_thread.lto_priv.62+0x118>
 8001724:	20001960 	.word	0x20001960
 8001728:	08003f7c 	.word	0x08003f7c
 800172c:	20000d40 	.word	0x20000d40
 8001730:	08003fe0 	.word	0x08003fe0
 8001734:	20000b90 	.word	0x20000b90
 8001738:	2000084c 	.word	0x2000084c
 800173c:	20000919 	.word	0x20000919
 8001740:	20000818 	.word	0x20000818
	...

08001750 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8001750:	2100      	movs	r1, #0
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 8001752:	460a      	mov	r2, r1
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001754:	4608      	mov	r0, r1
    _stm32_dma_streams[i].channel->CCR = 0;
 8001756:	460e      	mov	r6, r1
 8001758:	4bb9      	ldr	r3, [pc, #740]	; (8001a40 <main+0x2f0>)
 800175a:	f04f 34ff 	mov.w	r4, #4294967295
 800175e:	691d      	ldr	r5, [r3, #16]
    chThdSleepMilliseconds(time);
  }
}


int __attribute__((noreturn)) main(void) {
 8001760:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001764:	611c      	str	r4, [r3, #16]
 8001766:	6119      	str	r1, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8001768:	68dd      	ldr	r5, [r3, #12]
 800176a:	60dc      	str	r4, [r3, #12]
 800176c:	60d9      	str	r1, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800176e:	69dc      	ldr	r4, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001770:	4db4      	ldr	r5, [pc, #720]	; (8001a44 <main+0x2f4>)
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8001772:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8001776:	61dc      	str	r4, [r3, #28]
  rccEnableBKPInterface(FALSE);
 8001778:	69dc      	ldr	r4, [r3, #28]
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800177a:	4fb3      	ldr	r7, [pc, #716]	; (8001a48 <main+0x2f8>)
 800177c:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8001780:	61dc      	str	r4, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001782:	682b      	ldr	r3, [r5, #0]
 8001784:	f8df e334 	ldr.w	lr, [pc, #820]	; 8001abc <main+0x36c>
 8001788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178c:	4caf      	ldr	r4, [pc, #700]	; (8001a4c <main+0x2fc>)
 800178e:	602b      	str	r3, [r5, #0]
 8001790:	b089      	sub	sp, #36	; 0x24
 8001792:	6039      	str	r1, [r7, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 8001794:	f85e 3002 	ldr.w	r3, [lr, r2]
 8001798:	2100      	movs	r1, #0
 800179a:	601e      	str	r6, [r3, #0]
    dma_isr_redir[i].dma_func = NULL;
 800179c:	f844 6030 	str.w	r6, [r4, r0, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80017a0:	3001      	adds	r0, #1
 80017a2:	2807      	cmp	r0, #7
 80017a4:	f102 020c 	add.w	r2, r2, #12
 80017a8:	d1f4      	bne.n	8001794 <main+0x44>
#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80017aa:	f241 0b0a 	movw	fp, #4106	; 0x100a
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80017ae:	f241 0918 	movw	r9, #4120	; 0x1018
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80017b2:	468e      	mov	lr, r1
    _stm32_dma_streams[i].channel->CCR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFF;
 80017b4:	4ba6      	ldr	r3, [pc, #664]	; (8001a50 <main+0x300>)
 80017b6:	f04f 32ff 	mov.w	r2, #4294967295
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80017ba:	f8df c284 	ldr.w	ip, [pc, #644]	; 8001a40 <main+0x2f0>
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	f8dc 6018 	ldr.w	r6, [ip, #24]
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80017c4:	4ba3      	ldr	r3, [pc, #652]	; (8001a54 <main+0x304>)

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80017c6:	4da4      	ldr	r5, [pc, #656]	; (8001a58 <main+0x308>)
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 80017c8:	48a4      	ldr	r0, [pc, #656]	; (8001a5c <main+0x30c>)
  GPIOB->CRH = config->PBData.crh;
 80017ca:	4ca5      	ldr	r4, [pc, #660]	; (8001a60 <main+0x310>)

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80017cc:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8001ac0 <main+0x370>
  GPIOA->CRL = config->PAData.crl;
 80017d0:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8001ac4 <main+0x374>
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80017d4:	f046 067d 	orr.w	r6, r6, #125	; 0x7d
 80017d8:	f8cc 6018 	str.w	r6, [ip, #24]
  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80017dc:	4fa1      	ldr	r7, [pc, #644]	; (8001a64 <main+0x314>)

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80017de:	60ea      	str	r2, [r5, #12]
  spip->config = NULL;
 80017e0:	6059      	str	r1, [r3, #4]
  GPIOA->CRH = config->PAData.crh;
 80017e2:	f8c5 a004 	str.w	sl, [r5, #4]
  GPIOA->CRL = config->PAData.crl;
 80017e6:	f8c5 8000 	str.w	r8, [r5]
  GPIOB->ODR = config->PBData.odr;
 80017ea:	60c2      	str	r2, [r0, #12]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 80017ec:	6099      	str	r1, [r3, #8]
  GPIOB->CRH = config->PBData.crh;
 80017ee:	6044      	str	r4, [r0, #4]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80017f0:	6159      	str	r1, [r3, #20]
  GPIOB->CRL = config->PBData.crl;
 80017f2:	6004      	str	r4, [r0, #0]

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 80017f4:	4c9c      	ldr	r4, [pc, #624]	; (8001a68 <main+0x318>)
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 80017f6:	f04f 3088 	mov.w	r0, #2290649224	; 0x88888888
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80017fa:	f5ac 3c80 	sub.w	ip, ip, #65536	; 0x10000
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 80017fe:	4e9b      	ldr	r6, [pc, #620]	; (8001a6c <main+0x31c>)
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8001800:	f8cc 200c 	str.w	r2, [ip, #12]
 8001804:	61dc      	str	r4, [r3, #28]
  GPIOC->CRH = config->PCData.crh;
 8001806:	f8cc 0004 	str.w	r0, [ip, #4]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 800180a:	621f      	str	r7, [r3, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 800180c:	370c      	adds	r7, #12
  GPIOC->CRL = config->PCData.crl;
 800180e:	f8cc 0000 	str.w	r0, [ip]
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 8001812:	4c97      	ldr	r4, [pc, #604]	; (8001a70 <main+0x320>)
  GPIOD->ODR = config->PDData.odr;
 8001814:	60f2      	str	r2, [r6, #12]
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8001816:	f50a 7a63 	add.w	sl, sl, #908	; 0x38c
 800181a:	625f      	str	r7, [r3, #36]	; 0x24
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 800181c:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 8001ac8 <main+0x378>
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8001820:	4f94      	ldr	r7, [pc, #592]	; (8001a74 <main+0x324>)
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
 8001822:	6070      	str	r0, [r6, #4]
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8001824:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8001828:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
void icu_lld_init(void) {

#if STM32_ICU_USE_TIM1
  /* Driver initialization.*/
  icuObjectInit(&ICUD1);
  ICUD1.tim = STM32_TIM1;
 800182c:	f50c 5ce0 	add.w	ip, ip, #7168	; 0x1c00
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8001830:	f8c6 a000 	str.w	sl, [r6]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001834:	f103 0b0c 	add.w	fp, r3, #12
 8001838:	2601      	movs	r6, #1
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 800183a:	60ea      	str	r2, [r5, #12]
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800183c:	f8c3 902c 	str.w	r9, [r3, #44]	; 0x2c
  GPIOE->CRH = config->PEData.crh;
 8001840:	6068      	str	r0, [r5, #4]
 8001842:	f8c3 b00c 	str.w	fp, [r3, #12]
  GPIOE->CRL = config->PEData.crl;
 8001846:	6028      	str	r0, [r5, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001848:	f8c3 b010 	str.w	fp, [r3, #16]
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 800184c:	f8a8 2000 	strh.w	r2, [r8]
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8001850:	701e      	strb	r6, [r3, #0]
 8001852:	7026      	strb	r6, [r4, #0]
  icup->config = NULL;
 8001854:	6061      	str	r1, [r4, #4]
 8001856:	f8c4 c00c 	str.w	ip, [r4, #12]
 800185a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800185e:	703e      	strb	r6, [r7, #0]
 8001860:	f107 0244 	add.w	r2, r7, #68	; 0x44
  usbp->config       = NULL;
 8001864:	6079      	str	r1, [r7, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8001866:	f843 ef04 	str.w	lr, [r3, #4]!
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 800186a:	4293      	cmp	r3, r2
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
 800186c:	f8c3 e01c 	str.w	lr, [r3, #28]
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8001870:	f04f 0400 	mov.w	r4, #0
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8001874:	d1f7      	bne.n	8001866 <main+0x116>
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001876:	f64f 7eff 	movw	lr, #65535	; 0xffff

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800187a:	f648 499f 	movw	r9, #35999	; 0x8c9f
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800187e:	f64f 01ff 	movw	r1, #63743	; 0xf8ff

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001882:	4d6f      	ldr	r5, [pc, #444]	; (8001a40 <main+0x2f0>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001884:	f8df c244 	ldr.w	ip, [pc, #580]	; 8001acc <main+0x37c>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001888:	69eb      	ldr	r3, [r5, #28]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800188a:	4a7b      	ldr	r2, [pc, #492]	; (8001a78 <main+0x328>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	61eb      	str	r3, [r5, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001892:	f8dc 6004 	ldr.w	r6, [ip, #4]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8001896:	4879      	ldr	r0, [pc, #484]	; (8001a7c <main+0x32c>)
 8001898:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
 800189c:	f8cc 6004 	str.w	r6, [ip, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80018a0:	f04f 0c20 	mov.w	ip, #32

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80018a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80018a8:	f04f 0801 	mov.w	r8, #1
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80018ac:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80018b0:	f04f 0b80 	mov.w	fp, #128	; 0x80

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80018b4:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80018b8:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80018bc:	619c      	str	r4, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80018be:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80018c0:	60dc      	str	r4, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 80018c2:	605c      	str	r4, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80018c4:	f8c3 8014 	str.w	r8, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80018c8:	f8c3 8000 	str.w	r8, [r3]
 80018cc:	f880 b31c 	strb.w	fp, [r0, #796]	; 0x31c
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80018d0:	f8c0 6180 	str.w	r6, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80018d4:	6006      	str	r6, [r0, #0]
 80018d6:	6094      	str	r4, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	68d0      	ldr	r0, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80018da:	4b69      	ldr	r3, [pc, #420]	; (8001a80 <main+0x330>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80018dc:	4001      	ands	r1, r0
  reg_value  =  (reg_value                                 |
 80018de:	430b      	orrs	r3, r1

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80018e0:	4968      	ldr	r1, [pc, #416]	; (8001a84 <main+0x334>)
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80018e2:	60d3      	str	r3, [r2, #12]
 80018e4:	68cb      	ldr	r3, [r1, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80018e6:	4868      	ldr	r0, [pc, #416]	; (8001a88 <main+0x338>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80018e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ec:	60cb      	str	r3, [r1, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80018ee:	6803      	ldr	r3, [r0, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80018f0:	4e66      	ldr	r6, [pc, #408]	; (8001a8c <main+0x33c>)
 80018f2:	ea43 0308 	orr.w	r3, r3, r8
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 80018f6:	813c      	strh	r4, [r7, #8]
  usbp->receiving    = 0;
 80018f8:	817c      	strh	r4, [r7, #10]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80018fa:	2110      	movs	r1, #16
 80018fc:	6003      	str	r3, [r0, #0]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 80018fe:	f106 031c 	add.w	r3, r6, #28
 8001902:	77d1      	strb	r1, [r2, #31]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8001904:	a802      	add	r0, sp, #8
 8001906:	f882 c022 	strb.w	ip, [r2, #34]	; 0x22
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800190a:	f04f 31ff 	mov.w	r1, #4294967295
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800190e:	2200      	movs	r2, #0
 8001910:	61f3      	str	r3, [r6, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001912:	6233      	str	r3, [r6, #32]
 8001914:	2300      	movs	r3, #0
  tqp->p_prev = (thread_t *)tqp;
 8001916:	6076      	str	r6, [r6, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001918:	6036      	str	r6, [r6, #0]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800191a:	60b4      	str	r4, [r6, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 800191c:	6136      	str	r6, [r6, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800191e:	6176      	str	r6, [r6, #20]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001920:	f8a6 e024 	strh.w	lr, [r6, #36]	; 0x24
 8001924:	e9cd 2306 	strd	r2, r3, [sp, #24]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8001928:	9102      	str	r1, [sp, #8]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800192a:	84f4      	strh	r4, [r6, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800192c:	6734      	str	r4, [r6, #112]	; 0x70
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 800192e:	9403      	str	r4, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 8001930:	9404      	str	r4, [sp, #16]
  tmp->n          = (ucnt_t)0;
 8001932:	9405      	str	r4, [sp, #20]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8001934:	f002 f84c 	bl	80039d0 <chTMStartMeasurementX.constprop.41>
  chTMStopMeasurementX(&tm);
 8001938:	a802      	add	r0, sp, #8
 800193a:	f7ff fc51 	bl	80011e0 <chTMStopMeasurementX>
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800193e:	4a54      	ldr	r2, [pc, #336]	; (8001a90 <main+0x340>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8001940:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8001ad0 <main+0x380>
 8001944:	f022 0907 	bic.w	r9, r2, #7
  ch.tm.offset = tm.last;
 8001948:	9a04      	ldr	r2, [sp, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800194a:	6970      	ldr	r0, [r6, #20]
 800194c:	f10a 0e10 	add.w	lr, sl, #16
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001950:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8001954:	6732      	str	r2, [r6, #112]	; 0x70
 8001956:	494f      	ldr	r1, [pc, #316]	; (8001a94 <main+0x344>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001958:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 800195c:	f8ca e010 	str.w	lr, [sl, #16]
  tqp->p_prev = (thread_t *)tqp;
 8001960:	f8ca e014 	str.w	lr, [sl, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001964:	f886 4049 	strb.w	r4, [r6, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001968:	6674      	str	r4, [r6, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800196a:	6634      	str	r4, [r6, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800196c:	f886 804a 	strb.w	r8, [r6, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8001970:	6474      	str	r4, [r6, #68]	; 0x44
  REG_INSERT(tp);
 8001972:	63f6      	str	r6, [r6, #60]	; 0x3c
 8001974:	6430      	str	r0, [r6, #64]	; 0x40
 8001976:	f8ca 4018 	str.w	r4, [sl, #24]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800197a:	f8c6 c034 	str.w	ip, [r6, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800197e:	f8c6 c068 	str.w	ip, [r6, #104]	; 0x68
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001982:	4b45      	ldr	r3, [pc, #276]	; (8001a98 <main+0x348>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001984:	6102      	str	r2, [r0, #16]
 8001986:	6172      	str	r2, [r6, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8001988:	61b2      	str	r2, [r6, #24]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800198a:	f106 0254 	add.w	r2, r6, #84	; 0x54
 800198e:	f8ca 1000 	str.w	r1, [sl]
 8001992:	6572      	str	r2, [r6, #84]	; 0x54
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001994:	4941      	ldr	r1, [pc, #260]	; (8001a9c <main+0x34c>)
  tqp->p_prev = (thread_t *)tqp;
 8001996:	65b2      	str	r2, [r6, #88]	; 0x58
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001998:	4a41      	ldr	r2, [pc, #260]	; (8001aa0 <main+0x350>)
 800199a:	f023 0307 	bic.w	r3, r3, #7
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800199e:	f106 0e50 	add.w	lr, r6, #80	; 0x50
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80019a2:	f8c1 9000 	str.w	r9, [r1]
  default_heap.h_free.h.u.next = NULL;
 80019a6:	f8ca 4008 	str.w	r4, [sl, #8]
  default_heap.h_free.h.size = 0;
 80019aa:	f8ca 400c 	str.w	r4, [sl, #12]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80019ae:	f8cd c004 	str.w	ip, [sp, #4]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 80019b2:	f886 8048 	strb.w	r8, [r6, #72]	; 0x48
 80019b6:	f8c6 e050 	str.w	lr, [r6, #80]	; 0x50
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80019ba:	6013      	str	r3, [r2, #0]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80019bc:	f04f 0902 	mov.w	r9, #2
 80019c0:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80019c4:	b662      	cpsie	i
 80019c6:	4a37      	ldr	r2, [pc, #220]	; (8001aa4 <main+0x354>)
 80019c8:	69b3      	ldr	r3, [r6, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 80019ca:	f106 0078 	add.w	r0, r6, #120	; 0x78
 80019ce:	619a      	str	r2, [r3, #24]
 80019d0:	21d8      	movs	r1, #216	; 0xd8
 80019d2:	4642      	mov	r2, r8
 80019d4:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <main+0x358>)
 80019d6:	f001 ffbb 	bl	8003950 <chThdCreateStatic.constprop.43>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 80019da:	4b34      	ldr	r3, [pc, #208]	; (8001aac <main+0x35c>)


void initEncoder(void)
{

  palSetPadMode(GPIOB, 6, PAL_MODE_INPUT);
 80019dc:	f8dd c004 	ldr.w	ip, [sp, #4]
 80019e0:	6183      	str	r3, [r0, #24]
 80019e2:	4661      	mov	r1, ip
 80019e4:	464a      	mov	r2, r9
 80019e6:	481d      	ldr	r0, [pc, #116]	; (8001a5c <main+0x30c>)
 80019e8:	f001 ff4a 	bl	8003880 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 7, PAL_MODE_INPUT);
 80019ec:	464a      	mov	r2, r9
 80019ee:	4659      	mov	r1, fp
 80019f0:	481a      	ldr	r0, [pc, #104]	; (8001a5c <main+0x30c>)
 80019f2:	f001 ff45 	bl	8003880 <_pal_lld_setgroupmode>
 *
 * @init
 */
void qeiObjectInit(QEIDriver *qeip) {

  qeip->state = QEI_STOP;
 80019f6:	4a2e      	ldr	r2, [pc, #184]	; (8001ab0 <main+0x360>)
#endif

#if STM32_QEI_USE_TIM4
  /* Driver initialization.*/
  qeiObjectInit(&QEID4);
  QEID4.tim = STM32_TIM4;
 80019f8:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <main+0x364>)
 80019fa:	f882 8000 	strb.w	r8, [r2]
 80019fe:	6093      	str	r3, [r2, #8]
  qeip->last = 0;
 8001a00:	8054      	strh	r4, [r2, #2]
  qeip->config = NULL;
 8001a02:	6054      	str	r4, [r2, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001a04:	2320      	movs	r3, #32
 8001a06:	f383 8811 	msr	BASEPRI, r3
 */
void qei_lld_start(QEIDriver *qeip) {
  osalDbgAssert((qeip->config->min == 0) || (qeip->config->max == 0),
		"only min/max set to 0 is supported");

  if (qeip->state == QEI_STOP) {
 8001a0a:	7813      	ldrb	r3, [r2, #0]
  osalDbgCheck((qeip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((qeip->state == QEI_STOP) || (qeip->state == QEI_READY),
                "invalid state");
  qeip->config = config;
 8001a0c:	482a      	ldr	r0, [pc, #168]	; (8001ab8 <main+0x368>)
 8001a0e:	4543      	cmp	r3, r8
 8001a10:	6050      	str	r0, [r2, #4]
 8001a12:	f000 82af 	beq.w	8001f74 <main+0x824>
   /* Timer configuration.*/
  qeip->tim->CR1  = 0;                      /* Initially stopped.           */
  qeip->tim->CR2  = 0;
  qeip->tim->PSC  = 0;
  qeip->tim->DIER = 0;
  qeip->tim->ARR   = 0xFFFF;
 8001a16:	f64f 74ff 	movw	r4, #65535	; 0xffff
      rccResetTIM8();
    }
#endif
  }
   /* Timer configuration.*/
  qeip->tim->CR1  = 0;                      /* Initially stopped.           */
 8001a1a:	6893      	ldr	r3, [r2, #8]
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	6019      	str	r1, [r3, #0]
  qeip->tim->CR2  = 0;
 8001a20:	6059      	str	r1, [r3, #4]
  qeip->tim->PSC  = 0;
 8001a22:	6299      	str	r1, [r3, #40]	; 0x28
  qeip->tim->DIER = 0;
 8001a24:	60d9      	str	r1, [r3, #12]
  qeip->tim->ARR   = 0xFFFF;
 8001a26:	62dc      	str	r4, [r3, #44]	; 0x2c

  /* Set Capture Compare 1 and Capture Compare 2 as input. */
   qeip->tim->CCMR1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001a28:	6999      	ldr	r1, [r3, #24]

  if (qeip->config->mode == QEI_MODE_QUADRATURE) {
 8001a2a:	7804      	ldrb	r4, [r0, #0]
  qeip->tim->PSC  = 0;
  qeip->tim->DIER = 0;
  qeip->tim->ARR   = 0xFFFF;

  /* Set Capture Compare 1 and Capture Compare 2 as input. */
   qeip->tim->CCMR1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001a2c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001a30:	f041 0101 	orr.w	r1, r1, #1
 8001a34:	6199      	str	r1, [r3, #24]

  if (qeip->config->mode == QEI_MODE_QUADRATURE) {
 8001a36:	4920      	ldr	r1, [pc, #128]	; (8001ab8 <main+0x368>)
 8001a38:	2c00      	cmp	r4, #0
 8001a3a:	d14f      	bne.n	8001adc <main+0x38c>
 8001a3c:	e04a      	b.n	8001ad4 <main+0x384>
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40007000 	.word	0x40007000
 8001a48:	2000091c 	.word	0x2000091c
 8001a4c:	20000bac 	.word	0x20000bac
 8001a50:	40020000 	.word	0x40020000
 8001a54:	200008d4 	.word	0x200008d4
 8001a58:	40010800 	.word	0x40010800
 8001a5c:	40010c00 	.word	0x40010c00
 8001a60:	88888838 	.word	0x88888838
 8001a64:	08003e7c 	.word	0x08003e7c
 8001a68:	40013000 	.word	0x40013000
 8001a6c:	40011400 	.word	0x40011400
 8001a70:	20001ab0 	.word	0x20001ab0
 8001a74:	20000850 	.word	0x20000850
 8001a78:	e000ed00 	.word	0xe000ed00
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	05fa0300 	.word	0x05fa0300
 8001a84:	e000edf0 	.word	0xe000edf0
 8001a88:	e0001000 	.word	0xe0001000
 8001a8c:	20001960 	.word	0x20001960
 8001a90:	20005000 	.word	0x20005000
 8001a94:	08000321 	.word	0x08000321
 8001a98:	20001acf 	.word	0x20001acf
 8001a9c:	20000910 	.word	0x20000910
 8001aa0:	20000b88 	.word	0x20000b88
 8001aa4:	08003ed0 	.word	0x08003ed0
 8001aa8:	08000401 	.word	0x08000401
 8001aac:	08003f90 	.word	0x08003f90
 8001ab0:	20000ba0 	.word	0x20000ba0
 8001ab4:	40000800 	.word	0x40000800
 8001ab8:	20000808 	.word	0x20000808
 8001abc:	08003e70 	.word	0x08003e70
 8001ac0:	888884b8 	.word	0x888884b8
 8001ac4:	88884b88 	.word	0x88884b88
 8001ac8:	20000be4 	.word	0x20000be4
 8001acc:	e0042000 	.word	0xe0042000
 8001ad0:	20000d48 	.word	0x20000d48
    if (qeip->config->resolution == QEI_BOTH_EDGES)
 8001ad4:	7849      	ldrb	r1, [r1, #1]
 8001ad6:	2901      	cmp	r1, #1
 8001ad8:	f000 8256 	beq.w	8001f88 <main+0x838>
    else
      qeip->tim->SMCR  = TIM_SMCR_SMS_0;
  } else {
    /* Direction/Clock mode.
     * Direction input on TI1, Clock input on TI2. */
    qeip->tim->SMCR  = TIM_SMCR_SMS_0;
 8001adc:	2101      	movs	r1, #1
 8001ade:	6099      	str	r1, [r3, #8]
  }

  if (qeip->config->dirinv == QEI_DIRINV_TRUE)
 8001ae0:	7881      	ldrb	r1, [r0, #2]
  qei_lld_start(qeip);
  qeip->state = QEI_READY;
 8001ae2:	f04f 0902 	mov.w	r9, #2
 8001ae6:	2901      	cmp	r1, #1
    qeip->tim->CCER = TIM_CCER_CC1E | TIM_CCER_CC1P | TIM_CCER_CC2E;
 8001ae8:	bf0c      	ite	eq
 8001aea:	2113      	moveq	r1, #19
  else
    qeip->tim->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E;
 8001aec:	2111      	movne	r1, #17
 8001aee:	6219      	str	r1, [r3, #32]
 8001af0:	f04f 0800 	mov.w	r8, #0
 8001af4:	f882 9000 	strb.w	r9, [r2]
 8001af8:	f388 8811 	msr	BASEPRI, r8
 8001afc:	2320      	movs	r3, #32
 8001afe:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void qei_lld_enable(QEIDriver *qeip) {

  qeip->tim->CR1 = TIM_CR1_CEN;            /* Timer enabled.               */
 8001b02:	6893      	ldr	r3, [r2, #8]
 8001b04:	2501      	movs	r5, #1
  osalDbgCheck(qeip != NULL);

  osalSysLock();
  osalDbgAssert(qeip->state == QEI_READY, "invalid state");
  qei_lld_enable(qeip);
  qeip->state = QEI_ACTIVE;
 8001b06:	2403      	movs	r4, #3
 8001b08:	601d      	str	r5, [r3, #0]
 8001b0a:	7014      	strb	r4, [r2, #0]
 8001b0c:	f388 8811 	msr	BASEPRI, r8
}

//-----------------------------------------------------------------------------
void lcd_2x16_init(void)
{
	palSetGroupMode(LCD_PORT, LCD_PINS, 0, LCD_PORT_MODE);
 8001b10:	f8df b36c 	ldr.w	fp, [pc, #876]	; 8001e80 <main+0x730>
 8001b14:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001b18:	2206      	movs	r2, #6
 8001b1a:	4658      	mov	r0, fp
 8001b1c:	f001 feb0 	bl	8003880 <_pal_lld_setgroupmode>
	pal_lld_clearport(LCD_PORT, LCD_PINS);
 8001b20:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b24:	f8cb 3014 	str.w	r3, [fp, #20]

	chThdSleepMilliseconds(10);
 8001b28:	2014      	movs	r0, #20
 8001b2a:	f7ff fbc1 	bl	80012b0 <chThdSleep>

    lcd_2x16_write_command(0x03);
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f7ff fc6e 	bl	8001410 <lcd_2x16_write_command>
    chThdSleepMilliseconds(10);
 8001b34:	2014      	movs	r0, #20
 8001b36:	f7ff fbbb 	bl	80012b0 <chThdSleep>

    lcd_2x16_write_command(0x03);
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f7ff fc68 	bl	8001410 <lcd_2x16_write_command>
    chThdSleepMilliseconds(10);
 8001b40:	2014      	movs	r0, #20
 8001b42:	f7ff fbb5 	bl	80012b0 <chThdSleep>

    lcd_2x16_write_command(0x03);
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff fc62 	bl	8001410 <lcd_2x16_write_command>
    chThdSleepMilliseconds(10);
 8001b4c:	2014      	movs	r0, #20
 8001b4e:	f7ff fbaf 	bl	80012b0 <chThdSleep>

    lcd_2x16_write_command(0x02);
 8001b52:	4648      	mov	r0, r9
 8001b54:	f7ff fc5c 	bl	8001410 <lcd_2x16_write_command>
    chThdSleepMilliseconds(10);
 8001b58:	2014      	movs	r0, #20
 8001b5a:	f7ff fba9 	bl	80012b0 <chThdSleep>

    lcd_2x16_write_command(0x28);
 8001b5e:	2028      	movs	r0, #40	; 0x28
 8001b60:	f7ff fc56 	bl	8001410 <lcd_2x16_write_command>
    chThdSleepMilliseconds(10);
 8001b64:	2014      	movs	r0, #20
 8001b66:	f7ff fba3 	bl	80012b0 <chThdSleep>

    lcd_2x16_write_command(0x01);
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	f7ff fc50 	bl	8001410 <lcd_2x16_write_command>
    chThdSleepMilliseconds(10);
 8001b70:	2014      	movs	r0, #20
 8001b72:	f7ff fb9d 	bl	80012b0 <chThdSleep>

    lcd_2x16_write_command(0x0c);
 8001b76:	200c      	movs	r0, #12
 8001b78:	f7ff fc4a 	bl	8001410 <lcd_2x16_write_command>
    chThdSleepMilliseconds(10);
 8001b7c:	2014      	movs	r0, #20
 8001b7e:	f7ff fb97 	bl	80012b0 <chThdSleep>
  chSysInit();

  /*Other Init*/
  initEncoder();
  lcd_2x16_init();
  nrf_driver_init();
 8001b82:	f000 fb15 	bl	80021b0 <nrf_driver_init>
	nrf_conf.address[0] = APPCONF_NRF_ADDR_B0;
	nrf_conf.address[1] = APPCONF_NRF_ADDR_B1;
	nrf_conf.address[2] = APPCONF_NRF_ADDR_B2;
	nrf_conf.send_crc_ack = APPCONF_NRF_SEND_CRC_ACK;

	if (init_done) {
 8001b86:	4ab9      	ldr	r2, [pc, #740]	; (8001e6c <main+0x71c>)

void rfhelp_update_conf(void) {
//	nrf_conf = *conf;

//	nrf_conf = *conf;
	nrf_conf.speed = APPCONF_NRF_SPEED;
 8001b88:	4bb9      	ldr	r3, [pc, #740]	; (8001e70 <main+0x720>)
	nrf_conf.address[0] = APPCONF_NRF_ADDR_B0;
	nrf_conf.address[1] = APPCONF_NRF_ADDR_B1;
	nrf_conf.address[2] = APPCONF_NRF_ADDR_B2;
	nrf_conf.send_crc_ack = APPCONF_NRF_SEND_CRC_ACK;

	if (init_done) {
 8001b8a:	7812      	ldrb	r2, [r2, #0]
	nrf_conf.speed = APPCONF_NRF_SPEED;
	nrf_conf.power = APPCONF_NRF_POWER;
	nrf_conf.crc_type = APPCONF_NRF_CRC;
	nrf_conf.retry_delay = APPCONF_NRF_RETR_DELAY;
	nrf_conf.retries = APPCONF_NRF_RETRIES;
	nrf_conf.channel = APPCONF_NRF_CHANNEL;
 8001b8c:	f04f 0e4c 	mov.w	lr, #76	; 0x4c
	nrf_conf.address[0] = APPCONF_NRF_ADDR_B0;
 8001b90:	20c6      	movs	r0, #198	; 0xc6
	nrf_conf.address[1] = APPCONF_NRF_ADDR_B1;
 8001b92:	21c7      	movs	r1, #199	; 0xc7

void rfhelp_update_conf(void) {
//	nrf_conf = *conf;

//	nrf_conf = *conf;
	nrf_conf.speed = APPCONF_NRF_SPEED;
 8001b94:	f883 9000 	strb.w	r9, [r3]
	nrf_conf.power = APPCONF_NRF_POWER;
 8001b98:	705c      	strb	r4, [r3, #1]
	nrf_conf.crc_type = APPCONF_NRF_CRC;
 8001b9a:	709d      	strb	r5, [r3, #2]
	nrf_conf.retry_delay = APPCONF_NRF_RETR_DELAY;
 8001b9c:	f883 8003 	strb.w	r8, [r3, #3]
	nrf_conf.retries = APPCONF_NRF_RETRIES;
 8001ba0:	711c      	strb	r4, [r3, #4]
	nrf_conf.channel = APPCONF_NRF_CHANNEL;
	nrf_conf.address[0] = APPCONF_NRF_ADDR_B0;
	nrf_conf.address[1] = APPCONF_NRF_ADDR_B1;
	nrf_conf.address[2] = APPCONF_NRF_ADDR_B2;
 8001ba2:	f883 8008 	strb.w	r8, [r3, #8]
	nrf_conf.send_crc_ack = APPCONF_NRF_SEND_CRC_ACK;
 8001ba6:	725d      	strb	r5, [r3, #9]
	nrf_conf.speed = APPCONF_NRF_SPEED;
	nrf_conf.power = APPCONF_NRF_POWER;
	nrf_conf.crc_type = APPCONF_NRF_CRC;
	nrf_conf.retry_delay = APPCONF_NRF_RETR_DELAY;
	nrf_conf.retries = APPCONF_NRF_RETRIES;
	nrf_conf.channel = APPCONF_NRF_CHANNEL;
 8001ba8:	f883 e005 	strb.w	lr, [r3, #5]
	nrf_conf.address[0] = APPCONF_NRF_ADDR_B0;
 8001bac:	7198      	strb	r0, [r3, #6]
	nrf_conf.address[1] = APPCONF_NRF_ADDR_B1;
 8001bae:	71d9      	strb	r1, [r3, #7]
	nrf_conf.address[2] = APPCONF_NRF_ADDR_B2;
	nrf_conf.send_crc_ack = APPCONF_NRF_SEND_CRC_ACK;

	if (init_done) {
 8001bb0:	2a00      	cmp	r2, #0
 8001bb2:	f040 81dc 	bne.w	8001f6e <main+0x81e>
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
 8001bb6:	4daf      	ldr	r5, [pc, #700]	; (8001e74 <main+0x724>)
 8001bb8:	4baf      	ldr	r3, [pc, #700]	; (8001e78 <main+0x728>)
 8001bba:	4629      	mov	r1, r5
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8001bbc:	f8df b2f4 	ldr.w	fp, [pc, #756]	; 8001eb4 <main+0x764>
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8001bc0:	f8df c2f4 	ldr.w	ip, [pc, #756]	; 8001eb8 <main+0x768>
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 8001bc4:	2001      	movs	r0, #1
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8001bc6:	f105 0254 	add.w	r2, r5, #84	; 0x54
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
 8001bca:	f841 3b04 	str.w	r3, [r1], #4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001bce:	f105 0e0c 	add.w	lr, r5, #12
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8001bd2:	f505 73aa 	add.w	r3, r5, #340	; 0x154
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8001bd6:	2400      	movs	r4, #0
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8001bd8:	f44f 7880 	mov.w	r8, #256	; 0x100
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001bdc:	f505 7915 	add.w	r9, r5, #596	; 0x254
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 8001be0:	7228      	strb	r0, [r5, #8]
 8001be2:	f105 0030 	add.w	r0, r5, #48	; 0x30
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8001be6:	616c      	str	r4, [r5, #20]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8001be8:	62ed      	str	r5, [r5, #44]	; 0x2c
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8001bea:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8001bee:	652d      	str	r5, [r5, #80]	; 0x50
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8001bf0:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001bf4:	f8c5 9040 	str.w	r9, [r5, #64]	; 0x40
  oqp->q_notify  = onfy;
 8001bf8:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8001bfc:	6069      	str	r1, [r5, #4]
 8001bfe:	f8c5 e00c 	str.w	lr, [r5, #12]
  tqp->p_prev = (thread_t *)tqp;
 8001c02:	f8c5 e010 	str.w	lr, [r5, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8001c06:	61aa      	str	r2, [r5, #24]
  iqp->q_rdptr   = bp;
 8001c08:	626a      	str	r2, [r5, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8001c0a:	622a      	str	r2, [r5, #32]
  iqp->q_top     = bp + size;
 8001c0c:	61eb      	str	r3, [r5, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8001c0e:	63eb      	str	r3, [r5, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8001c10:	64ab      	str	r3, [r5, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8001c12:	646b      	str	r3, [r5, #68]	; 0x44
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001c14:	6328      	str	r0, [r5, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8001c16:	6368      	str	r0, [r5, #52]	; 0x34
 8001c18:	f04f 0820 	mov.w	r8, #32
 8001c1c:	f388 8811 	msr	BASEPRI, r8
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  usbp->out_params[config->bulk_out - 1U] = sdup;
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
  }
  sdup->config = config;
 8001c20:	4a96      	ldr	r2, [pc, #600]	; (8001e7c <main+0x72c>)
  sdup->state = SDU_READY;
 8001c22:	2302      	movs	r3, #2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8001c24:	62fd      	str	r5, [r7, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8001c26:	64bd      	str	r5, [r7, #72]	; 0x48
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
 8001c28:	633d      	str	r5, [r7, #48]	; 0x30
  }
  sdup->config = config;
 8001c2a:	f8c5 2254 	str.w	r2, [r5, #596]	; 0x254
  sdup->state = SDU_READY;
 8001c2e:	722b      	strb	r3, [r5, #8]
 8001c30:	f384 8811 	msr	BASEPRI, r4


  /*USB COM Init*/
  sduObjectInit(&SDU1);
  sduStart(&SDU1, &serusbcfg);
  usbDisconnectBus(serusbcfg.usbp);
 8001c34:	4b92      	ldr	r3, [pc, #584]	; (8001e80 <main+0x730>)
 8001c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3a:	611a      	str	r2, [r3, #16]
  chThdSleepMilliseconds(1500);
 8001c3c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c40:	f7ff fb36 	bl	80012b0 <chThdSleep>
 8001c44:	f388 8811 	msr	BASEPRI, r8
 8001c48:	488e      	ldr	r0, [pc, #568]	; (8001e84 <main+0x734>)
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 8001c4a:	4b8f      	ldr	r3, [pc, #572]	; (8001e88 <main+0x738>)
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	eb00 0908 	add.w	r9, r0, r8
 8001c52:	607b      	str	r3, [r7, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8001c54:	f842 4f04 	str.w	r4, [r2, #4]!

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8001c58:	454a      	cmp	r2, r9
    usbp->epc[i] = NULL;
 8001c5a:	f04f 0300 	mov.w	r3, #0

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8001c5e:	d1f9      	bne.n	8001c54 <main+0x504>
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {

  if (usbp->state == USB_STOP) {
 8001c60:	f897 c000 	ldrb.w	ip, [r7]
 8001c64:	4a89      	ldr	r2, [pc, #548]	; (8001e8c <main+0x73c>)
 8001c66:	f1bc 0f01 	cmp.w	ip, #1
 8001c6a:	f000 8147 	beq.w	8001efc <main+0x7ac>
    usbp->epc[i] = NULL;
  }
  usb_lld_start(usbp);
  usbp->state = USB_READY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	703b      	strb	r3, [r7, #0]
 8001c72:	2300      	movs	r3, #0
 8001c74:	f383 8811 	msr	BASEPRI, r3
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 8001c78:	4f81      	ldr	r7, [pc, #516]	; (8001e80 <main+0x730>)
 8001c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c7e:	4c84      	ldr	r4, [pc, #528]	; (8001e90 <main+0x740>)
 8001c80:	617b      	str	r3, [r7, #20]
  shellInit();
  /*Threads*/
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8001c82:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001c86:	2240      	movs	r2, #64	; 0x40
 8001c88:	4b82      	ldr	r3, [pc, #520]	; (8001e94 <main+0x744>)
 8001c8a:	4883      	ldr	r0, [pc, #524]	; (8001e98 <main+0x748>)
 8001c8c:	6024      	str	r4, [r4, #0]
}

//-----------------------------------------------------------------------------
void lcd_2x16_write_data(uint8_t data)
{
	palSetPad(LCD_PORT, LCD_PIN_RS);
 8001c8e:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8001c92:	f001 fe5d 	bl	8003950 <chThdCreateStatic.constprop.43>
}

//-----------------------------------------------------------------------------
void lcd_print(uint8_t add,uint8_t * string)
{
  lcd_2x16_write_command(add);
 8001c96:	2080      	movs	r0, #128	; 0x80
 8001c98:	f7ff fbba 	bl	8001410 <lcd_2x16_write_command>
}

//-----------------------------------------------------------------------------
void lcd_2x16_write_data(uint8_t data)
{
	palSetPad(LCD_PORT, LCD_PIN_RS);
 8001c9c:	46cb      	mov	fp, r9
}

//-----------------------------------------------------------------------------
void lcd_print(uint8_t add,uint8_t * string)
{
  lcd_2x16_write_command(add);
 8001c9e:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8001ebc <main+0x76c>
 8001ca2:	2449      	movs	r4, #73	; 0x49
//-----------------------------------------------------------------------------
void lcd_2x16_write_data(uint8_t data)
{
	palSetPad(LCD_PORT, LCD_PIN_RS);

	lcd_2x16_write(data);
 8001ca4:	4620      	mov	r0, r4
}

//-----------------------------------------------------------------------------
void lcd_2x16_write_data(uint8_t data)
{
	palSetPad(LCD_PORT, LCD_PIN_RS);
 8001ca6:	f8c7 b010 	str.w	fp, [r7, #16]

	lcd_2x16_write(data);
 8001caa:	f7ff fb99 	bl	80013e0 <lcd_2x16_write>
	lcd_2x16_write(data << 4);
 8001cae:	0120      	lsls	r0, r4, #4
 8001cb0:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8001cb4:	f7ff fb94 	bl	80013e0 <lcd_2x16_write>

	palClearPad(LCD_PORT, LCD_PIN_RS);
 8001cb8:	f8c7 9014 	str.w	r9, [r7, #20]

//-----------------------------------------------------------------------------
void lcd_print(uint8_t add,uint8_t * string)
{
  lcd_2x16_write_command(add);
  while (*string != '\0')
 8001cbc:	f818 4f01 	ldrb.w	r4, [r8, #1]!
 8001cc0:	2c00      	cmp	r4, #0
 8001cc2:	d1ef      	bne.n	8001ca4 <main+0x554>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 8001cc4:	b144      	cbz	r4, 8001cd8 <main+0x588>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
 8001cc6:	7f23      	ldrb	r3, [r4, #28]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d063      	beq.n	8001d94 <main+0x644>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
    chThdSleepMilliseconds(1000);
 8001ccc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cd0:	f7ff faee 	bl	80012b0 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 8001cd4:	2c00      	cmp	r4, #0
 8001cd6:	d1f6      	bne.n	8001cc6 <main+0x576>
 8001cd8:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d1f0      	bne.n	8001cc6 <main+0x576>
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8001ce4:	486d      	ldr	r0, [pc, #436]	; (8001e9c <main+0x74c>)
 8001ce6:	f7ff fa0b 	bl	8001100 <chMtxLock>
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
 8001cea:	4a6d      	ldr	r2, [pc, #436]	; (8001ea0 <main+0x750>)

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8001cec:	f640 00c7 	movw	r0, #2247	; 0x8c7
 8001cf0:	e004      	b.n	8001cfc <main+0x5ac>
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	4281      	cmp	r1, r0
 8001cf6:	f200 80ac 	bhi.w	8001e52 <main+0x702>
 8001cfa:	461a      	mov	r2, r3

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 8001cfc:	6813      	ldr	r3, [r2, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f7      	bne.n	8001cf2 <main+0x5a2>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 8001d02:	4866      	ldr	r0, [pc, #408]	; (8001e9c <main+0x74c>)
 8001d04:	f7ff fafc 	bl	8001300 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 8001d08:	f8da 3000 	ldr.w	r3, [sl]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0dd      	beq.n	8001ccc <main+0x57c>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8001d10:	f44f 600d 	mov.w	r0, #2256	; 0x8d0
 8001d14:	4798      	blx	r3
    if (hp != NULL) {
 8001d16:	2800      	cmp	r0, #0
 8001d18:	d0d8      	beq.n	8001ccc <main+0x57c>
      hp->h.u.heap = heapp;
      hp->h.size = size;
 8001d1a:	f640 03c8 	movw	r3, #2248	; 0x8c8
  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
    hp = heapp->h_provider(size + sizeof(union heap_header));
    if (hp != NULL) {
      hp->h.u.heap = heapp;
 8001d1e:	4a61      	ldr	r2, [pc, #388]	; (8001ea4 <main+0x754>)
      hp->h.size = size;
      hp++;
 8001d20:	f100 0408 	add.w	r4, r0, #8
     else fails.*/
  if (heapp->h_provider != NULL) {
    hp = heapp->h_provider(size + sizeof(union heap_header));
    if (hp != NULL) {
      hp->h.u.heap = heapp;
      hp->h.size = size;
 8001d24:	e880 000c 	stmia.w	r0, {r2, r3}
                              tprio_t prio, tfunc_t pf, void *arg) {
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
  if (wsp == NULL) {
 8001d28:	2c00      	cmp	r4, #0
 8001d2a:	d0cf      	beq.n	8001ccc <main+0x57c>
 8001d2c:	2320      	movs	r3, #32
 8001d2e:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001d32:	4f5d      	ldr	r7, [pc, #372]	; (8001ea8 <main+0x758>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001d34:	6970      	ldr	r0, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001d36:	f8c4 78a4 	str.w	r7, [r4, #2212]	; 0x8a4
 8001d3a:	4f5c      	ldr	r7, [pc, #368]	; (8001eac <main+0x75c>)
 8001d3c:	f604 01a4 	addw	r1, r4, #2212	; 0x8a4
 8001d40:	f8c4 78a8 	str.w	r7, [r4, #2216]	; 0x8a8
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001d44:	2302      	movs	r3, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001d46:	4f5a      	ldr	r7, [pc, #360]	; (8001eb0 <main+0x760>)
 8001d48:	60e1      	str	r1, [r4, #12]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001d4a:	f04f 0e40 	mov.w	lr, #64	; 0x40
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001d4e:	f04f 0800 	mov.w	r8, #0
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001d52:	2101      	movs	r1, #1
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001d54:	7723      	strb	r3, [r4, #28]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8001d56:	f104 0224 	add.w	r2, r4, #36	; 0x24
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8001d5a:	f104 0328 	add.w	r3, r4, #40	; 0x28
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001d5e:	6160      	str	r0, [r4, #20]
 8001d60:	6126      	str	r6, [r4, #16]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001d62:	f8c4 e008 	str.w	lr, [r4, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001d66:	f8c4 78c4 	str.w	r7, [r4, #2244]	; 0x8c4
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001d6a:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 8001d6e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8001d72:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8001d76:	f8c4 8018 	str.w	r8, [r4, #24]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001d7a:	77a1      	strb	r1, [r4, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001d7c:	6104      	str	r4, [r0, #16]
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8001d7e:	4620      	mov	r0, r4
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001d80:	6262      	str	r2, [r4, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 8001d82:	7761      	strb	r1, [r4, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001d84:	62a3      	str	r3, [r4, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8001d86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d88:	6174      	str	r4, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 8001d8a:	f001 fdb1 	bl	80038f0 <chSchWakeupS.constprop.44>
 8001d8e:	f388 8811 	msr	BASEPRI, r8
 8001d92:	e79b      	b.n	8001ccc <main+0x57c>
 8001d94:	2120      	movs	r1, #32
 8001d96:	f381 8811 	msr	BASEPRI, r1
void chThdRelease(thread_t *tp) {
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 8001d9a:	7fa3      	ldrb	r3, [r4, #30]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	77a3      	strb	r3, [r4, #30]
 8001da4:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8001da8:	b9d3      	cbnz	r3, 8001de0 <main+0x690>
 8001daa:	7f22      	ldrb	r2, [r4, #28]
 8001dac:	2a0f      	cmp	r2, #15
 8001dae:	d001      	beq.n	8001db4 <main+0x664>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 8001db0:	461c      	mov	r4, r3
 8001db2:	e78b      	b.n	8001ccc <main+0x57c>
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 8001db4:	7f62      	ldrb	r2, [r4, #29]
 8001db6:	f002 0203 	and.w	r2, r2, #3
 8001dba:	2a01      	cmp	r2, #1
 8001dbc:	d012      	beq.n	8001de4 <main+0x694>
 8001dbe:	2a02      	cmp	r2, #2
 8001dc0:	d1f6      	bne.n	8001db0 <main+0x660>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8001dc2:	6927      	ldr	r7, [r4, #16]
 8001dc4:	6960      	ldr	r0, [r4, #20]
#endif
      chPoolFree(tp->p_mpool, tp);
 8001dc6:	6c22      	ldr	r2, [r4, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8001dc8:	6107      	str	r7, [r0, #16]
 8001dca:	6927      	ldr	r7, [r4, #16]
 8001dcc:	6178      	str	r0, [r7, #20]
 8001dce:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8001dd2:	6811      	ldr	r1, [r2, #0]
 8001dd4:	6021      	str	r1, [r4, #0]
  mp->mp_next = php;
 8001dd6:	6014      	str	r4, [r2, #0]
 8001dd8:	f383 8811 	msr	BASEPRI, r3
 8001ddc:	461c      	mov	r4, r3
 8001dde:	e775      	b.n	8001ccc <main+0x57c>
 8001de0:	4614      	mov	r4, r2
 8001de2:	e773      	b.n	8001ccc <main+0x57c>
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8001de4:	6963      	ldr	r3, [r4, #20]
 8001de6:	6922      	ldr	r2, [r4, #16]
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 8001de8:	f1a4 0808 	sub.w	r8, r4, #8
 8001dec:	611a      	str	r2, [r3, #16]
 8001dee:	6922      	ldr	r2, [r4, #16]
 8001df0:	6153      	str	r3, [r2, #20]
  /*lint -restore*/
  heapp = hp->h.u.heap;
 8001df2:	f854 3c08 	ldr.w	r3, [r4, #-8]
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8001df6:	f103 0b10 	add.w	fp, r3, #16

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8001dfa:	f103 0908 	add.w	r9, r3, #8

  H_LOCK(heapp);
 8001dfe:	4658      	mov	r0, fp
 8001e00:	f7ff f97e 	bl	8001100 <chMtxLock>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8001e04:	464b      	mov	r3, r9

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8001e06:	4599      	cmp	r9, r3
 8001e08:	d004      	beq.n	8001e14 <main+0x6c4>
 8001e0a:	4598      	cmp	r8, r3
 8001e0c:	d802      	bhi.n	8001e14 <main+0x6c4>
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4599      	cmp	r9, r3
 8001e12:	d1fa      	bne.n	8001e0a <main+0x6ba>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8001e14:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8001e16:	b11a      	cbz	r2, 8001e20 <main+0x6d0>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8001e18:	4590      	cmp	r8, r2
 8001e1a:	d301      	bcc.n	8001e20 <main+0x6d0>
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	e7f2      	b.n	8001e06 <main+0x6b6>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8001e20:	f854 1c04 	ldr.w	r1, [r4, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8001e24:	f844 2c08 	str.w	r2, [r4, #-8]
      qp->h.u.next = hp;
 8001e28:	f8c3 8000 	str.w	r8, [r3]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8001e2c:	f101 0008 	add.w	r0, r1, #8
 8001e30:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8001e34:	eb08 0e00 	add.w	lr, r8, r0
 8001e38:	4596      	cmp	lr, r2
 8001e3a:	d056      	beq.n	8001eea <main+0x79a>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8001e3c:	6859      	ldr	r1, [r3, #4]
 8001e3e:	f101 0208 	add.w	r2, r1, #8
 8001e42:	441a      	add	r2, r3
 8001e44:	4590      	cmp	r8, r2
 8001e46:	d049      	beq.n	8001edc <main+0x78c>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8001e48:	4658      	mov	r0, fp
 8001e4a:	f7ff fa59 	bl	8001300 <chMtxUnlock>
 8001e4e:	2400      	movs	r4, #0
 8001e50:	e73c      	b.n	8001ccc <main+0x57c>

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
 8001e52:	f5b1 6f0d 	cmp.w	r1, #2256	; 0x8d0
 8001e56:	d233      	bcs.n	8001ec0 <main+0x770>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8001e58:	6819      	ldr	r1, [r3, #0]
 8001e5a:	6011      	str	r1, [r2, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8001e5c:	461c      	mov	r4, r3
      H_UNLOCK(heapp);
 8001e5e:	480f      	ldr	r0, [pc, #60]	; (8001e9c <main+0x74c>)
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8001e60:	f844 ab08 	str.w	sl, [r4], #8
      H_UNLOCK(heapp);
 8001e64:	f7ff fa4c 	bl	8001300 <chMtxUnlock>
 8001e68:	e75e      	b.n	8001d28 <main+0x5d8>
 8001e6a:	bf00      	nop
 8001e6c:	20000918 	.word	0x20000918
 8001e70:	20000904 	.word	0x20000904
 8001e74:	20000920 	.word	0x20000920
 8001e78:	08003de0 	.word	0x08003de0
 8001e7c:	08003fa0 	.word	0x08003fa0
 8001e80:	40010c00 	.word	0x40010c00
 8001e84:	20000858 	.word	0x20000858
 8001e88:	08003fd0 	.word	0x08003fd0
 8001e8c:	20000850 	.word	0x20000850
 8001e90:	20000b8c 	.word	0x20000b8c
 8001e94:	08001461 	.word	0x08001461
 8001e98:	20000bf8 	.word	0x20000bf8
 8001e9c:	20000d58 	.word	0x20000d58
 8001ea0:	20000d50 	.word	0x20000d50
 8001ea4:	20000d48 	.word	0x20000d48
 8001ea8:	08002c61 	.word	0x08002c61
 8001eac:	080041e0 	.word	0x080041e0
 8001eb0:	08000211 	.word	0x08000211
 8001eb4:	08000e71 	.word	0x08000e71
 8001eb8:	080004c1 	.word	0x080004c1
 8001ebc:	08003f84 	.word	0x08003f84
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
 8001ec0:	f640 04c8 	movw	r4, #2248	; 0x8c8
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8001ec4:	681f      	ldr	r7, [r3, #0]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8001ec6:	f5a1 610d 	sub.w	r1, r1, #2256	; 0x8d0
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8001eca:	f503 600d 	add.w	r0, r3, #2256	; 0x8d0
 8001ece:	f8c3 78d0 	str.w	r7, [r3, #2256]	; 0x8d0
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8001ed2:	f8c3 18d4 	str.w	r1, [r3, #2260]	; 0x8d4
        qp->h.u.next = fp;
 8001ed6:	6010      	str	r0, [r2, #0]
        hp->h.size = size;
 8001ed8:	605c      	str	r4, [r3, #4]
 8001eda:	e7bf      	b.n	8001e5c <main+0x70c>
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 8001edc:	e914 0005 	ldmdb	r4, {r0, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 8001ee0:	440a      	add	r2, r1
 8001ee2:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 8001ee4:	e883 0005 	stmia.w	r3, {r0, r2}
 8001ee8:	e7ae      	b.n	8001e48 <main+0x6f8>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8001eea:	f8de 2004 	ldr.w	r2, [lr, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8001eee:	f858 0000 	ldr.w	r0, [r8, r0]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8001ef2:	4411      	add	r1, r2
 8001ef4:	3108      	adds	r1, #8
        hp->h.u.next = hp->h.u.next->h.u.next;
 8001ef6:	e904 0003 	stmdb	r4, {r0, r1}
 8001efa:	e79f      	b.n	8001e3c <main+0x6ec>
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8001efc:	469b      	mov	fp, r3
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 8001efe:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001f98 <main+0x848>
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8001f02:	4923      	ldr	r1, [pc, #140]	; (8001f90 <main+0x840>)
 8001f04:	f8d8 401c 	ldr.w	r4, [r8, #28]
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8001f08:	f8df e090 	ldr.w	lr, [pc, #144]	; 8001f9c <main+0x84c>
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 8001f0c:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 8001f10:	f8a2 307c 	strh.w	r3, [r2, #124]	; 0x7c
  usbp->address       = 0;
 8001f14:	f882 307e 	strb.w	r3, [r2, #126]	; 0x7e
  usbp->configuration = 0;
 8001f18:	f882 307f 	strb.w	r3, [r2, #127]	; 0x7f
  usbp->transmitting  = 0;
 8001f1c:	8113      	strh	r3, [r2, #8]
  usbp->receiving     = 0;
 8001f1e:	8153      	strh	r3, [r2, #10]
 8001f20:	f8c8 401c 	str.w	r4, [r8, #28]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8001f24:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8001f28:	f04f 08d0 	mov.w	r8, #208	; 0xd0
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8001f2c:	f8ce c040 	str.w	ip, [lr, #64]	; 0x40
 8001f30:	f881 8313 	strb.w	r8, [r1, #787]	; 0x313
 8001f34:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8001f38:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
 8001f3c:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8001f40:	600c      	str	r4, [r1, #0]
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8001f42:	2402      	movs	r4, #2
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8001f44:	f881 c314 	strb.w	ip, [r1, #788]	; 0x314
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8001f48:	f8c1 8180 	str.w	r8, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8001f4c:	f8c1 8000 	str.w	r8, [r1]
#if STM32_USB1_HP_NUMBER != STM32_USB1_LP_NUMBER
      nvicEnableVector(STM32_USB1_HP_NUMBER, STM32_USB_USB1_HP_IRQ_PRIORITY);
#endif
      nvicEnableVector(STM32_USB1_LP_NUMBER, STM32_USB_USB1_LP_IRQ_PRIORITY);
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
 8001f50:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
 8001f54:	7014      	strb	r4, [r2, #0]
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8001f56:	f840 bf04 	str.w	fp, [r0, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8001f5a:	4548      	cmp	r0, r9
    usbp->epc[i] = NULL;
 8001f5c:	f04f 0300 	mov.w	r3, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8001f60:	d1f9      	bne.n	8001f56 <main+0x806>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8001f62:	480c      	ldr	r0, [pc, #48]	; (8001f94 <main+0x844>)
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8001f64:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8001f68:	f001 fa8a 	bl	8003480 <usb_lld_reset>
 8001f6c:	e67f      	b.n	8001c6e <main+0x51e>
		rfhelp_restart();
 8001f6e:	f000 fb87 	bl	8002680 <rfhelp_restart>
 8001f72:	e620      	b.n	8001bb6 <main+0x466>
      rccResetTIM3();
    }
#endif
#if STM32_QEI_USE_TIM4
    if (&QEID4 == qeip) {
      rccEnableTIM4(FALSE);
 8001f74:	69eb      	ldr	r3, [r5, #28]
 8001f76:	f043 0304 	orr.w	r3, r3, #4
 8001f7a:	61eb      	str	r3, [r5, #28]
      rccResetTIM4();
 8001f7c:	692b      	ldr	r3, [r5, #16]
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	612b      	str	r3, [r5, #16]
 8001f84:	612c      	str	r4, [r5, #16]
 8001f86:	e546      	b.n	8001a16 <main+0x2c6>
  /* Set Capture Compare 1 and Capture Compare 2 as input. */
   qeip->tim->CCMR1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  if (qeip->config->mode == QEI_MODE_QUADRATURE) {
    if (qeip->config->resolution == QEI_BOTH_EDGES)
      qeip->tim->SMCR  = TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0;
 8001f88:	2103      	movs	r1, #3
 8001f8a:	6099      	str	r1, [r3, #8]
 8001f8c:	e5a8      	b.n	8001ae0 <main+0x390>
 8001f8e:	bf00      	nop
 8001f90:	e000e100 	.word	0xe000e100
 8001f94:	20000850 	.word	0x20000850
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40005c00 	.word	0x40005c00

08001fa0 <spi_sw_stop>:
		palClearPad(m_port_sck, m_pin_sck);
		m_init_done = true;
	}
}

void spi_sw_stop(void) {
 8001fa0:	b510      	push	{r4, lr}
	palSetPadMode(m_port_miso, m_pin_miso, PAL_MODE_INPUT);
 8001fa2:	4c0d      	ldr	r4, [pc, #52]	; (8001fd8 <spi_sw_stop+0x38>)
 8001fa4:	2110      	movs	r1, #16
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	2202      	movs	r2, #2
 8001faa:	f001 fc69 	bl	8003880 <_pal_lld_setgroupmode>
	palSetPadMode(m_port_csn, m_pin_csn, PAL_MODE_INPUT);
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	f001 fc63 	bl	8003880 <_pal_lld_setgroupmode>
	palSetPadMode(m_port_sck, m_pin_sck, PAL_MODE_INPUT);
 8001fba:	4620      	mov	r0, r4
 8001fbc:	2108      	movs	r1, #8
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f001 fc5e 	bl	8003880 <_pal_lld_setgroupmode>
	palSetPadMode(m_port_mosi, m_pin_mosi, PAL_MODE_INPUT);
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	2120      	movs	r1, #32
 8001fca:	f001 fc59 	bl	8003880 <_pal_lld_setgroupmode>
	m_init_done = false;
 8001fce:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <spi_sw_stop+0x3c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
 8001fd4:	bd10      	pop	{r4, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40010c00 	.word	0x40010c00
 8001fdc:	20001677 	.word	0x20001677

08001fe0 <spi_sw_end>:
	palClearPad(NRF_PORT_CSN, NRF_PIN_CSN);
	spi_sw_delay();
#endif
}

void spi_sw_end(void) {
 8001fe0:	b082      	sub	sp, #8
}

static void spi_sw_delay(void) {
#ifdef SPI_BITBANG
  volatile int i;
	for (i = 0;i < 5;i++) {
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	9b01      	ldr	r3, [sp, #4]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	dc06      	bgt.n	8001ffa <spi_sw_end+0x1a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001fec:	bf00      	nop
 8001fee:	9b01      	ldr	r3, [sp, #4]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	9b01      	ldr	r3, [sp, #4]
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	ddf8      	ble.n	8001fec <spi_sw_end+0xc>
}

void spi_sw_end(void) {
#ifdef SPI_BITBANG
	spi_sw_delay();
	palSetPad(NRF_PORT_CSN, NRF_PIN_CSN);
 8001ffa:	4b03      	ldr	r3, [pc, #12]	; (8002008 <spi_sw_end+0x28>)
 8001ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002000:	611a      	str	r2, [r3, #16]
#endif
}
 8002002:	b002      	add	sp, #8
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40010c00 	.word	0x40010c00
 800200c:	00000000 	.word	0x00000000

08002010 <spi_sw_begin>:
#endif
}

void spi_sw_begin(void) {
#ifdef SPI_BITBANG
	palClearPad(NRF_PORT_CSN, NRF_PIN_CSN);
 8002010:	4a09      	ldr	r2, [pc, #36]	; (8002038 <spi_sw_begin+0x28>)
    spiReleaseBus(&SPID1);              /* Ownership release.               */

#endif
}

void spi_sw_begin(void) {
 8002012:	b082      	sub	sp, #8
}

static void spi_sw_delay(void) {
#ifdef SPI_BITBANG
  volatile int i;
	for (i = 0;i < 5;i++) {
 8002014:	2300      	movs	r3, #0
#endif
}

void spi_sw_begin(void) {
#ifdef SPI_BITBANG
	palClearPad(NRF_PORT_CSN, NRF_PIN_CSN);
 8002016:	f44f 7100 	mov.w	r1, #512	; 0x200
 800201a:	6151      	str	r1, [r2, #20]
}

static void spi_sw_delay(void) {
#ifdef SPI_BITBANG
  volatile int i;
	for (i = 0;i < 5;i++) {
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	9b01      	ldr	r3, [sp, #4]
 8002020:	2b04      	cmp	r3, #4
 8002022:	dc06      	bgt.n	8002032 <spi_sw_begin+0x22>
 8002024:	bf00      	nop
 8002026:	9b01      	ldr	r3, [sp, #4]
 8002028:	3301      	adds	r3, #1
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	9b01      	ldr	r3, [sp, #4]
 800202e:	2b04      	cmp	r3, #4
 8002030:	ddf8      	ble.n	8002024 <spi_sw_begin+0x14>
void spi_sw_begin(void) {
#ifdef SPI_BITBANG
	palClearPad(NRF_PORT_CSN, NRF_PIN_CSN);
	spi_sw_delay();
#endif
}
 8002032:	b002      	add	sp, #8
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40010c00 	.word	0x40010c00
 800203c:	00000000 	.word	0x00000000

08002040 <spi_sw_transfer>:
        middle = (a <= b) ? a : b;
    }
    return middle;
}

void spi_sw_transfer(char *in_buf, const char *out_buf, int length) {
 8002040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#ifdef SPI_BITBANG
  int i,bit;
  	palClearPad(m_port_sck, m_pin_sck);
 8002044:	4c3a      	ldr	r4, [pc, #232]	; (8002130 <spi_sw_transfer+0xf0>)
        middle = (a <= b) ? a : b;
    }
    return middle;
}

void spi_sw_transfer(char *in_buf, const char *out_buf, int length) {
 8002046:	b084      	sub	sp, #16
}

static void spi_sw_delay(void) {
#ifdef SPI_BITBANG
  volatile int i;
	for (i = 0;i < 5;i++) {
 8002048:	2300      	movs	r3, #0
}

void spi_sw_transfer(char *in_buf, const char *out_buf, int length) {
#ifdef SPI_BITBANG
  int i,bit;
  	palClearPad(m_port_sck, m_pin_sck);
 800204a:	2508      	movs	r5, #8
 800204c:	6165      	str	r5, [r4, #20]
}

static void spi_sw_delay(void) {
#ifdef SPI_BITBANG
  volatile int i;
	for (i = 0;i < 5;i++) {
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	9b01      	ldr	r3, [sp, #4]
        middle = (a <= b) ? a : b;
    }
    return middle;
}

void spi_sw_transfer(char *in_buf, const char *out_buf, int length) {
 8002052:	468c      	mov	ip, r1
}

static void spi_sw_delay(void) {
#ifdef SPI_BITBANG
  volatile int i;
	for (i = 0;i < 5;i++) {
 8002054:	2b04      	cmp	r3, #4
        middle = (a <= b) ? a : b;
    }
    return middle;
}

void spi_sw_transfer(char *in_buf, const char *out_buf, int length) {
 8002056:	4690      	mov	r8, r2
}

static void spi_sw_delay(void) {
#ifdef SPI_BITBANG
  volatile int i;
	for (i = 0;i < 5;i++) {
 8002058:	dc06      	bgt.n	8002068 <spi_sw_transfer+0x28>
 800205a:	bf00      	nop
 800205c:	9b01      	ldr	r3, [sp, #4]
 800205e:	3301      	adds	r3, #1
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	9b01      	ldr	r3, [sp, #4]
 8002064:	2b04      	cmp	r3, #4
 8002066:	ddf8      	ble.n	800205a <spi_sw_transfer+0x1a>
#ifdef SPI_BITBANG
  int i,bit;
  	palClearPad(m_port_sck, m_pin_sck);
	spi_sw_delay();

	for (i = 0;i < length;i++) {
 8002068:	f1b8 0f00 	cmp.w	r8, #0
 800206c:	dd4f      	ble.n	800210e <spi_sw_transfer+0xce>
 800206e:	f04f 0e00 	mov.w	lr, #0
}

static void spi_sw_delay(void) {
#ifdef SPI_BITBANG
  volatile int i;
	for (i = 0;i < 5;i++) {
 8002072:	4671      	mov	r1, lr
	for (i = 0;i < length;i++) {
		unsigned char send = out_buf ? out_buf[i] : 0;
		unsigned char recieve = 0;

		for (bit=0;bit < 8;bit++) {
			palWritePad(m_port_mosi, m_pin_mosi, send >> 7);
 8002074:	4c2e      	ldr	r4, [pc, #184]	; (8002130 <spi_sw_transfer+0xf0>)
			recieve <<= 1;
			if (utils_middle_of_3_int(r1, r2, r3)) {
				recieve |= 1;
			}

			palSetPad(m_port_sck, m_pin_sck);
 8002076:	2208      	movs	r2, #8
  int i,bit;
  	palClearPad(m_port_sck, m_pin_sck);
	spi_sw_delay();

	for (i = 0;i < length;i++) {
		unsigned char send = out_buf ? out_buf[i] : 0;
 8002078:	f1bc 0f00 	cmp.w	ip, #0
 800207c:	d056      	beq.n	800212c <spi_sw_transfer+0xec>
 800207e:	f81c 600e 	ldrb.w	r6, [ip, lr]
 8002082:	2708      	movs	r7, #8
 8002084:	2500      	movs	r5, #0
		unsigned char recieve = 0;

		for (bit=0;bit < 8;bit++) {
			palWritePad(m_port_mosi, m_pin_mosi, send >> 7);
 8002086:	f3c6 13c7 	ubfx	r3, r6, #7, #8
 800208a:	fab3 f983 	clz	r9, r3
 800208e:	015b      	lsls	r3, r3, #5
 8002090:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8002094:	ea43 5349 	orr.w	r3, r3, r9, lsl #21
 8002098:	6123      	str	r3, [r4, #16]
}

static void spi_sw_delay(void) {
#ifdef SPI_BITBANG
  volatile int i;
	for (i = 0;i < 5;i++) {
 800209a:	9102      	str	r1, [sp, #8]
 800209c:	9b02      	ldr	r3, [sp, #8]
		unsigned char send = out_buf ? out_buf[i] : 0;
		unsigned char recieve = 0;

		for (bit=0;bit < 8;bit++) {
			palWritePad(m_port_mosi, m_pin_mosi, send >> 7);
			send <<= 1;
 800209e:	0076      	lsls	r6, r6, #1
}

static void spi_sw_delay(void) {
#ifdef SPI_BITBANG
  volatile int i;
	for (i = 0;i < 5;i++) {
 80020a0:	2b04      	cmp	r3, #4
		unsigned char send = out_buf ? out_buf[i] : 0;
		unsigned char recieve = 0;

		for (bit=0;bit < 8;bit++) {
			palWritePad(m_port_mosi, m_pin_mosi, send >> 7);
			send <<= 1;
 80020a2:	b2f6      	uxtb	r6, r6
}

static void spi_sw_delay(void) {
#ifdef SPI_BITBANG
  volatile int i;
	for (i = 0;i < 5;i++) {
 80020a4:	dc06      	bgt.n	80020b4 <spi_sw_transfer+0x74>
 80020a6:	bf00      	nop
 80020a8:	9b02      	ldr	r3, [sp, #8]
 80020aa:	3301      	adds	r3, #1
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	9b02      	ldr	r3, [sp, #8]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	ddf8      	ble.n	80020a6 <spi_sw_transfer+0x66>
			send <<= 1;

			spi_sw_delay();

			int r1, r2, r3;
			r1 = palReadPad(m_port_miso, m_pin_miso);
 80020b4:	68a3      	ldr	r3, [r4, #8]
 80020b6:	f3c3 1900 	ubfx	r9, r3, #4, #1
 80020ba:	bf00      	nop
			__NOP();
			r2 = palReadPad(m_port_miso, m_pin_miso);
 80020bc:	68a3      	ldr	r3, [r4, #8]
 80020be:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80020c2:	bf00      	nop
			__NOP();
			r3 = palReadPad(m_port_miso, m_pin_miso);
 80020c4:	f8d4 a008 	ldr.w	sl, [r4, #8]

			recieve <<= 1;
 80020c8:	006d      	lsls	r5, r5, #1
	}
}
int utils_middle_of_3_int(int a, int b, int c) {
    int middle;

    if ((a <= b) && (a <= c)) {
 80020ca:	4599      	cmp	r9, r3
			__NOP();
			r2 = palReadPad(m_port_miso, m_pin_miso);
			__NOP();
			r3 = palReadPad(m_port_miso, m_pin_miso);

			recieve <<= 1;
 80020cc:	b2ed      	uxtb	r5, r5
			int r1, r2, r3;
			r1 = palReadPad(m_port_miso, m_pin_miso);
			__NOP();
			r2 = palReadPad(m_port_miso, m_pin_miso);
			__NOP();
			r3 = palReadPad(m_port_miso, m_pin_miso);
 80020ce:	f3ca 1a00 	ubfx	sl, sl, #4, #1
	}
}
int utils_middle_of_3_int(int a, int b, int c) {
    int middle;

    if ((a <= b) && (a <= c)) {
 80020d2:	dd1f      	ble.n	8002114 <spi_sw_transfer+0xd4>
        middle = (b <= c) ? b : c;
    } else if ((b <= a) && (b <= c)) {
        middle = (a <= c) ? a : c;
 80020d4:	45ca      	cmp	sl, r9
 80020d6:	4653      	mov	r3, sl
 80020d8:	bfa8      	it	ge
 80020da:	464b      	movge	r3, r9
			r2 = palReadPad(m_port_miso, m_pin_miso);
			__NOP();
			r3 = palReadPad(m_port_miso, m_pin_miso);

			recieve <<= 1;
			if (utils_middle_of_3_int(r1, r2, r3)) {
 80020dc:	b10b      	cbz	r3, 80020e2 <spi_sw_transfer+0xa2>
				recieve |= 1;
 80020de:	f045 0501 	orr.w	r5, r5, #1
			}

			palSetPad(m_port_sck, m_pin_sck);
 80020e2:	6122      	str	r2, [r4, #16]
}

static void spi_sw_delay(void) {
#ifdef SPI_BITBANG
  volatile int i;
	for (i = 0;i < 5;i++) {
 80020e4:	9103      	str	r1, [sp, #12]
 80020e6:	9b03      	ldr	r3, [sp, #12]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	dc06      	bgt.n	80020fa <spi_sw_transfer+0xba>
 80020ec:	bf00      	nop
 80020ee:	9b03      	ldr	r3, [sp, #12]
 80020f0:	3301      	adds	r3, #1
 80020f2:	9303      	str	r3, [sp, #12]
 80020f4:	9b03      	ldr	r3, [sp, #12]
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	ddf8      	ble.n	80020ec <spi_sw_transfer+0xac>

	for (i = 0;i < length;i++) {
		unsigned char send = out_buf ? out_buf[i] : 0;
		unsigned char recieve = 0;

		for (bit=0;bit < 8;bit++) {
 80020fa:	3f01      	subs	r7, #1
				recieve |= 1;
			}

			palSetPad(m_port_sck, m_pin_sck);
			spi_sw_delay();
			palClearPad(m_port_sck, m_pin_sck);
 80020fc:	6162      	str	r2, [r4, #20]

	for (i = 0;i < length;i++) {
		unsigned char send = out_buf ? out_buf[i] : 0;
		unsigned char recieve = 0;

		for (bit=0;bit < 8;bit++) {
 80020fe:	d1c2      	bne.n	8002086 <spi_sw_transfer+0x46>
			palSetPad(m_port_sck, m_pin_sck);
			spi_sw_delay();
			palClearPad(m_port_sck, m_pin_sck);
		}

		if (in_buf) {
 8002100:	b108      	cbz	r0, 8002106 <spi_sw_transfer+0xc6>
			in_buf[i] = recieve;
 8002102:	f800 500e 	strb.w	r5, [r0, lr]
#ifdef SPI_BITBANG
  int i,bit;
  	palClearPad(m_port_sck, m_pin_sck);
	spi_sw_delay();

	for (i = 0;i < length;i++) {
 8002106:	f10e 0e01 	add.w	lr, lr, #1
 800210a:	45c6      	cmp	lr, r8
 800210c:	d1b4      	bne.n	8002078 <spi_sw_transfer+0x38>
                out_buf, in_buf);          /* Atomic transfer operations.      */
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */

#endif
}
 800210e:	b004      	add	sp, #16
 8002110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
}
int utils_middle_of_3_int(int a, int b, int c) {
    int middle;

    if ((a <= b) && (a <= c)) {
 8002114:	45d1      	cmp	r9, sl
 8002116:	dd05      	ble.n	8002124 <spi_sw_transfer+0xe4>
        middle = (b <= c) ? b : c;
    } else if ((b <= a) && (b <= c)) {
 8002118:	4553      	cmp	r3, sl
 800211a:	dddb      	ble.n	80020d4 <spi_sw_transfer+0x94>
        middle = (a <= c) ? a : c;
    } else {
        middle = (a <= b) ? a : b;
 800211c:	454b      	cmp	r3, r9
 800211e:	bfa8      	it	ge
 8002120:	464b      	movge	r3, r9
 8002122:	e7db      	b.n	80020dc <spi_sw_transfer+0x9c>
}
int utils_middle_of_3_int(int a, int b, int c) {
    int middle;

    if ((a <= b) && (a <= c)) {
        middle = (b <= c) ? b : c;
 8002124:	4553      	cmp	r3, sl
 8002126:	bfa8      	it	ge
 8002128:	4653      	movge	r3, sl
 800212a:	e7d7      	b.n	80020dc <spi_sw_transfer+0x9c>
  int i,bit;
  	palClearPad(m_port_sck, m_pin_sck);
	spi_sw_delay();

	for (i = 0;i < length;i++) {
		unsigned char send = out_buf ? out_buf[i] : 0;
 800212c:	4666      	mov	r6, ip
 800212e:	e7a8      	b.n	8002082 <spi_sw_transfer+0x42>
 8002130:	40010c00 	.word	0x40010c00
	...

08002140 <rf_read_reg>:
}

void rf_read_reg(int reg, char *data, int len) {
 8002140:	b570      	push	{r4, r5, r6, lr}
 8002142:	4615      	mov	r5, r2
 8002144:	460e      	mov	r6, r1
 8002146:	b082      	sub	sp, #8
	char cmd = NRF_CMD_READ_REGISTER | reg;
 8002148:	ac02      	add	r4, sp, #8
 800214a:	f804 0d01 	strb.w	r0, [r4, #-1]!

	spi_sw_begin();
 800214e:	f7ff ff5f 	bl	8002010 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 8002152:	4621      	mov	r1, r4
 8002154:	2000      	movs	r0, #0
 8002156:	2201      	movs	r2, #1
 8002158:	f7ff ff72 	bl	8002040 <spi_sw_transfer>
	spi_sw_transfer(data, 0, len);
 800215c:	4630      	mov	r0, r6
 800215e:	462a      	mov	r2, r5
 8002160:	2100      	movs	r1, #0
 8002162:	f7ff ff6d 	bl	8002040 <spi_sw_transfer>
	spi_sw_end();
 8002166:	f7ff ff3b 	bl	8001fe0 <spi_sw_end>
}
 800216a:	b002      	add	sp, #8
 800216c:	bd70      	pop	{r4, r5, r6, pc}
 800216e:	bf00      	nop

08002170 <rf_write_reg>:

int rf_rx_power_detect(void) {
	return rf_read_reg_byte(NRF_REG_RPD) >> 1;
}

void rf_write_reg(int reg, const char *data, int len) {
 8002170:	b570      	push	{r4, r5, r6, lr}
 8002172:	460e      	mov	r6, r1
 8002174:	4615      	mov	r5, r2
 8002176:	b082      	sub	sp, #8
	char cmd = NRF_CMD_WRITE_REGISTER | reg;
 8002178:	ac02      	add	r4, sp, #8
 800217a:	f040 0020 	orr.w	r0, r0, #32
 800217e:	f804 0d01 	strb.w	r0, [r4, #-1]!

	spi_sw_begin();
 8002182:	f7ff ff45 	bl	8002010 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 8002186:	4621      	mov	r1, r4
 8002188:	2000      	movs	r0, #0
 800218a:	2201      	movs	r2, #1
 800218c:	f7ff ff58 	bl	8002040 <spi_sw_transfer>
	spi_sw_transfer(0, data, len);
 8002190:	4631      	mov	r1, r6
 8002192:	462a      	mov	r2, r5
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff ff53 	bl	8002040 <spi_sw_transfer>
	spi_sw_end();
 800219a:	f7ff ff21 	bl	8001fe0 <spi_sw_end>
}
 800219e:	b002      	add	sp, #8
 80021a0:	bd70      	pop	{r4, r5, r6, pc}
 80021a2:	bf00      	nop
	...

080021b0 <nrf_driver_init>:
static THD_FUNCTION(rx_thread, arg);
static THD_FUNCTION(tx_thread, arg);
static int rf_tx_wrapper(char *data, int len);

char nrf_driver_init(void) {
	if (from_nrf) {
 80021b0:	4b66      	ldr	r3, [pc, #408]	; (800234c <nrf_driver_init+0x19c>)
 80021b2:	781a      	ldrb	r2, [r3, #0]
 80021b4:	2a00      	cmp	r2, #0
 80021b6:	f040 80a8 	bne.w	800230a <nrf_driver_init+0x15a>
// Functions
static THD_FUNCTION(rx_thread, arg);
static THD_FUNCTION(tx_thread, arg);
static int rf_tx_wrapper(char *data, int len);

char nrf_driver_init(void) {
 80021ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	return true;
}

void nrf_driver_stop(void) {
	if (from_nrf) {
 80021be:	781b      	ldrb	r3, [r3, #0]
// Functions
static THD_FUNCTION(rx_thread, arg);
static THD_FUNCTION(tx_thread, arg);
static int rf_tx_wrapper(char *data, int len);

char nrf_driver_init(void) {
 80021c0:	b085      	sub	sp, #20

	return true;
}

void nrf_driver_stop(void) {
	if (from_nrf) {
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 80a3 	beq.w	800230e <nrf_driver_init+0x15e>

// Private functions
static void spi_sw_delay(void);

void spi_sw_init(void) {
	if (!m_init_done) {
 80021c8:	4d61      	ldr	r5, [pc, #388]	; (8002350 <nrf_driver_init+0x1a0>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80021ca:	4b62      	ldr	r3, [pc, #392]	; (8002354 <nrf_driver_init+0x1a4>)
 80021cc:	782a      	ldrb	r2, [r5, #0]
 80021ce:	2100      	movs	r1, #0
 80021d0:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80021d2:	605b      	str	r3, [r3, #4]
 80021d4:	6099      	str	r1, [r3, #8]
 80021d6:	2a00      	cmp	r2, #0
 80021d8:	d079      	beq.n	80022ce <nrf_driver_init+0x11e>
  int i;
	chMtxObjectInit(&rf_mutex);
	rf_init();

//	address_length = rf_get_address_width();
	address_length = 3; // We assume length 3
 80021da:	2403      	movs	r4, #3
 80021dc:	4b5e      	ldr	r3, [pc, #376]	; (8002358 <nrf_driver_init+0x1a8>)
		address_length = 3;
	}

	// Try a read and write to see if the SPI communication works
	char addr_old[3];
	rf_read_reg(NRF_REG_TX_ADDR, addr_old, 3);
 80021de:	4622      	mov	r2, r4
 80021e0:	a901      	add	r1, sp, #4
 80021e2:	2010      	movs	r0, #16
  int i;
	chMtxObjectInit(&rf_mutex);
	rf_init();

//	address_length = rf_get_address_width();
	address_length = 3; // We assume length 3
 80021e4:	601c      	str	r4, [r3, #0]
		address_length = 3;
	}

	// Try a read and write to see if the SPI communication works
	char addr_old[3];
	rf_read_reg(NRF_REG_TX_ADDR, addr_old, 3);
 80021e6:	f7ff ffab 	bl	8002140 <rf_read_reg>
	char addr_test[3] = {0x12, 0x41, 0xF3};
 80021ea:	4b5c      	ldr	r3, [pc, #368]	; (800235c <nrf_driver_init+0x1ac>)
	rf_write_reg(NRF_REG_TX_ADDR, addr_test, 3);
 80021ec:	a902      	add	r1, sp, #8
	}

	// Try a read and write to see if the SPI communication works
	char addr_old[3];
	rf_read_reg(NRF_REG_TX_ADDR, addr_old, 3);
	char addr_test[3] = {0x12, 0x41, 0xF3};
 80021ee:	881d      	ldrh	r5, [r3, #0]
 80021f0:	789b      	ldrb	r3, [r3, #2]
	rf_write_reg(NRF_REG_TX_ADDR, addr_test, 3);
 80021f2:	4622      	mov	r2, r4
 80021f4:	2010      	movs	r0, #16
	}

	// Try a read and write to see if the SPI communication works
	char addr_old[3];
	rf_read_reg(NRF_REG_TX_ADDR, addr_old, 3);
	char addr_test[3] = {0x12, 0x41, 0xF3};
 80021f6:	f88d 300a 	strb.w	r3, [sp, #10]
 80021fa:	f8ad 5008 	strh.w	r5, [sp, #8]
	rf_write_reg(NRF_REG_TX_ADDR, addr_test, 3);
 80021fe:	f7ff ffb7 	bl	8002170 <rf_write_reg>
	char addr_test_read[3];
	rf_read_reg(NRF_REG_TX_ADDR, addr_test_read, 3);
 8002202:	4622      	mov	r2, r4
 8002204:	a903      	add	r1, sp, #12
 8002206:	2010      	movs	r0, #16
 8002208:	f7ff ff9a 	bl	8002140 <rf_read_reg>
	rf_write_reg(NRF_REG_TX_ADDR, addr_old, 3);
 800220c:	a901      	add	r1, sp, #4
 800220e:	4622      	mov	r2, r4
 8002210:	2010      	movs	r0, #16
 8002212:	f7ff ffad 	bl	8002170 <rf_write_reg>

	if (memcmp(addr_test, addr_test_read, 3) != 0) {
 8002216:	a802      	add	r0, sp, #8
 8002218:	a903      	add	r1, sp, #12
 800221a:	4622      	mov	r2, r4
 800221c:	f001 fc78 	bl	8003b10 <memcmp>
 8002220:	2800      	cmp	r0, #0
 8002222:	f040 808f 	bne.w	8002344 <nrf_driver_init+0x194>
		return false;
	}

	for (i = 0;i < 6;i++) {
		rf_read_reg(NRF_REG_RX_ADDR_P0 + i, rx_addr[i], address_length);
		rx_addr_set[i] = false;
 8002226:	4680      	mov	r8, r0
 8002228:	4d4d      	ldr	r5, [pc, #308]	; (8002360 <nrf_driver_init+0x1b0>)
 800222a:	4e4e      	ldr	r6, [pc, #312]	; (8002364 <nrf_driver_init+0x1b4>)
	rf_write_reg(NRF_REG_TX_ADDR, addr_test, 3);
	char addr_test_read[3];
	rf_read_reg(NRF_REG_TX_ADDR, addr_test_read, 3);
	rf_write_reg(NRF_REG_TX_ADDR, addr_old, 3);

	if (memcmp(addr_test, addr_test_read, 3) != 0) {
 800222c:	240a      	movs	r4, #10
		rf_stop();
		return false;
	}

	for (i = 0;i < 6;i++) {
		rf_read_reg(NRF_REG_RX_ADDR_P0 + i, rx_addr[i], address_length);
 800222e:	4620      	mov	r0, r4
 8002230:	4629      	mov	r1, r5
 8002232:	3401      	adds	r4, #1
 8002234:	2203      	movs	r2, #3
 8002236:	f7ff ff83 	bl	8002140 <rf_read_reg>
	if (memcmp(addr_test, addr_test_read, 3) != 0) {
		rf_stop();
		return false;
	}

	for (i = 0;i < 6;i++) {
 800223a:	2c10      	cmp	r4, #16
 800223c:	f105 0505 	add.w	r5, r5, #5
		rf_read_reg(NRF_REG_RX_ADDR_P0 + i, rx_addr[i], address_length);
		rx_addr_set[i] = false;
 8002240:	f04f 0700 	mov.w	r7, #0
 8002244:	f806 8b01 	strb.w	r8, [r6], #1
	if (memcmp(addr_test, addr_test_read, 3) != 0) {
		rf_stop();
		return false;
	}

	for (i = 0;i < 6;i++) {
 8002248:	d1f1      	bne.n	800222e <nrf_driver_init+0x7e>
		rf_read_reg(NRF_REG_RX_ADDR_P0 + i, rx_addr[i], address_length);
		rx_addr_set[i] = false;
	}

	rf_read_reg(NRF_REG_TX_ADDR, tx_addr, address_length);
 800224a:	4620      	mov	r0, r4
 800224c:	4946      	ldr	r1, [pc, #280]	; (8002368 <nrf_driver_init+0x1b8>)
 800224e:	2203      	movs	r2, #3
 8002250:	f7ff ff76 	bl	8002140 <rf_read_reg>
	tx_pipe0_addr_eq = memcmp(rx_addr[0], tx_addr, address_length) == 0;
 8002254:	4944      	ldr	r1, [pc, #272]	; (8002368 <nrf_driver_init+0x1b8>)
 8002256:	2203      	movs	r2, #3
 8002258:	4841      	ldr	r0, [pc, #260]	; (8002360 <nrf_driver_init+0x1b0>)
 800225a:	f001 fc59 	bl	8003b10 <memcmp>
 800225e:	fab0 f380 	clz	r3, r0
 8002262:	4a42      	ldr	r2, [pc, #264]	; (800236c <nrf_driver_init+0x1bc>)
		return false;
	}

	nosend_cnt = 0;
	nrf_restart_rx_time = 0;
	nrf_restart_tx_time = 0;
 8002264:	f8df c134 	ldr.w	ip, [pc, #308]	; 800239c <nrf_driver_init+0x1ec>

	pairing_time_end = 0;
 8002268:	f8df e134 	ldr.w	lr, [pc, #308]	; 80023a0 <nrf_driver_init+0x1f0>
 800226c:	095b      	lsrs	r3, r3, #5
	pairing_active = false;

	rx_stop = false;
 800226e:	f8df b124 	ldr.w	fp, [pc, #292]	; 8002394 <nrf_driver_init+0x1e4>

	// TODO: fill nrf_conf with values from the nrf chip. For now we assume
	// that nrf_conf is already set when rfhelp_restart is called.

	init_done = true;
 8002272:	f8df a124 	ldr.w	sl, [pc, #292]	; 8002398 <nrf_driver_init+0x1e8>

	if (!rfhelp_init()) {
		return false;
	}

	nosend_cnt = 0;
 8002276:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80023a4 <nrf_driver_init+0x1f4>
	nrf_restart_rx_time = 0;
 800227a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80023a8 <nrf_driver_init+0x1f8>
	nrf_restart_tx_time = 0;

	pairing_time_end = 0;
	pairing_active = false;
 800227e:	4e3c      	ldr	r6, [pc, #240]	; (8002370 <nrf_driver_init+0x1c0>)

	rx_stop = false;
	tx_stop = false;
 8002280:	4d3c      	ldr	r5, [pc, #240]	; (8002374 <nrf_driver_init+0x1c4>)
 8002282:	2401      	movs	r4, #1
		rf_read_reg(NRF_REG_RX_ADDR_P0 + i, rx_addr[i], address_length);
		rx_addr_set[i] = false;
	}

	rf_read_reg(NRF_REG_TX_ADDR, tx_addr, address_length);
	tx_pipe0_addr_eq = memcmp(rx_addr[0], tx_addr, address_length) == 0;
 8002284:	7013      	strb	r3, [r2, #0]
	chThdCreateStatic(rx_thread_wa, sizeof(rx_thread_wa), NORMALPRIO - 1, rx_thread, NULL);
 8002286:	f640 01c8 	movw	r1, #2248	; 0x8c8
 800228a:	223f      	movs	r2, #63	; 0x3f
 800228c:	4b3a      	ldr	r3, [pc, #232]	; (8002378 <nrf_driver_init+0x1c8>)
 800228e:	483b      	ldr	r0, [pc, #236]	; (800237c <nrf_driver_init+0x1cc>)
	nrf_restart_tx_time = 0;

	pairing_time_end = 0;
	pairing_active = false;

	rx_stop = false;
 8002290:	f88b 7000 	strb.w	r7, [fp]
		return false;
	}

	nosend_cnt = 0;
	nrf_restart_rx_time = 0;
	nrf_restart_tx_time = 0;
 8002294:	f8cc 7000 	str.w	r7, [ip]

	pairing_time_end = 0;
 8002298:	f8ae 7000 	strh.w	r7, [lr]

	// TODO: fill nrf_conf with values from the nrf chip. For now we assume
	// that nrf_conf is already set when rfhelp_restart is called.

	init_done = true;
 800229c:	f88a 4000 	strb.w	r4, [sl]

	if (!rfhelp_init()) {
		return false;
	}

	nosend_cnt = 0;
 80022a0:	f8c9 7000 	str.w	r7, [r9]
	nrf_restart_rx_time = 0;
 80022a4:	f8c8 7000 	str.w	r7, [r8]
	nrf_restart_tx_time = 0;

	pairing_time_end = 0;
	pairing_active = false;
 80022a8:	7037      	strb	r7, [r6, #0]

	rx_stop = false;
	tx_stop = false;
 80022aa:	702f      	strb	r7, [r5, #0]
	chThdCreateStatic(rx_thread_wa, sizeof(rx_thread_wa), NORMALPRIO - 1, rx_thread, NULL);
 80022ac:	f001 fb50 	bl	8003950 <chThdCreateStatic.constprop.43>
	chThdCreateStatic(tx_thread_wa, sizeof(tx_thread_wa), NORMALPRIO - 1, tx_thread, NULL);
 80022b0:	223f      	movs	r2, #63	; 0x3f
 80022b2:	4b33      	ldr	r3, [pc, #204]	; (8002380 <nrf_driver_init+0x1d0>)
 80022b4:	4833      	ldr	r0, [pc, #204]	; (8002384 <nrf_driver_init+0x1d4>)
 80022b6:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 80022ba:	f001 fb49 	bl	8003950 <chThdCreateStatic.constprop.43>
	rx_running = true;
	tx_running = true;
 80022be:	4620      	mov	r0, r4

	rx_stop = false;
	tx_stop = false;
	chThdCreateStatic(rx_thread_wa, sizeof(rx_thread_wa), NORMALPRIO - 1, rx_thread, NULL);
	chThdCreateStatic(tx_thread_wa, sizeof(tx_thread_wa), NORMALPRIO - 1, tx_thread, NULL);
	rx_running = true;
 80022c0:	4a31      	ldr	r2, [pc, #196]	; (8002388 <nrf_driver_init+0x1d8>)
	tx_running = true;
 80022c2:	4b32      	ldr	r3, [pc, #200]	; (800238c <nrf_driver_init+0x1dc>)

	rx_stop = false;
	tx_stop = false;
	chThdCreateStatic(rx_thread_wa, sizeof(rx_thread_wa), NORMALPRIO - 1, rx_thread, NULL);
	chThdCreateStatic(tx_thread_wa, sizeof(tx_thread_wa), NORMALPRIO - 1, tx_thread, NULL);
	rx_running = true;
 80022c4:	7014      	strb	r4, [r2, #0]
	tx_running = true;
 80022c6:	701c      	strb	r4, [r3, #0]

	return true;
}
 80022c8:	b005      	add	sp, #20
 80022ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		palSetPadMode(m_port_miso, m_pin_miso, PAL_MODE_INPUT);
 80022ce:	4c30      	ldr	r4, [pc, #192]	; (8002390 <nrf_driver_init+0x1e0>)
 80022d0:	2110      	movs	r1, #16
 80022d2:	4620      	mov	r0, r4
 80022d4:	2202      	movs	r2, #2
 80022d6:	f001 fad3 	bl	8003880 <_pal_lld_setgroupmode>
		palSetPadMode(m_port_csn, m_pin_csn, PAL_MODE_OUTPUT_PUSHPULL);
 80022da:	4620      	mov	r0, r4
 80022dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022e0:	2206      	movs	r2, #6
 80022e2:	f001 facd 	bl	8003880 <_pal_lld_setgroupmode>
		palSetPadMode(m_port_sck, m_pin_sck, PAL_MODE_OUTPUT_PUSHPULL);
 80022e6:	4620      	mov	r0, r4
 80022e8:	2108      	movs	r1, #8
 80022ea:	2206      	movs	r2, #6
 80022ec:	f001 fac8 	bl	8003880 <_pal_lld_setgroupmode>
		palSetPadMode(m_port_mosi, m_pin_mosi, PAL_MODE_OUTPUT_PUSHPULL);
 80022f0:	2120      	movs	r1, #32
 80022f2:	2206      	movs	r2, #6
 80022f4:	4620      	mov	r0, r4
 80022f6:	f001 fac3 	bl	8003880 <_pal_lld_setgroupmode>

		palSetPad(m_port_csn, m_pin_csn);
 80022fa:	f44f 7100 	mov.w	r1, #512	; 0x200
		palClearPad(m_port_sck, m_pin_sck);
 80022fe:	2208      	movs	r2, #8
		m_init_done = true;
 8002300:	2301      	movs	r3, #1
		palSetPadMode(m_port_miso, m_pin_miso, PAL_MODE_INPUT);
		palSetPadMode(m_port_csn, m_pin_csn, PAL_MODE_OUTPUT_PUSHPULL);
		palSetPadMode(m_port_sck, m_pin_sck, PAL_MODE_OUTPUT_PUSHPULL);
		palSetPadMode(m_port_mosi, m_pin_mosi, PAL_MODE_OUTPUT_PUSHPULL);

		palSetPad(m_port_csn, m_pin_csn);
 8002302:	6121      	str	r1, [r4, #16]
		palClearPad(m_port_sck, m_pin_sck);
 8002304:	6162      	str	r2, [r4, #20]
		m_init_done = true;
 8002306:	702b      	strb	r3, [r5, #0]
 8002308:	e767      	b.n	80021da <nrf_driver_init+0x2a>
static THD_FUNCTION(tx_thread, arg);
static int rf_tx_wrapper(char *data, int len);

char nrf_driver_init(void) {
	if (from_nrf) {
		return true;
 800230a:	2001      	movs	r0, #1
 800230c:	4770      	bx	lr
void nrf_driver_stop(void) {
	if (from_nrf) {
		return;
	}

	tx_stop = true;
 800230e:	4919      	ldr	r1, [pc, #100]	; (8002374 <nrf_driver_init+0x1c4>)
	rx_stop = true;
 8002310:	4a20      	ldr	r2, [pc, #128]	; (8002394 <nrf_driver_init+0x1e4>)
void nrf_driver_stop(void) {
	if (from_nrf) {
		return;
	}

	tx_stop = true;
 8002312:	2301      	movs	r3, #1
	rx_stop = true;

	if (rx_running || tx_running) {
 8002314:	4c1c      	ldr	r4, [pc, #112]	; (8002388 <nrf_driver_init+0x1d8>)
void nrf_driver_stop(void) {
	if (from_nrf) {
		return;
	}

	tx_stop = true;
 8002316:	700b      	strb	r3, [r1, #0]
	rx_stop = true;
 8002318:	7013      	strb	r3, [r2, #0]

	if (rx_running || tx_running) {
 800231a:	7823      	ldrb	r3, [r4, #0]
 800231c:	4d1b      	ldr	r5, [pc, #108]	; (800238c <nrf_driver_init+0x1dc>)
 800231e:	b90b      	cbnz	r3, 8002324 <nrf_driver_init+0x174>
 8002320:	782b      	ldrb	r3, [r5, #0]
 8002322:	b13b      	cbz	r3, 8002334 <nrf_driver_init+0x184>
void rf_init(void) {
	spi_sw_init();
}

void rf_stop(void) {
	spi_sw_stop();
 8002324:	f7ff fe3c 	bl	8001fa0 <spi_sw_stop>
	return true;
}

void rfhelp_stop(void) {
	rf_stop();
	init_done = false;
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <nrf_driver_init+0x1e8>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
 800232e:	e001      	b.n	8002334 <nrf_driver_init+0x184>
		rfhelp_stop();
	}

	while (rx_running || tx_running) {
		chThdSleepMilliseconds(1);
 8002330:	f7fe ffbe 	bl	80012b0 <chThdSleep>

	if (rx_running || tx_running) {
		rfhelp_stop();
	}

	while (rx_running || tx_running) {
 8002334:	7823      	ldrb	r3, [r4, #0]
		chThdSleepMilliseconds(1);
 8002336:	2002      	movs	r0, #2

	if (rx_running || tx_running) {
		rfhelp_stop();
	}

	while (rx_running || tx_running) {
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f9      	bne.n	8002330 <nrf_driver_init+0x180>
 800233c:	782b      	ldrb	r3, [r5, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f6      	bne.n	8002330 <nrf_driver_init+0x180>
 8002342:	e741      	b.n	80021c8 <nrf_driver_init+0x18>
 8002344:	f7ff fe2c 	bl	8001fa0 <spi_sw_stop>
	}

	nrf_driver_stop();

	if (!rfhelp_init()) {
		return false;
 8002348:	2000      	movs	r0, #0
 800234a:	e7bd      	b.n	80022c8 <nrf_driver_init+0x118>
 800234c:	2000164e 	.word	0x2000164e
 8002350:	20001677 	.word	0x20001677
 8002354:	20000b90 	.word	0x20000b90
 8002358:	20001670 	.word	0x20001670
 800235c:	08003cf0 	.word	0x08003cf0
 8002360:	20001650 	.word	0x20001650
 8002364:	20001648 	.word	0x20001648
 8002368:	20000d6c 	.word	0x20000d6c
 800236c:	20000d68 	.word	0x20000d68
 8002370:	20001676 	.word	0x20001676
 8002374:	20000819 	.word	0x20000819
 8002378:	080015d1 	.word	0x080015d1
 800237c:	20000d80 	.word	0x20000d80
 8002380:	080024a1 	.word	0x080024a1
 8002384:	20001678 	.word	0x20001678
 8002388:	20000919 	.word	0x20000919
 800238c:	20000d78 	.word	0x20000d78
 8002390:	40010c00 	.word	0x40010c00
 8002394:	20000818 	.word	0x20000818
 8002398:	20000918 	.word	0x20000918
 800239c:	2000084c 	.word	0x2000084c
 80023a0:	20001674 	.word	0x20001674
 80023a4:	20000d74 	.word	0x20000d74
 80023a8:	20000d40 	.word	0x20000d40
 80023ac:	00000000 	.word	0x00000000

080023b0 <rf_mode_rx>:
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
	}
}

// Set up radio for reception
void rf_mode_rx(void) {
 80023b0:	b500      	push	{lr}
 80023b2:	b083      	sub	sp, #12
	spi_sw_end();
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 80023b4:	2000      	movs	r0, #0
 80023b6:	f10d 0107 	add.w	r1, sp, #7
 80023ba:	2201      	movs	r2, #1
 80023bc:	f7ff fec0 	bl	8002140 <rf_read_reg>
	return result;
 80023c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
}

// Set up radio for reception
void rf_mode_rx(void) {
	int tmp = rf_read_reg_byte(NRF_REG_CONFIG);
	if ((tmp & (NRF_CONFIG_PRIM_RX)) != (NRF_CONFIG_PRIM_RX)) {
 80023c4:	f013 0001 	ands.w	r0, r3, #1
 80023c8:	d108      	bne.n	80023dc <rf_mode_rx+0x2c>
		tmp |= (NRF_CONFIG_PRIM_RX);
 80023ca:	f043 0301 	orr.w	r3, r3, #1
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 80023ce:	f10d 0107 	add.w	r1, sp, #7
 80023d2:	2201      	movs	r2, #1
 80023d4:	f88d 3007 	strb.w	r3, [sp, #7]
 80023d8:	f7ff feca 	bl	8002170 <rf_write_reg>
	int tmp = rf_read_reg_byte(NRF_REG_CONFIG);
	if ((tmp & (NRF_CONFIG_PRIM_RX)) != (NRF_CONFIG_PRIM_RX)) {
		tmp |= (NRF_CONFIG_PRIM_RX);
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
	}
}
 80023dc:	b003      	add	sp, #12
 80023de:	f85d fb04 	ldr.w	pc, [sp], #4
 80023e2:	bf00      	nop
	...

080023f0 <rf_power_up>:
int rf_get_address_width(void) {
	return rf_read_reg_byte(NRF_REG_SETUP_AW) + 2;
}

// Turn on radio
void rf_power_up(void) {
 80023f0:	b500      	push	{lr}
 80023f2:	b083      	sub	sp, #12
	spi_sw_end();
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 80023f4:	2000      	movs	r0, #0
 80023f6:	2201      	movs	r2, #1
 80023f8:	f10d 0107 	add.w	r1, sp, #7
 80023fc:	f7ff fea0 	bl	8002140 <rf_read_reg>
	return result;
 8002400:	f89d 3007 	ldrb.w	r3, [sp, #7]
}

// Turn on radio
void rf_power_up(void) {
	int tmp = rf_read_reg_byte(NRF_REG_CONFIG);
	if ((tmp & (NRF_CONFIG_PWR_UP)) != (NRF_CONFIG_PWR_UP)) {
 8002404:	f003 0202 	and.w	r2, r3, #2
 8002408:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800240c:	b942      	cbnz	r2, 8002420 <rf_power_up+0x30>
		tmp |= (NRF_CONFIG_PWR_UP);
 800240e:	f043 0302 	orr.w	r3, r3, #2
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002412:	f10d 0107 	add.w	r1, sp, #7
 8002416:	2201      	movs	r2, #1
 8002418:	f88d 3007 	strb.w	r3, [sp, #7]
 800241c:	f7ff fea8 	bl	8002170 <rf_write_reg>
	int tmp = rf_read_reg_byte(NRF_REG_CONFIG);
	if ((tmp & (NRF_CONFIG_PWR_UP)) != (NRF_CONFIG_PWR_UP)) {
		tmp |= (NRF_CONFIG_PWR_UP);
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
	}
}
 8002420:	b003      	add	sp, #12
 8002422:	f85d fb04 	ldr.w	pc, [sp], #4
 8002426:	bf00      	nop
	...

08002430 <rf_status>:
	spi_sw_transfer(&w, 0, 1);
	spi_sw_end();
	return w;
}

int rf_status(void) {
 8002430:	b510      	push	{r4, lr}
 8002432:	b082      	sub	sp, #8
	char w = NRF_CMD_NOP;
 8002434:	23ff      	movs	r3, #255	; 0xff
 8002436:	ac02      	add	r4, sp, #8
 8002438:	f804 3d01 	strb.w	r3, [r4, #-1]!
	spi_sw_begin();
 800243c:	f7ff fde8 	bl	8002010 <spi_sw_begin>
	spi_sw_transfer(&w, &w, 1);
 8002440:	4620      	mov	r0, r4
 8002442:	4621      	mov	r1, r4
 8002444:	2201      	movs	r2, #1
 8002446:	f7ff fdfb 	bl	8002040 <spi_sw_transfer>
	spi_sw_end();
 800244a:	f7ff fdc9 	bl	8001fe0 <spi_sw_end>
	return w;
}
 800244e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002452:	b002      	add	sp, #8
 8002454:	bd10      	pop	{r4, pc}
 8002456:	bf00      	nop
	...

08002460 <rf_flush_all>:
	spi_sw_begin();
	spi_sw_transfer(0, &cmd, 1);
	spi_sw_end();
}

void rf_flush_all(void) {
 8002460:	b510      	push	{r4, lr}
 8002462:	b082      	sub	sp, #8
	spi_sw_transfer(0, &cmd, 1);
	spi_sw_end();
}

void rf_flush_rx(void) {
	char cmd = NRF_CMD_FLUSH_RX;
 8002464:	23e2      	movs	r3, #226	; 0xe2
 8002466:	ac02      	add	r4, sp, #8
 8002468:	f804 3d01 	strb.w	r3, [r4, #-1]!
	spi_sw_begin();
 800246c:	f7ff fdd0 	bl	8002010 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 8002470:	4621      	mov	r1, r4
 8002472:	2000      	movs	r0, #0
 8002474:	2201      	movs	r2, #1
 8002476:	f7ff fde3 	bl	8002040 <spi_sw_transfer>
	spi_sw_end();
 800247a:	f7ff fdb1 	bl	8001fe0 <spi_sw_end>
		rf_write_reg_byte(NRF_REG_FEATURE, tmp);	//Update if we need
	}
}

void rf_flush_tx(void) {
	char cmd = NRF_CMD_FLUSH_TX;
 800247e:	23e1      	movs	r3, #225	; 0xe1
 8002480:	f88d 3007 	strb.w	r3, [sp, #7]
	spi_sw_begin();
 8002484:	f7ff fdc4 	bl	8002010 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 8002488:	4621      	mov	r1, r4
 800248a:	2000      	movs	r0, #0
 800248c:	2201      	movs	r2, #1
 800248e:	f7ff fdd7 	bl	8002040 <spi_sw_transfer>
	spi_sw_end();
 8002492:	f7ff fda5 	bl	8001fe0 <spi_sw_end>
}

void rf_flush_all(void) {
	rf_flush_rx();
	rf_flush_tx();
}
 8002496:	b002      	add	sp, #8
 8002498:	bd10      	pop	{r4, pc}
 800249a:	bf00      	nop
 800249c:	0000      	movs	r0, r0
	...

080024a0 <tx_thread>:
	}

	return res;
}

static THD_FUNCTION(tx_thread, arg) {
 80024a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024a4:	b085      	sub	sp, #20
	(void)arg;

	chRegSetThreadName("Nrf TX");
	tx_running = true;
 80024a6:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 800266c <tx_thread+0x1cc>
 80024aa:	2301      	movs	r3, #1

	for(;;) {
		if (tx_stop) {
 80024ac:	4e64      	ldr	r6, [pc, #400]	; (8002640 <tx_thread+0x1a0>)
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80024ae:	4a65      	ldr	r2, [pc, #404]	; (8002644 <tx_thread+0x1a4>)

static THD_FUNCTION(tx_thread, arg) {
	(void)arg;

	chRegSetThreadName("Nrf TX");
	tx_running = true;
 80024b0:	f88a 3000 	strb.w	r3, [sl]
 80024b4:	6992      	ldr	r2, [r2, #24]
 80024b6:	4964      	ldr	r1, [pc, #400]	; (8002648 <tx_thread+0x1a8>)

	for(;;) {
		if (tx_stop) {
 80024b8:	7833      	ldrb	r3, [r6, #0]
	}

	return res;
}

static THD_FUNCTION(tx_thread, arg) {
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6191      	str	r1, [r2, #24]

	chRegSetThreadName("Nrf TX");
	tx_running = true;

	for(;;) {
		if (tx_stop) {
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d179      	bne.n	80025b6 <tx_thread+0x116>
 80024c2:	4d62      	ldr	r5, [pc, #392]	; (800264c <tx_thread+0x1ac>)
 80024c4:	e005      	b.n	80024d2 <tx_thread+0x32>
			pl[index++] = 0x55;
			rf_tx_wrapper((char*)pl, index);
			nosend_cnt = 0;
		}

		chThdSleepMilliseconds(1);
 80024c6:	2002      	movs	r0, #2
 80024c8:	f7fe fef2 	bl	80012b0 <chThdSleep>

	chRegSetThreadName("Nrf TX");
	tx_running = true;

	for(;;) {
		if (tx_stop) {
 80024cc:	7833      	ldrb	r3, [r6, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d171      	bne.n	80025b6 <tx_thread+0x116>
			tx_running = false;
			return;
		}

		nosend_cnt++;
 80024d2:	682b      	ldr	r3, [r5, #0]
 80024d4:	3301      	adds	r3, #1

		if (nosend_cnt >= ALIVE_INTERVAL && !pairing_active) {
 80024d6:	2b31      	cmp	r3, #49	; 0x31
		if (tx_stop) {
			tx_running = false;
			return;
		}

		nosend_cnt++;
 80024d8:	602b      	str	r3, [r5, #0]

		if (nosend_cnt >= ALIVE_INTERVAL && !pairing_active) {
 80024da:	ddf4      	ble.n	80024c6 <tx_thread+0x26>
 80024dc:	4b5c      	ldr	r3, [pc, #368]	; (8002650 <tx_thread+0x1b0>)
 80024de:	781c      	ldrb	r4, [r3, #0]
 80024e0:	2c00      	cmp	r4, #0
 80024e2:	d1f0      	bne.n	80024c6 <tx_thread+0x26>
	char buffer[len + 2];
	unsigned short crc = crc16((unsigned char*)data, len);

	memcpy(buffer, data, len);
	buffer[len] = (char)(crc >> 8);
	buffer[len + 1] = (char)(crc & 0xFF);
 80024e4:	2350      	movs	r3, #80	; 0x50
 80024e6:	73bb      	strb	r3, [r7, #14]

	return rfhelp_send_data(buffer, len + 2, nrf_conf.send_crc_ack);
 80024e8:	4b5a      	ldr	r3, [pc, #360]	; (8002654 <tx_thread+0x1b4>)
 */
int rfhelp_send_data_crc(char *data, int len) {
	char buffer[len + 2];
	unsigned short crc = crc16((unsigned char*)data, len);

	memcpy(buffer, data, len);
 80024ea:	2155      	movs	r1, #85	; 0x55
	buffer[len] = (char)(crc >> 8);
 80024ec:	220a      	movs	r2, #10
 */
int rfhelp_send_data(char *data, int len, char ack) {
	int timeout = 60;
	int retval = -1;

	chMtxLock(&rf_mutex);
 80024ee:	485a      	ldr	r0, [pc, #360]	; (8002658 <tx_thread+0x1b8>)

	memcpy(buffer, data, len);
	buffer[len] = (char)(crc >> 8);
	buffer[len + 1] = (char)(crc & 0xFF);

	return rfhelp_send_data(buffer, len + 2, nrf_conf.send_crc_ack);
 80024f0:	f893 9009 	ldrb.w	r9, [r3, #9]
 */
int rfhelp_send_data_crc(char *data, int len) {
	char buffer[len + 2];
	unsigned short crc = crc16((unsigned char*)data, len);

	memcpy(buffer, data, len);
 80024f4:	7339      	strb	r1, [r7, #12]
	buffer[len] = (char)(crc >> 8);
 80024f6:	737a      	strb	r2, [r7, #13]
 */
int rfhelp_send_data(char *data, int len, char ack) {
	int timeout = 60;
	int retval = -1;

	chMtxLock(&rf_mutex);
 80024f8:	f7fe fe02 	bl	8001100 <chMtxLock>
	spi_sw_end();
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 80024fc:	2201      	movs	r2, #1
 80024fe:	f107 010a 	add.w	r1, r7, #10
 8002502:	4620      	mov	r0, r4
 8002504:	f7ff fe1c 	bl	8002140 <rf_read_reg>
	return result;
 8002508:	7abb      	ldrb	r3, [r7, #10]
 800250a:	f8c7 d004 	str.w	sp, [r7, #4]
}

// Set up radio for transmission
void rf_mode_tx(void) {
	int tmp = rf_read_reg_byte(NRF_REG_CONFIG);
	if (tmp & (NRF_CONFIG_PRIM_RX)) {
 800250e:	07da      	lsls	r2, r3, #31
 8002510:	d509      	bpl.n	8002526 <tx_thread+0x86>
		tmp &= ~(NRF_CONFIG_PRIM_RX);
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
 8002512:	f107 0110 	add.w	r1, r7, #16

// Set up radio for transmission
void rf_mode_tx(void) {
	int tmp = rf_read_reg_byte(NRF_REG_CONFIG);
	if (tmp & (NRF_CONFIG_PRIM_RX)) {
		tmp &= ~(NRF_CONFIG_PRIM_RX);
 8002516:	f023 0301 	bic.w	r3, r3, #1
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
 800251a:	f801 3d08 	strb.w	r3, [r1, #-8]!
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 800251e:	4620      	mov	r0, r4
 8002520:	2201      	movs	r2, #1
 8002522:	f7ff fe25 	bl	8002170 <rf_write_reg>
 8002526:	2370      	movs	r3, #112	; 0x70
 8002528:	f107 0110 	add.w	r1, r7, #16
	rf_mode_tx();
	rf_clear_irq();
	rf_flush_all();

	// Pipe0-address and tx-address must be equal for ack to work.
	if (!tx_pipe0_addr_eq && ack) {
 800252c:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8002670 <tx_thread+0x1d0>
 8002530:	f801 3d07 	strb.w	r3, [r1, #-7]!
 8002534:	2007      	movs	r0, #7
 8002536:	2201      	movs	r2, #1
 8002538:	f7ff fe1a 	bl	8002170 <rf_write_reg>

	chMtxLock(&rf_mutex);

	rf_mode_tx();
	rf_clear_irq();
	rf_flush_all();
 800253c:	f7ff ff90 	bl	8002460 <rf_flush_all>

	// Pipe0-address and tx-address must be equal for ack to work.
	if (!tx_pipe0_addr_eq && ack) {
 8002540:	f898 3000 	ldrb.w	r3, [r8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d13d      	bne.n	80025c4 <tx_thread+0x124>
 8002548:	f1b9 0f00 	cmp.w	r9, #0
 800254c:	d171      	bne.n	8002632 <tx_thread+0x192>

}

// Write payload for transmission without requesting acknowledge
void rf_write_tx_payload_no_ack(const char *data, int length) {
	char cmd = NRF_CMD_WRITE_TX_PAYLOAD_NO_ACK;
 800254e:	23b0      	movs	r3, #176	; 0xb0
 8002550:	72bb      	strb	r3, [r7, #10]
	spi_sw_begin();
 8002552:	f7ff fd5d 	bl	8002010 <spi_sw_begin>
	spi_sw_transfer(0, &cmd, 1);
 8002556:	f107 010a 	add.w	r1, r7, #10
 800255a:	2000      	movs	r0, #0
 800255c:	2201      	movs	r2, #1
 800255e:	f7ff fd6f 	bl	8002040 <spi_sw_transfer>
	spi_sw_transfer(0, data, length);
 8002562:	2000      	movs	r0, #0
 8002564:	f107 010c 	add.w	r1, r7, #12
 8002568:	2203      	movs	r2, #3
 800256a:	f7ff fd69 	bl	8002040 <spi_sw_transfer>
	}

	return res;
}

static THD_FUNCTION(tx_thread, arg) {
 800256e:	243c      	movs	r4, #60	; 0x3c
	spi_sw_end();
 8002570:	f7ff fd36 	bl	8001fe0 <spi_sw_end>
 8002574:	e004      	b.n	8002580 <tx_thread+0xe0>
		timeout--;

		if (NRF_STATUS_GET_TX_DS(s)) {
			retval = 0;
			break;
		} else if (NRF_STATUS_GET_MAX_RT(s)) {
 8002576:	f01b 0f10 	tst.w	fp, #16
 800257a:	d128      	bne.n	80025ce <tx_thread+0x12e>
			rf_clear_maxrt_irq();
			retval = -1;
			break;
		} else if (timeout == 0) {
 800257c:	3c01      	subs	r4, #1
 800257e:	d055      	beq.n	800262c <tx_thread+0x18c>
	} else {
		rf_write_tx_payload_no_ack(data, len);
	}

	for(;;) {
		int s = rf_status();
 8002580:	f7ff ff56 	bl	8002430 <rf_status>
 8002584:	4683      	mov	fp, r0

		chThdSleepMilliseconds(1);
 8002586:	2002      	movs	r0, #2
 8002588:	f7fe fe92 	bl	80012b0 <chThdSleep>
		timeout--;

		if (NRF_STATUS_GET_TX_DS(s)) {
 800258c:	f01b 0f20 	tst.w	fp, #32
 8002590:	d0f1      	beq.n	8002576 <tx_thread+0xd6>
			break;
		}
	}

	// Restore pipe0 address
	if (!tx_pipe0_addr_eq && ack) {
 8002592:	f898 4000 	ldrb.w	r4, [r8]
 8002596:	b914      	cbnz	r4, 800259e <tx_thread+0xfe>
 8002598:	f1b9 0f00 	cmp.w	r9, #0
 800259c:	d132      	bne.n	8002604 <tx_thread+0x164>
		rf_set_rx_addr(0, rx_addr[0], address_length);
	}

	rf_mode_rx();
 800259e:	f7ff ff07 	bl	80023b0 <rf_mode_rx>

	chMtxUnlock(&rf_mutex);
 80025a2:	482d      	ldr	r0, [pc, #180]	; (8002658 <tx_thread+0x1b8>)
 80025a4:	f7fe feac 	bl	8001300 <chMtxUnlock>

static int rf_tx_wrapper(char *data, int len) {
	int res = rfhelp_send_data_crc(data, len);

	if (res == 0) {
		nrf_restart_tx_time = NRF_RESTART_TIMEOUT;
 80025a8:	4b2c      	ldr	r3, [pc, #176]	; (800265c <tx_thread+0x1bc>)
 80025aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025ae:	f8d7 d004 	ldr.w	sp, [r7, #4]
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e023      	b.n	80025fe <tx_thread+0x15e>
	chRegSetThreadName("Nrf TX");
	tx_running = true;

	for(;;) {
		if (tx_stop) {
			tx_running = false;
 80025b6:	2300      	movs	r3, #0
		}

		chThdSleepMilliseconds(1);
	}

}
 80025b8:	3714      	adds	r7, #20
	chRegSetThreadName("Nrf TX");
	tx_running = true;

	for(;;) {
		if (tx_stop) {
			tx_running = false;
 80025ba:	f88a 3000 	strb.w	r3, [sl]
		}

		chThdSleepMilliseconds(1);
	}

}
 80025be:	46bd      	mov	sp, r7
 80025c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	// Pipe0-address and tx-address must be equal for ack to work.
	if (!tx_pipe0_addr_eq && ack) {
		rf_set_rx_addr(0, tx_addr, address_length);
	}

	if (ack) {
 80025c4:	f1b9 0f00 	cmp.w	r9, #0
 80025c8:	d0c1      	beq.n	800254e <tx_thread+0xae>
void rf_set_tx_addr(const char *address, int addr_len) {
	rf_write_reg(NRF_REG_TX_ADDR, address, addr_len);
}

void rf_write_tx_payload(const char *data, int length) {
	char cmd = NRF_CMD_WRITE_TX_PAYLOAD;
 80025ca:	23a0      	movs	r3, #160	; 0xa0
 80025cc:	e7c0      	b.n	8002550 <tx_thread+0xb0>
 80025ce:	f107 0110 	add.w	r1, r7, #16
 80025d2:	2310      	movs	r3, #16
 80025d4:	f801 3d05 	strb.w	r3, [r1, #-5]!
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 80025d8:	2007      	movs	r0, #7
 80025da:	2201      	movs	r2, #1
 80025dc:	f7ff fdc8 	bl	8002170 <rf_write_reg>
		if (NRF_STATUS_GET_TX_DS(s)) {
			retval = 0;
			break;
		} else if (NRF_STATUS_GET_MAX_RT(s)) {
			rf_clear_maxrt_irq();
			retval = -1;
 80025e0:	f04f 34ff 	mov.w	r4, #4294967295
			break;
		}
	}

	// Restore pipe0 address
	if (!tx_pipe0_addr_eq && ack) {
 80025e4:	f898 3000 	ldrb.w	r3, [r8]
 80025e8:	b913      	cbnz	r3, 80025f0 <tx_thread+0x150>
 80025ea:	f1b9 0f00 	cmp.w	r9, #0
 80025ee:	d109      	bne.n	8002604 <tx_thread+0x164>
		rf_set_rx_addr(0, rx_addr[0], address_length);
	}

	rf_mode_rx();
 80025f0:	f7ff fede 	bl	80023b0 <rf_mode_rx>

	chMtxUnlock(&rf_mutex);
 80025f4:	4818      	ldr	r0, [pc, #96]	; (8002658 <tx_thread+0x1b8>)
 80025f6:	f7fe fe83 	bl	8001300 <chMtxUnlock>
 80025fa:	f8d7 d004 	ldr.w	sp, [r7, #4]
		if (nosend_cnt >= ALIVE_INTERVAL && !pairing_active) {
			uint8_t pl[2];
			int32_t index = 0;
			pl[index++] = 0x55;
			rf_tx_wrapper((char*)pl, index);
			nosend_cnt = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	602b      	str	r3, [r5, #0]
 8002602:	e760      	b.n	80024c6 <tx_thread+0x26>
		}
	}

	// Restore pipe0 address
	if (!tx_pipe0_addr_eq && ack) {
		rf_set_rx_addr(0, rx_addr[0], address_length);
 8002604:	4b16      	ldr	r3, [pc, #88]	; (8002660 <tx_thread+0x1c0>)
		rf_write_reg_byte(NRF_REG_SETUP_RETR, reg_new);	// Update if we need
	}
}

void rf_set_rx_addr(int pipe, const char *address, int addr_len) {
	rf_write_reg(NRF_REG_RX_ADDR_P0 + pipe, address, addr_len);
 8002606:	200a      	movs	r0, #10
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4916      	ldr	r1, [pc, #88]	; (8002664 <tx_thread+0x1c4>)
 800260c:	f7ff fdb0 	bl	8002170 <rf_write_reg>
	}

	rf_mode_rx();
 8002610:	f7ff fece 	bl	80023b0 <rf_mode_rx>

	chMtxUnlock(&rf_mutex);
 8002614:	4810      	ldr	r0, [pc, #64]	; (8002658 <tx_thread+0x1b8>)
 8002616:	f7fe fe73 	bl	8001300 <chMtxUnlock>
 800261a:	f8d7 d004 	ldr.w	sp, [r7, #4]
}

static int rf_tx_wrapper(char *data, int len) {
	int res = rfhelp_send_data_crc(data, len);

	if (res == 0) {
 800261e:	2c00      	cmp	r4, #0
 8002620:	d1ed      	bne.n	80025fe <tx_thread+0x15e>
		nrf_restart_tx_time = NRF_RESTART_TIMEOUT;
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <tx_thread+0x1bc>)
 8002624:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e7e8      	b.n	80025fe <tx_thread+0x15e>
		} else if (NRF_STATUS_GET_MAX_RT(s)) {
			rf_clear_maxrt_irq();
			retval = -1;
			break;
		} else if (timeout == 0) {
			retval = -2;
 800262c:	f06f 0401 	mvn.w	r4, #1
 8002630:	e7d8      	b.n	80025e4 <tx_thread+0x144>
	rf_clear_irq();
	rf_flush_all();

	// Pipe0-address and tx-address must be equal for ack to work.
	if (!tx_pipe0_addr_eq && ack) {
		rf_set_rx_addr(0, tx_addr, address_length);
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <tx_thread+0x1c0>)
 8002634:	200a      	movs	r0, #10
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	490b      	ldr	r1, [pc, #44]	; (8002668 <tx_thread+0x1c8>)
 800263a:	f7ff fd99 	bl	8002170 <rf_write_reg>
 800263e:	e7c4      	b.n	80025ca <tx_thread+0x12a>
 8002640:	20000819 	.word	0x20000819
 8002644:	20001960 	.word	0x20001960
 8002648:	08004220 	.word	0x08004220
 800264c:	20000d74 	.word	0x20000d74
 8002650:	20001676 	.word	0x20001676
 8002654:	20000904 	.word	0x20000904
 8002658:	20000b90 	.word	0x20000b90
 800265c:	2000084c 	.word	0x2000084c
 8002660:	20001670 	.word	0x20001670
 8002664:	20001650 	.word	0x20001650
 8002668:	20000d6c 	.word	0x20000d6c
 800266c:	20000d78 	.word	0x20000d78
 8002670:	20000d68 	.word	0x20000d68
	...

08002680 <rfhelp_restart>:
}

/**
 * Re-init the rf chip
 */
void rfhelp_restart(void) {
 8002680:	b5f0      	push	{r4, r5, r6, r7, lr}
	chMtxLock(&rf_mutex);
 8002682:	48a1      	ldr	r0, [pc, #644]	; (8002908 <rfhelp_restart+0x288>)
}

/**
 * Re-init the rf chip
 */
void rfhelp_restart(void) {
 8002684:	b085      	sub	sp, #20
	chMtxLock(&rf_mutex);
 8002686:	f7fe fd3b 	bl	8001100 <chMtxLock>
	spi_sw_end();
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 800268a:	f10d 010f 	add.w	r1, sp, #15
 800268e:	2000      	movs	r0, #0
 8002690:	2201      	movs	r2, #1
 8002692:	f7ff fd55 	bl	8002140 <rf_read_reg>
	return result;
 8002696:	f89d 300f 	ldrb.w	r3, [sp, #15]
}

// Turn off radio
void rf_power_down(void) {
	int tmp = rf_read_reg_byte(NRF_REG_CONFIG);
	if (tmp & (NRF_CONFIG_PWR_UP)) {
 800269a:	079c      	lsls	r4, r3, #30
 800269c:	d508      	bpl.n	80026b0 <rfhelp_restart+0x30>
		tmp &= ~(NRF_CONFIG_PWR_UP);
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
 800269e:	a904      	add	r1, sp, #16

// Turn off radio
void rf_power_down(void) {
	int tmp = rf_read_reg_byte(NRF_REG_CONFIG);
	if (tmp & (NRF_CONFIG_PWR_UP)) {
		tmp &= ~(NRF_CONFIG_PWR_UP);
 80026a0:	f023 0302 	bic.w	r3, r3, #2
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
 80026a4:	f801 3d0f 	strb.w	r3, [r1, #-15]!
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 80026a8:	2000      	movs	r0, #0
 80026aa:	2201      	movs	r2, #1
 80026ac:	f7ff fd60 	bl	8002170 <rf_write_reg>
 80026b0:	2500      	movs	r5, #0
 80026b2:	a904      	add	r1, sp, #16
 80026b4:	f801 5d0e 	strb.w	r5, [r1, #-14]!
 80026b8:	2002      	movs	r0, #2
 80026ba:	2201      	movs	r2, #1
 80026bc:	f7ff fd58 	bl	8002170 <rf_write_reg>
	// TODO: make this file consistent with multiple
	// rx_addr and tx_addr, and the rest in general.
	rf_write_reg_byte(NRF_REG_EN_RXADDR, 0);
	rf_write_reg_byte(NRF_REG_DYNPD, 0);

	rf_set_crc_type(nrf_conf.crc_type);
 80026c0:	4c92      	ldr	r4, [pc, #584]	; (800290c <rfhelp_restart+0x28c>)
 80026c2:	a904      	add	r1, sp, #16
 80026c4:	f801 5d0d 	strb.w	r5, [r1, #-13]!
 80026c8:	201c      	movs	r0, #28
 80026ca:	2201      	movs	r2, #1
 80026cc:	f7ff fd50 	bl	8002170 <rf_write_reg>
	spi_sw_end();
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 80026d0:	4628      	mov	r0, r5
 80026d2:	2201      	movs	r2, #1
 80026d4:	78a5      	ldrb	r5, [r4, #2]
 80026d6:	f10d 010f 	add.w	r1, sp, #15
 80026da:	f7ff fd31 	bl	8002140 <rf_read_reg>
	return result;
 80026de:	f89d 200f 	ldrb.w	r2, [sp, #15]
	char reg_old = rf_read_reg_byte(NRF_REG_CONFIG);
	char reg_new = reg_old;

	reg_new &= ~(NRF_CONFIG_CRCO | NRF_CONFIG_EN_CRC);

	switch (crc_type) {
 80026e2:	2d01      	cmp	r5, #1

void rf_set_crc_type(NRF_CRC crc_type) {
	char reg_old = rf_read_reg_byte(NRF_REG_CONFIG);
	char reg_new = reg_old;

	reg_new &= ~(NRF_CONFIG_CRCO | NRF_CONFIG_EN_CRC);
 80026e4:	f002 03f3 	and.w	r3, r2, #243	; 0xf3

	switch (crc_type) {
 80026e8:	f000 8107 	beq.w	80028fa <rfhelp_restart+0x27a>
 80026ec:	2d02      	cmp	r5, #2
 80026ee:	f000 80fe 	beq.w	80028ee <rfhelp_restart+0x26e>

	default:
		break;
	}

	if (reg_old != reg_new) {
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d006      	beq.n	8002704 <rfhelp_restart+0x84>
 80026f6:	a904      	add	r1, sp, #16
 80026f8:	f801 3d0c 	strb.w	r3, [r1, #-12]!
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 80026fc:	2000      	movs	r0, #0
 80026fe:	2201      	movs	r2, #1
 8002700:	f7ff fd36 	bl	8002170 <rf_write_reg>
	spi_sw_end();
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8002704:	2201      	movs	r2, #1
 8002706:	2004      	movs	r0, #4
 8002708:	f10d 010f 	add.w	r1, sp, #15
	rf_set_retr_retries(nrf_conf.retries);
 800270c:	7925      	ldrb	r5, [r4, #4]
 800270e:	f7ff fd17 	bl	8002140 <rf_read_reg>
	return result;
 8002712:	f89d 200f 	ldrb.w	r2, [sp, #15]
void rf_set_retr_retries(int retries) {
	char reg_old = rf_read_reg_byte(NRF_REG_SETUP_RETR);
	char reg_new = reg_old;

	reg_new &= ~NRF_SETUP_RETR_ARC;
	reg_new |= (char)retries & 0xF;
 8002716:	f005 050f 	and.w	r5, r5, #15

void rf_set_retr_retries(int retries) {
	char reg_old = rf_read_reg_byte(NRF_REG_SETUP_RETR);
	char reg_new = reg_old;

	reg_new &= ~NRF_SETUP_RETR_ARC;
 800271a:	f022 030f 	bic.w	r3, r2, #15
	reg_new |= (char)retries & 0xF;
 800271e:	432b      	orrs	r3, r5

	if (reg_old != reg_new) {
 8002720:	429a      	cmp	r2, r3
 8002722:	d006      	beq.n	8002732 <rfhelp_restart+0xb2>
 8002724:	a904      	add	r1, sp, #16
 8002726:	f801 3d0b 	strb.w	r3, [r1, #-11]!
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 800272a:	2004      	movs	r0, #4
 800272c:	2201      	movs	r2, #1
 800272e:	f7ff fd1f 	bl	8002170 <rf_write_reg>
	spi_sw_end();
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8002732:	2201      	movs	r2, #1
 8002734:	2004      	movs	r0, #4
 8002736:	f10d 010f 	add.w	r1, sp, #15
	rf_set_retr_delay(nrf_conf.retry_delay);
 800273a:	78e5      	ldrb	r5, [r4, #3]
 800273c:	f7ff fd00 	bl	8002140 <rf_read_reg>
	return result;
 8002740:	f89d 200f 	ldrb.w	r2, [sp, #15]

void rf_set_retr_delay(NRF_RETR_DELAY delay) {
	char reg_old = rf_read_reg_byte(NRF_REG_SETUP_RETR);
	char reg_new = reg_old;

	reg_new &= ~NRF_SETUP_RETR_ARD;
 8002744:	f002 030f 	and.w	r3, r2, #15
	reg_new |= ((char)delay & 0xF) << 4;
 8002748:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800274c:	b2db      	uxtb	r3, r3

	if (reg_old != reg_new) {
 800274e:	429a      	cmp	r2, r3
 8002750:	d006      	beq.n	8002760 <rfhelp_restart+0xe0>
 8002752:	a904      	add	r1, sp, #16
 8002754:	f801 3d0a 	strb.w	r3, [r1, #-10]!
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002758:	2004      	movs	r0, #4
 800275a:	2201      	movs	r2, #1
 800275c:	f7ff fd08 	bl	8002170 <rf_write_reg>
	spi_sw_end();
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8002760:	2201      	movs	r2, #1
 8002762:	2006      	movs	r0, #6
 8002764:	f10d 010f 	add.w	r1, sp, #15
	rf_set_power(nrf_conf.power);
 8002768:	7865      	ldrb	r5, [r4, #1]
 800276a:	f7ff fce9 	bl	8002140 <rf_read_reg>
	return result;
 800276e:	f89d 200f 	ldrb.w	r2, [sp, #15]
	reg_new &= ~(NRF_RF_SETUP_RF_PWR | 1);
	reg_new |= (char)power << 1;

	// In case this is a SI24R1 chip and the highest power is requested, set
	// the first bit to get 7dBm output.
	if (power == NRF_POWER_0DBM) {
 8002772:	2d03      	cmp	r5, #3

void rf_set_power(NRF_POWER power) {
	char reg_old = rf_read_reg_byte(NRF_REG_RF_SETUP);
	char reg_new = reg_old;

	reg_new &= ~(NRF_RF_SETUP_RF_PWR | 1);
 8002774:	f022 0307 	bic.w	r3, r2, #7
	reg_new |= (char)power << 1;
 8002778:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 800277c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe

	// In case this is a SI24R1 chip and the highest power is requested, set
	// the first bit to get 7dBm output.
	if (power == NRF_POWER_0DBM) {
		reg_new |= 1;
 8002780:	bf08      	it	eq
 8002782:	f043 0301 	orreq.w	r3, r3, #1
	}

	if (reg_old != reg_new) {
 8002786:	429a      	cmp	r2, r3
 8002788:	d006      	beq.n	8002798 <rfhelp_restart+0x118>
 800278a:	a904      	add	r1, sp, #16
 800278c:	f801 3d09 	strb.w	r3, [r1, #-9]!
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002790:	2006      	movs	r0, #6
 8002792:	2201      	movs	r2, #1
 8002794:	f7ff fcec 	bl	8002170 <rf_write_reg>
	spi_sw_end();
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8002798:	2201      	movs	r2, #1
 800279a:	2006      	movs	r0, #6
 800279c:	f10d 010f 	add.w	r1, sp, #15
	rf_set_speed(nrf_conf.speed);
 80027a0:	7825      	ldrb	r5, [r4, #0]
 80027a2:	f7ff fccd 	bl	8002140 <rf_read_reg>
	return result;
 80027a6:	f89d 200f 	ldrb.w	r2, [sp, #15]

void rf_set_speed(NRF_SPEED speed) {
	char reg_old = rf_read_reg_byte(NRF_REG_RF_SETUP);
	char reg_new = reg_old;

	reg_new &= ~(NRF_RF_SETUP_RF_DR_LOW | NRF_RF_SETUP_RF_DR_HIGH);
 80027aa:	f002 03d7 	and.w	r3, r2, #215	; 0xd7

	switch (speed) {
 80027ae:	2d00      	cmp	r5, #0
 80027b0:	f000 80a6 	beq.w	8002900 <rfhelp_restart+0x280>
 80027b4:	2d02      	cmp	r5, #2
 80027b6:	f000 809d 	beq.w	80028f4 <rfhelp_restart+0x274>

	default:
		break;
	}

	if (reg_old != reg_new) {
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d006      	beq.n	80027cc <rfhelp_restart+0x14c>
 80027be:	a904      	add	r1, sp, #16
 80027c0:	f801 3d08 	strb.w	r3, [r1, #-8]!
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 80027c4:	2006      	movs	r0, #6
 80027c6:	2201      	movs	r2, #1
 80027c8:	f7ff fcd2 	bl	8002170 <rf_write_reg>
 80027cc:	2501      	movs	r5, #1
 80027ce:	a904      	add	r1, sp, #16
 80027d0:	f801 5d07 	strb.w	r5, [r1, #-7]!
 80027d4:	462a      	mov	r2, r5
 80027d6:	2003      	movs	r0, #3
 80027d8:	f7ff fcca 	bl	8002170 <rf_write_reg>
	rf_set_address_width(NRF_AW_3); // Always use 3 byte address
	rf_set_frequency(2400 + (unsigned int)nrf_conf.channel);
 80027dc:	7963      	ldrb	r3, [r4, #5]
 80027de:	a904      	add	r1, sp, #16

}

// Set radio frequency in MHz (2400 to 2525 allowed)
void rf_set_frequency(int freq) {
	rf_write_reg_byte(NRF_REG_RF_CH, (freq - 2400) & 0x7F);
 80027e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027e4:	f801 3d06 	strb.w	r3, [r1, #-6]!
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 80027e8:	462a      	mov	r2, r5
 80027ea:	2005      	movs	r0, #5
 80027ec:	f7ff fcc0 	bl	8002170 <rf_write_reg>
	spi_sw_end();
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 80027f0:	462a      	mov	r2, r5
 80027f2:	201d      	movs	r0, #29
 80027f4:	f10d 010f 	add.w	r1, sp, #15
 80027f8:	f7ff fca2 	bl	8002140 <rf_read_reg>
	return result;
 80027fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}

// Enabled various features
void rf_enable_features(int features) {
	int tmp = rf_read_reg_byte(NRF_REG_FEATURE);
	if ((tmp & (features)) != (features)) {
 8002800:	f003 0205 	and.w	r2, r3, #5
 8002804:	2a05      	cmp	r2, #5
 8002806:	d008      	beq.n	800281a <rfhelp_restart+0x19a>
 8002808:	a904      	add	r1, sp, #16
		tmp |= (features);
 800280a:	f043 0305 	orr.w	r3, r3, #5
 800280e:	f801 3d05 	strb.w	r3, [r1, #-5]!
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002812:	462a      	mov	r2, r5
 8002814:	201d      	movs	r0, #29
 8002816:	f7ff fcab 	bl	8002170 <rf_write_reg>
	spi_sw_end();
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 800281a:	2001      	movs	r0, #1
 800281c:	4602      	mov	r2, r0
 800281e:	f10d 010f 	add.w	r1, sp, #15
 8002822:	f7ff fc8d 	bl	8002140 <rf_read_reg>
	return result;
 8002826:	f89d 300f 	ldrb.w	r3, [sp, #15]
}

// Enable autoack on pipe
void rf_enable_pipe_autoack(int pipes) {
	int tmp = rf_read_reg_byte(NRF_REG_EN_AA);
	if ((tmp & (pipes)) != (pipes)) {
 800282a:	07d8      	lsls	r0, r3, #31
 800282c:	d408      	bmi.n	8002840 <rfhelp_restart+0x1c0>
 800282e:	a904      	add	r1, sp, #16
		tmp |= (pipes);
 8002830:	f043 0301 	orr.w	r3, r3, #1
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002834:	2001      	movs	r0, #1
 8002836:	f801 3d04 	strb.w	r3, [r1, #-4]!
 800283a:	4602      	mov	r2, r0
 800283c:	f7ff fc98 	bl	8002170 <rf_write_reg>
	spi_sw_end();
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8002840:	f10d 010f 	add.w	r1, sp, #15
 8002844:	2002      	movs	r0, #2
 8002846:	2201      	movs	r2, #1
 8002848:	f7ff fc7a 	bl	8002140 <rf_read_reg>
	return result;
 800284c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}

// Enable address on pipe
void rf_enable_pipe_address(int pipes) {
	int tmp = rf_read_reg_byte(NRF_REG_EN_RXADDR);
	if ((tmp & (pipes)) != (pipes)) {
 8002850:	07d9      	lsls	r1, r3, #31
 8002852:	d408      	bmi.n	8002866 <rfhelp_restart+0x1e6>
 8002854:	a904      	add	r1, sp, #16
		tmp |= (pipes);
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	f801 3d03 	strb.w	r3, [r1, #-3]!
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 800285e:	2002      	movs	r0, #2
 8002860:	2201      	movs	r2, #1
 8002862:	f7ff fc85 	bl	8002170 <rf_write_reg>
	spi_sw_end();
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8002866:	2201      	movs	r2, #1
 8002868:	201c      	movs	r0, #28
 800286a:	f10d 010f 	add.w	r1, sp, #15
 800286e:	f7ff fc67 	bl	8002140 <rf_read_reg>
	return result;
 8002872:	f89d 300f 	ldrb.w	r3, [sp, #15]
}

// Enable dynamic payload length
void rf_enable_pipe_dlp(int pipes) {
	int tmp = rf_read_reg_byte(NRF_REG_DYNPD);
	if ((tmp & (pipes)) != (pipes)) {
 8002876:	07da      	lsls	r2, r3, #31
 8002878:	d408      	bmi.n	800288c <rfhelp_restart+0x20c>
 800287a:	a904      	add	r1, sp, #16
		tmp |= (pipes);
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	f801 3d02 	strb.w	r3, [r1, #-2]!
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002884:	201c      	movs	r0, #28
 8002886:	2201      	movs	r2, #1
 8002888:	f7ff fc72 	bl	8002170 <rf_write_reg>

	rf_enable_pipe_autoack(NRF_MASK_PIPE0);
	rf_enable_pipe_address(NRF_MASK_PIPE0);
	rf_enable_pipe_dlp(NRF_MASK_PIPE0);

	memcpy(tx_addr, nrf_conf.address, 3);
 800288c:	4a20      	ldr	r2, [pc, #128]	; (8002910 <rfhelp_restart+0x290>)
	memcpy(rx_addr[0], nrf_conf.address, 3);
	tx_pipe0_addr_eq = true;

	rf_set_tx_addr(tx_addr, address_length);
 800288e:	4b21      	ldr	r3, [pc, #132]	; (8002914 <rfhelp_restart+0x294>)

	rf_enable_pipe_autoack(NRF_MASK_PIPE0);
	rf_enable_pipe_address(NRF_MASK_PIPE0);
	rf_enable_pipe_dlp(NRF_MASK_PIPE0);

	memcpy(tx_addr, nrf_conf.address, 3);
 8002890:	f8b2 e000 	ldrh.w	lr, [r2]
	memcpy(rx_addr[0], nrf_conf.address, 3);
	tx_pipe0_addr_eq = true;

	rf_set_tx_addr(tx_addr, address_length);
 8002894:	681e      	ldr	r6, [r3, #0]

	rf_enable_pipe_autoack(NRF_MASK_PIPE0);
	rf_enable_pipe_address(NRF_MASK_PIPE0);
	rf_enable_pipe_dlp(NRF_MASK_PIPE0);

	memcpy(tx_addr, nrf_conf.address, 3);
 8002896:	7897      	ldrb	r7, [r2, #2]
 8002898:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <rfhelp_restart+0x298>)
	memcpy(rx_addr[0], nrf_conf.address, 3);
 800289a:	4c20      	ldr	r4, [pc, #128]	; (800291c <rfhelp_restart+0x29c>)
	tx_pipe0_addr_eq = true;
 800289c:	f8df c080 	ldr.w	ip, [pc, #128]	; 8002920 <rfhelp_restart+0x2a0>

	rf_enable_pipe_autoack(NRF_MASK_PIPE0);
	rf_enable_pipe_address(NRF_MASK_PIPE0);
	rf_enable_pipe_dlp(NRF_MASK_PIPE0);

	memcpy(tx_addr, nrf_conf.address, 3);
 80028a0:	f8a3 e000 	strh.w	lr, [r3]
	memcpy(rx_addr[0], nrf_conf.address, 3);
 80028a4:	f8a4 e000 	strh.w	lr, [r4]
void rf_set_rx_addr(int pipe, const char *address, int addr_len) {
	rf_write_reg(NRF_REG_RX_ADDR_P0 + pipe, address, addr_len);
}

void rf_set_tx_addr(const char *address, int addr_len) {
	rf_write_reg(NRF_REG_TX_ADDR, address, addr_len);
 80028a8:	4619      	mov	r1, r3

	rf_enable_pipe_autoack(NRF_MASK_PIPE0);
	rf_enable_pipe_address(NRF_MASK_PIPE0);
	rf_enable_pipe_dlp(NRF_MASK_PIPE0);

	memcpy(tx_addr, nrf_conf.address, 3);
 80028aa:	709f      	strb	r7, [r3, #2]
 80028ac:	4632      	mov	r2, r6
	memcpy(rx_addr[0], nrf_conf.address, 3);
	tx_pipe0_addr_eq = true;
 80028ae:	2501      	movs	r5, #1
 80028b0:	2010      	movs	r0, #16
	rf_enable_pipe_autoack(NRF_MASK_PIPE0);
	rf_enable_pipe_address(NRF_MASK_PIPE0);
	rf_enable_pipe_dlp(NRF_MASK_PIPE0);

	memcpy(tx_addr, nrf_conf.address, 3);
	memcpy(rx_addr[0], nrf_conf.address, 3);
 80028b2:	70a7      	strb	r7, [r4, #2]
	tx_pipe0_addr_eq = true;
 80028b4:	f88c 5000 	strb.w	r5, [ip]
 80028b8:	f7ff fc5a 	bl	8002170 <rf_write_reg>
		rf_write_reg_byte(NRF_REG_SETUP_RETR, reg_new);	// Update if we need
	}
}

void rf_set_rx_addr(int pipe, const char *address, int addr_len) {
	rf_write_reg(NRF_REG_RX_ADDR_P0 + pipe, address, addr_len);
 80028bc:	4632      	mov	r2, r6
 80028be:	4621      	mov	r1, r4
 80028c0:	200a      	movs	r0, #10
 80028c2:	f7ff fc55 	bl	8002170 <rf_write_reg>

	rf_set_tx_addr(tx_addr, address_length);
	rf_set_rx_addr(0, rx_addr[0], address_length);

	rf_power_up();
 80028c6:	f7ff fd93 	bl	80023f0 <rf_power_up>
	rf_mode_rx();
 80028ca:	f7ff fd71 	bl	80023b0 <rf_mode_rx>
	rf_flush_all();
 80028ce:	f7ff fdc7 	bl	8002460 <rf_flush_all>
 80028d2:	2370      	movs	r3, #112	; 0x70
	spi_sw_transfer(0, data, len);
	spi_sw_end();
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 80028d4:	462a      	mov	r2, r5
 80028d6:	f10d 010f 	add.w	r1, sp, #15
 80028da:	2007      	movs	r0, #7
 80028dc:	f88d 300f 	strb.w	r3, [sp, #15]
 80028e0:	f7ff fc46 	bl	8002170 <rf_write_reg>
	rf_clear_irq();

	chMtxUnlock(&rf_mutex);
 80028e4:	4808      	ldr	r0, [pc, #32]	; (8002908 <rfhelp_restart+0x288>)
 80028e6:	f7fe fd0b 	bl	8001300 <chMtxUnlock>
}
 80028ea:	b005      	add	sp, #20
 80028ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case NRF_CRC_1B:
		reg_new |= NRF_CONFIG_EN_CRC;
		break;

	case NRF_CRC_2B:
		reg_new |= NRF_CONFIG_EN_CRC | NRF_CONFIG_CRCO;
 80028ee:	f043 030c 	orr.w	r3, r3, #12
 80028f2:	e6fe      	b.n	80026f2 <rfhelp_restart+0x72>

	case NRF_SPEED_1M:
		break;

	case NRF_SPEED_2M:
		reg_new |= NRF_RF_SETUP_RF_DR_HIGH;
 80028f4:	f043 0308 	orr.w	r3, r3, #8
 80028f8:	e75f      	b.n	80027ba <rfhelp_restart+0x13a>
	switch (crc_type) {
	case NRF_CRC_DISABLED:
		break;

	case NRF_CRC_1B:
		reg_new |= NRF_CONFIG_EN_CRC;
 80028fa:	f043 0308 	orr.w	r3, r3, #8
 80028fe:	e6f8      	b.n	80026f2 <rfhelp_restart+0x72>

	reg_new &= ~(NRF_RF_SETUP_RF_DR_LOW | NRF_RF_SETUP_RF_DR_HIGH);

	switch (speed) {
	case NRF_SPEED_250K:
		reg_new |= NRF_RF_SETUP_RF_DR_LOW;
 8002900:	f043 0320 	orr.w	r3, r3, #32
 8002904:	e759      	b.n	80027ba <rfhelp_restart+0x13a>
 8002906:	bf00      	nop
 8002908:	20000b90 	.word	0x20000b90
 800290c:	20000904 	.word	0x20000904
 8002910:	2000090a 	.word	0x2000090a
 8002914:	20001670 	.word	0x20001670
 8002918:	20000d6c 	.word	0x20000d6c
 800291c:	20001650 	.word	0x20001650
 8002920:	20000d68 	.word	0x20000d68
	...

08002930 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8002930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002934:	4681      	mov	r9, r0
 8002936:	468a      	mov	sl, r1
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8002938:	468b      	mov	fp, r1
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 800293a:	b087      	sub	sp, #28
 800293c:	4615      	mov	r5, r2
 800293e:	f10d 030d 	add.w	r3, sp, #13
 8002942:	aa03      	add	r2, sp, #12
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	9301      	str	r3, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8002948:	f04f 0800 	mov.w	r8, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800294c:	f89b 1000 	ldrb.w	r1, [fp]
 8002950:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8002954:	b179      	cbz	r1, 8002976 <chvprintf+0x46>
      return n;
    if (c != '%') {
 8002956:	2925      	cmp	r1, #37	; 0x25
 8002958:	d011      	beq.n	800297e <chvprintf+0x4e>
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800295a:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 800295c:	f8d9 2000 	ldr.w	r2, [r9]
 8002960:	4648      	mov	r0, r9
 8002962:	6892      	ldr	r2, [r2, #8]
 8002964:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8002966:	f89b 1000 	ldrb.w	r1, [fp]
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 800296a:	f108 0801 	add.w	r8, r8, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800296e:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8002972:	2900      	cmp	r1, #0
 8002974:	d1ef      	bne.n	8002956 <chvprintf+0x26>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 8002976:	4640      	mov	r0, r8
 8002978:	b007      	add	sp, #28
 800297a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 800297e:	f89b 2001 	ldrb.w	r2, [fp, #1]
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8002982:	2600      	movs	r6, #0
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8002984:	2a2d      	cmp	r2, #45	; 0x2d
 8002986:	bf03      	ittte	eq
 8002988:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 800298c:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 8002990:	f04f 0a01 	moveq.w	sl, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8002994:	f04f 0a00 	movne.w	sl, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8002998:	2a30      	cmp	r2, #48	; 0x30
 800299a:	bf03      	ittte	eq
 800299c:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 800299e:	3301      	addeq	r3, #1
      filler = '0';
 80029a0:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 80029a2:	2720      	movne	r7, #32
 80029a4:	1c59      	adds	r1, r3, #1
 80029a6:	e006      	b.n	80029b6 <chvprintf+0x86>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 80029a8:	782b      	ldrb	r3, [r5, #0]
 80029aa:	3504      	adds	r5, #4
 80029ac:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 80029b0:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 80029b4:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 80029b6:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 80029be:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 80029c0:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 80029c4:	d9f2      	bls.n	80029ac <chvprintf+0x7c>
        c -= '0';
      else if (c == '*')
 80029c6:	2a2a      	cmp	r2, #42	; 0x2a
 80029c8:	d0ee      	beq.n	80029a8 <chvprintf+0x78>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 80029ca:	2a2e      	cmp	r2, #46	; 0x2e
 80029cc:	f04f 0100 	mov.w	r1, #0
 80029d0:	d043      	beq.n	8002a5a <chvprintf+0x12a>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80029d2:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80029d6:	2b4c      	cmp	r3, #76	; 0x4c
 80029d8:	d04e      	beq.n	8002a78 <chvprintf+0x148>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80029da:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 80029de:	2834      	cmp	r0, #52	; 0x34
 80029e0:	f200 80f6 	bhi.w	8002bd0 <chvprintf+0x2a0>
 80029e4:	e8df f010 	tbh	[pc, r0, lsl #1]
 80029e8:	00f400ea 	.word	0x00f400ea
 80029ec:	00f400f4 	.word	0x00f400f4
 80029f0:	00ea00f4 	.word	0x00ea00f4
 80029f4:	00f400f4 	.word	0x00f400f4
 80029f8:	00f400f4 	.word	0x00f400f4
 80029fc:	00e800f4 	.word	0x00e800f4
 8002a00:	00f400f4 	.word	0x00f400f4
 8002a04:	00f400f4 	.word	0x00f400f4
 8002a08:	00dd00f4 	.word	0x00dd00f4
 8002a0c:	00f400f4 	.word	0x00f400f4
 8002a10:	00f400f1 	.word	0x00f400f1
 8002a14:	00f400f4 	.word	0x00f400f4
 8002a18:	00f400f4 	.word	0x00f400f4
 8002a1c:	00f400f4 	.word	0x00f400f4
 8002a20:	00f400f4 	.word	0x00f400f4
 8002a24:	00a100f4 	.word	0x00a100f4
 8002a28:	00f400ea 	.word	0x00f400ea
 8002a2c:	00f400f4 	.word	0x00f400f4
 8002a30:	00ea00f4 	.word	0x00ea00f4
 8002a34:	00f400f4 	.word	0x00f400f4
 8002a38:	00f400f4 	.word	0x00f400f4
 8002a3c:	00e800f4 	.word	0x00e800f4
 8002a40:	00f400f4 	.word	0x00f400f4
 8002a44:	007100f4 	.word	0x007100f4
 8002a48:	00dd00f4 	.word	0x00dd00f4
 8002a4c:	00f400f4 	.word	0x00f400f4
 8002a50:	00f1      	.short	0x00f1
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8002a52:	782b      	ldrb	r3, [r5, #0]
 8002a54:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 8002a56:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8002a5a:	f81b 2b01 	ldrb.w	r2, [fp], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8002a5e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8002a62:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b09      	cmp	r3, #9
 8002a6a:	d9f4      	bls.n	8002a56 <chvprintf+0x126>
          c -= '0';
        else if (c == '*')
 8002a6c:	2a2a      	cmp	r2, #42	; 0x2a
 8002a6e:	d0f0      	beq.n	8002a52 <chvprintf+0x122>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8002a70:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8002a74:	2b4c      	cmp	r3, #76	; 0x4c
 8002a76:	d1b0      	bne.n	80029da <chvprintf+0xaa>
      is_long = TRUE;
      if (*fmt)
 8002a78:	f89b 3000 	ldrb.w	r3, [fp]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80a7 	beq.w	8002bd0 <chvprintf+0x2a0>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002a82:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8002a86:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002a8a:	2a34      	cmp	r2, #52	; 0x34
 8002a8c:	f200 809f 	bhi.w	8002bce <chvprintf+0x29e>
 8002a90:	e8df f002 	tbb	[pc, r2]
 8002a94:	9d9d9d94 	.word	0x9d9d9d94
 8002a98:	9d9d949d 	.word	0x9d9d949d
 8002a9c:	929d9d9d 	.word	0x929d9d9d
 8002aa0:	9d9d9d9d 	.word	0x9d9d9d9d
 8002aa4:	9d9d879d 	.word	0x9d9d879d
 8002aa8:	9d9d9d9b 	.word	0x9d9d9d9b
 8002aac:	9d9d9d9d 	.word	0x9d9d9d9d
 8002ab0:	4b9d9d9d 	.word	0x4b9d9d9d
 8002ab4:	9d9d9d94 	.word	0x9d9d9d94
 8002ab8:	9d9d949d 	.word	0x9d9d949d
 8002abc:	929d9d9d 	.word	0x929d9d9d
 8002ac0:	1b9d9d9d 	.word	0x1b9d9d9d
 8002ac4:	9d9d879d 	.word	0x9d9d879d
 8002ac8:	9b          	.byte	0x9b
 8002ac9:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8002aca:	682c      	ldr	r4, [r5, #0]
        s = "(null)";
 8002acc:	4b59      	ldr	r3, [pc, #356]	; (8002c34 <chvprintf+0x304>)
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8002ace:	3504      	adds	r5, #4
        s = "(null)";
 8002ad0:	2c00      	cmp	r4, #0
 8002ad2:	bf08      	it	eq
 8002ad4:	461c      	moveq	r4, r3
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002ad6:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8002ad8:	2900      	cmp	r1, #0
 8002ada:	f000 8093 	beq.w	8002c04 <chvprintf+0x2d4>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8095 	beq.w	8002c0e <chvprintf+0x2de>
 8002ae4:	3901      	subs	r1, #1
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	e001      	b.n	8002aee <chvprintf+0x1be>
 8002aea:	3901      	subs	r1, #1
 8002aec:	d403      	bmi.n	8002af6 <chvprintf+0x1c6>
 8002aee:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f9      	bne.n	8002aea <chvprintf+0x1ba>
 8002af6:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8002af8:	1a36      	subs	r6, r6, r0
 8002afa:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8002afc:	2720      	movs	r7, #32
 8002afe:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002b02:	f1ba 0f00 	cmp.w	sl, #0
 8002b06:	d01f      	beq.n	8002b48 <chvprintf+0x218>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	da34      	bge.n	8002b78 <chvprintf+0x248>
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8002b0e:	2e00      	cmp	r6, #0
 8002b10:	f43f af1c 	beq.w	800294c <chvprintf+0x1c>
 8002b14:	4634      	mov	r4, r6
      chSequentialStreamPut(chp, (uint8_t)filler);
 8002b16:	f8d9 3000 	ldr.w	r3, [r9]
 8002b1a:	4648      	mov	r0, r9
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	4639      	mov	r1, r7
 8002b20:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8002b22:	3c01      	subs	r4, #1
 8002b24:	d1f7      	bne.n	8002b16 <chvprintf+0x1e6>
 8002b26:	44b0      	add	r8, r6
 8002b28:	e710      	b.n	800294c <chvprintf+0x1c>
 8002b2a:	9a01      	ldr	r2, [sp, #4]

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 8002b2c:	682b      	ldr	r3, [r5, #0]
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f88d 300c 	strb.w	r3, [sp, #12]
 8002b34:	3504      	adds	r5, #4
 8002b36:	1e53      	subs	r3, r2, #1
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8002b38:	2720      	movs	r7, #32
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002b3a:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8002b3c:	1a36      	subs	r6, r6, r0
 8002b3e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 8002b42:	f1ba 0f00 	cmp.w	sl, #0
 8002b46:	d1df      	bne.n	8002b08 <chvprintf+0x1d8>
 8002b48:	9300      	str	r3, [sp, #0]
      width = -width;
 8002b4a:	f1c6 0a00 	rsb	sl, r6, #0
    if (width < 0) {
 8002b4e:	f1ba 0f00 	cmp.w	sl, #0
 8002b52:	d044      	beq.n	8002bde <chvprintf+0x2ae>
      if (*s == '-' && filler == '0') {
 8002b54:	7821      	ldrb	r1, [r4, #0]
 8002b56:	292d      	cmp	r1, #45	; 0x2d
 8002b58:	d046      	beq.n	8002be8 <chvprintf+0x2b8>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
 8002b5a:	4656      	mov	r6, sl
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 8002b5c:	f8d9 3000 	ldr.w	r3, [r9]
 8002b60:	4648      	mov	r0, r9
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4639      	mov	r1, r7
 8002b66:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8002b68:	3601      	adds	r6, #1
 8002b6a:	d1f7      	bne.n	8002b5c <chvprintf+0x22c>
    }
    while (--i >= 0) {
 8002b6c:	9b00      	ldr	r3, [sp, #0]
 8002b6e:	ebca 0808 	rsb	r8, sl, r8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f6ff aeea 	blt.w	800294c <chvprintf+0x1c>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002b78:	f8dd a000 	ldr.w	sl, [sp]
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8002b7c:	f8d9 3000 	ldr.w	r3, [r9]
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002b80:	f10a 3aff 	add.w	sl, sl, #4294967295
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	4648      	mov	r0, r9
 8002b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b8c:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002b8e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8002b92:	d1f3      	bne.n	8002b7c <chvprintf+0x24c>
 8002b94:	9b00      	ldr	r3, [sp, #0]
 8002b96:	f108 0801 	add.w	r8, r8, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	bfa8      	it	ge
 8002b9e:	4498      	addge	r8, r3
 8002ba0:	e7b5      	b.n	8002b0e <chvprintf+0x1de>
 8002ba2:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8002ba4:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002ba6:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8002ba8:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002baa:	f000 ff89 	bl	8003ac0 <long_to_string_with_divisor.constprop.16>
 8002bae:	ab03      	add	r3, sp, #12
 8002bb0:	1ac0      	subs	r0, r0, r3
 8002bb2:	1e43      	subs	r3, r0, #1
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002bb4:	ac03      	add	r4, sp, #12
 8002bb6:	e7c1      	b.n	8002b3c <chvprintf+0x20c>
 8002bb8:	2208      	movs	r2, #8
 8002bba:	e7f3      	b.n	8002ba4 <chvprintf+0x274>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8002bbc:	6829      	ldr	r1, [r5, #0]
 8002bbe:	3504      	adds	r5, #4
      if (l < 0) {
 8002bc0:	2900      	cmp	r1, #0
 8002bc2:	db2e      	blt.n	8002c22 <chvprintf+0x2f2>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8002bc4:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002bc6:	220a      	movs	r2, #10
 8002bc8:	e7ef      	b.n	8002baa <chvprintf+0x27a>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002bca:	2210      	movs	r2, #16
 8002bcc:	e7ea      	b.n	8002ba4 <chvprintf+0x274>
 8002bce:	461a      	mov	r2, r3
 8002bd0:	9b01      	ldr	r3, [sp, #4]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002bd2:	ac03      	add	r4, sp, #12
 8002bd4:	4618      	mov	r0, r3
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8002bd6:	f88d 200c 	strb.w	r2, [sp, #12]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	e7ae      	b.n	8002b3c <chvprintf+0x20c>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002bde:	9b00      	ldr	r3, [sp, #0]
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 8002be0:	4656      	mov	r6, sl
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	dac8      	bge.n	8002b78 <chvprintf+0x248>
 8002be6:	e6b1      	b.n	800294c <chvprintf+0x1c>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8002be8:	2f30      	cmp	r7, #48	; 0x30
 8002bea:	d1b6      	bne.n	8002b5a <chvprintf+0x22a>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 8002bec:	f8d9 3000 	ldr.w	r3, [r9]
 8002bf0:	4648      	mov	r0, r9
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	4798      	blx	r3
 8002bf6:	9b00      	ldr	r3, [sp, #0]
 8002bf8:	3401      	adds	r4, #1
 8002bfa:	3b01      	subs	r3, #1
        n++;
 8002bfc:	f108 0801 	add.w	r8, r8, #1
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	e7aa      	b.n	8002b5a <chvprintf+0x22a>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002c04:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f47f af6c 	bne.w	8002ae6 <chvprintf+0x1b6>
 8002c0e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002c12:	f1ba 0f00 	cmp.w	sl, #0
 8002c16:	d10b      	bne.n	8002c30 <chvprintf+0x300>
 8002c18:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	2720      	movs	r7, #32
 8002c20:	e793      	b.n	8002b4a <chvprintf+0x21a>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8002c22:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002c24:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8002c26:	f88d 300c 	strb.w	r3, [sp, #12]
 8002c2a:	f10d 000d 	add.w	r0, sp, #13
 8002c2e:	e7ca      	b.n	8002bc6 <chvprintf+0x296>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002c30:	2720      	movs	r7, #32
 8002c32:	e76c      	b.n	8002b0e <chvprintf+0x1de>
 8002c34:	08004228 	.word	0x08004228
	...

08002c40 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002c40:	b40e      	push	{r1, r2, r3}
 8002c42:	b500      	push	{lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	ab03      	add	r3, sp, #12
 8002c48:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 8002c4c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002c4e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8002c50:	f7ff fe6e 	bl	8002930 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8002c54:	b002      	add	sp, #8
 8002c56:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c5a:	b003      	add	sp, #12
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop

08002c60 <shell_thread.lto_priv.45>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8002c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c64:	4b79      	ldr	r3, [pc, #484]	; (8002e4c <shell_thread.lto_priv.45+0x1ec>)
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 8002c66:	6804      	ldr	r4, [r0, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	4a79      	ldr	r2, [pc, #484]	; (8002e50 <shell_thread.lto_priv.45+0x1f0>)
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8002c6c:	b098      	sub	sp, #96	; 0x60
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 8002c6e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nSTech(saagar.tech@gmail.com)\r\n");
 8002c72:	4978      	ldr	r1, [pc, #480]	; (8002e54 <shell_thread.lto_priv.45+0x1f4>)
 8002c74:	4620      	mov	r0, r4
 8002c76:	619a      	str	r2, [r3, #24]
 8002c78:	f7ff ffe2 	bl	8002c40 <chprintf>
 8002c7c:	ae08      	add	r6, sp, #32
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 8002c7e:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nSTech(saagar.tech@gmail.com)\r\n");
  while (true) {
    chprintf(chp, "guest> ");
 8002c82:	4620      	mov	r0, r4
 8002c84:	4974      	ldr	r1, [pc, #464]	; (8002e58 <shell_thread.lto_priv.45+0x1f8>)
 8002c86:	f7ff ffdb 	bl	8002c40 <chprintf>
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 8002c8a:	4635      	mov	r5, r6

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	4620      	mov	r0, r4
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f10d 0107 	add.w	r1, sp, #7
 8002c96:	2201      	movs	r2, #1
 8002c98:	4798      	blx	r3
 8002c9a:	b370      	cbz	r0, 8002cfa <shell_thread.lto_priv.45+0x9a>
      return true;
    if (c == 4) {
 8002c9c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002ca0:	2904      	cmp	r1, #4
 8002ca2:	d026      	beq.n	8002cf2 <shell_thread.lto_priv.45+0x92>
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
 8002ca4:	2908      	cmp	r1, #8
 8002ca6:	d011      	beq.n	8002ccc <shell_thread.lto_priv.45+0x6c>
 8002ca8:	297f      	cmp	r1, #127	; 0x7f
 8002caa:	d00f      	beq.n	8002ccc <shell_thread.lto_priv.45+0x6c>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8002cac:	290d      	cmp	r1, #13
 8002cae:	d035      	beq.n	8002d1c <shell_thread.lto_priv.45+0xbc>
      chprintf(chp, "\r\n");
      *p = 0;
      return false;
    }
    if (c < 0x20)
 8002cb0:	291f      	cmp	r1, #31
 8002cb2:	d9eb      	bls.n	8002c8c <shell_thread.lto_priv.45+0x2c>
      continue;
    if (p < line + size - 1) {
 8002cb4:	42bd      	cmp	r5, r7
 8002cb6:	d2e9      	bcs.n	8002c8c <shell_thread.lto_priv.45+0x2c>
      chSequentialStreamPut(chp, c);
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	4620      	mov	r0, r4
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	4798      	blx	r3
      *p++ = (char)c;
 8002cc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002cc4:	3501      	adds	r5, #1
 8002cc6:	f805 3c01 	strb.w	r3, [r5, #-1]
 8002cca:	e7df      	b.n	8002c8c <shell_thread.lto_priv.45+0x2c>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 8002ccc:	42b5      	cmp	r5, r6
 8002cce:	d0dd      	beq.n	8002c8c <shell_thread.lto_priv.45+0x2c>
        chSequentialStreamPut(chp, c);
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 8002cd8:	6823      	ldr	r3, [r4, #0]
 8002cda:	4620      	mov	r0, r4
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2120      	movs	r1, #32
 8002ce0:	4798      	blx	r3
        chSequentialStreamPut(chp, c);
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f89d 1007 	ldrb.w	r1, [sp, #7]
        p--;
 8002cec:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
 8002cee:	4798      	blx	r3
 8002cf0:	e7cc      	b.n	8002c8c <shell_thread.lto_priv.45+0x2c>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
    if (c == 4) {
      chprintf(chp, "^D");
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	4959      	ldr	r1, [pc, #356]	; (8002e5c <shell_thread.lto_priv.45+0x1fc>)
 8002cf6:	f7ff ffa3 	bl	8002c40 <chprintf>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nSTech(saagar.tech@gmail.com)\r\n");
  while (true) {
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	4958      	ldr	r1, [pc, #352]	; (8002e60 <shell_thread.lto_priv.45+0x200>)
 8002cfe:	f7ff ff9f 	bl	8002c40 <chprintf>
 8002d02:	2320      	movs	r3, #32
 8002d04:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4856      	ldr	r0, [pc, #344]	; (8002e64 <shell_thread.lto_priv.45+0x204>)
 8002d0c:	f7fe f940 	bl	8000f90 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7fe faa5 	bl	8001260 <chThdExitS>
        chprintf(chp, " ?\r\n");
      }
    }
  }
  shellExit(MSG_OK);
}
 8002d16:	b018      	add	sp, #96	; 0x60
 8002d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 8002d1c:	4952      	ldr	r1, [pc, #328]	; (8002e68 <shell_thread.lto_priv.45+0x208>)
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f7ff ff8e 	bl	8002c40 <chprintf>
      *p = 0;
 8002d24:	2300      	movs	r3, #0
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8002d26:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 8002d28:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8002d2a:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 8002d2c:	461d      	mov	r5, r3
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8002d2e:	f000 fea7 	bl	8003a80 <_strtok.constprop.17>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8002d32:	a902      	add	r1, sp, #8
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8002d34:	4682      	mov	sl, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8002d36:	2000      	movs	r0, #0
 8002d38:	f10d 090c 	add.w	r9, sp, #12
 8002d3c:	f000 fea0 	bl	8003a80 <_strtok.constprop.17>
 8002d40:	b150      	cbz	r0, 8002d58 <shell_thread.lto_priv.45+0xf8>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8002d42:	2d04      	cmp	r5, #4
 8002d44:	d01d      	beq.n	8002d82 <shell_thread.lto_priv.45+0x122>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8002d46:	f849 0b04 	str.w	r0, [r9], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8002d4a:	a902      	add	r1, sp, #8
 8002d4c:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8002d4e:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8002d50:	f000 fe96 	bl	8003a80 <_strtok.constprop.17>
 8002d54:	2800      	cmp	r0, #0
 8002d56:	d1f4      	bne.n	8002d42 <shell_thread.lto_priv.45+0xe2>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8002d58:	ab18      	add	r3, sp, #96	; 0x60
 8002d5a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002d5e:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8002d62:	f1ba 0f00 	cmp.w	sl, #0
 8002d66:	d08c      	beq.n	8002c82 <shell_thread.lto_priv.45+0x22>
      if (strcasecmp(cmd, "exit") == 0) {
 8002d68:	4650      	mov	r0, sl
 8002d6a:	4940      	ldr	r1, [pc, #256]	; (8002e6c <shell_thread.lto_priv.45+0x20c>)
 8002d6c:	f000 ff58 	bl	8003c20 <strcasecmp>
 8002d70:	b970      	cbnz	r0, 8002d90 <shell_thread.lto_priv.45+0x130>
        if (n > 0) {
 8002d72:	2d00      	cmp	r5, #0
 8002d74:	d0c5      	beq.n	8002d02 <shell_thread.lto_priv.45+0xa2>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8002d76:	4620      	mov	r0, r4
 8002d78:	493d      	ldr	r1, [pc, #244]	; (8002e70 <shell_thread.lto_priv.45+0x210>)
 8002d7a:	4a3c      	ldr	r2, [pc, #240]	; (8002e6c <shell_thread.lto_priv.45+0x20c>)
 8002d7c:	f7ff ff60 	bl	8002c40 <chprintf>
 8002d80:	e77f      	b.n	8002c82 <shell_thread.lto_priv.45+0x22>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 8002d82:	4620      	mov	r0, r4
 8002d84:	493b      	ldr	r1, [pc, #236]	; (8002e74 <shell_thread.lto_priv.45+0x214>)
 8002d86:	f7ff ff5b 	bl	8002c40 <chprintf>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	9307      	str	r3, [sp, #28]
 8002d8e:	e778      	b.n	8002c82 <shell_thread.lto_priv.45+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
 8002d90:	4650      	mov	r0, sl
 8002d92:	4939      	ldr	r1, [pc, #228]	; (8002e78 <shell_thread.lto_priv.45+0x218>)
 8002d94:	f000 ff44 	bl	8003c20 <strcasecmp>
 8002d98:	b930      	cbnz	r0, 8002da8 <shell_thread.lto_priv.45+0x148>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8002d9a:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
 8002d9c:	b1c5      	cbz	r5, 8002dd0 <shell_thread.lto_priv.45+0x170>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8002d9e:	4934      	ldr	r1, [pc, #208]	; (8002e70 <shell_thread.lto_priv.45+0x210>)
 8002da0:	4a35      	ldr	r2, [pc, #212]	; (8002e78 <shell_thread.lto_priv.45+0x218>)
 8002da2:	f7ff ff4d 	bl	8002c40 <chprintf>
 8002da6:	e76c      	b.n	8002c82 <shell_thread.lto_priv.45+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8002da8:	4b34      	ldr	r3, [pc, #208]	; (8002e7c <shell_thread.lto_priv.45+0x21c>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	4699      	mov	r9, r3
 8002dae:	b918      	cbnz	r0, 8002db8 <shell_thread.lto_priv.45+0x158>
 8002db0:	e031      	b.n	8002e16 <shell_thread.lto_priv.45+0x1b6>
 8002db2:	f859 0f08 	ldr.w	r0, [r9, #8]!
 8002db6:	b370      	cbz	r0, 8002e16 <shell_thread.lto_priv.45+0x1b6>
    if (strcasecmp(scp->sc_name, name) == 0) {
 8002db8:	4651      	mov	r1, sl
 8002dba:	f000 ff31 	bl	8003c20 <strcasecmp>
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d1f7      	bne.n	8002db2 <shell_thread.lto_priv.45+0x152>
      scp->sc_function(chp, argc, argv);
 8002dc2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	aa03      	add	r2, sp, #12
 8002dca:	4620      	mov	r0, r4
 8002dcc:	4798      	blx	r3
 8002dce:	e758      	b.n	8002c82 <shell_thread.lto_priv.45+0x22>
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 8002dd0:	492b      	ldr	r1, [pc, #172]	; (8002e80 <shell_thread.lto_priv.45+0x220>)
 8002dd2:	f7ff ff35 	bl	8002c40 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8002dd6:	4b29      	ldr	r3, [pc, #164]	; (8002e7c <shell_thread.lto_priv.45+0x21c>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	461d      	mov	r5, r3
 8002ddc:	b13a      	cbz	r2, 8002dee <shell_thread.lto_priv.45+0x18e>
    chprintf(chp, "%s ", scp->sc_name);
 8002dde:	4620      	mov	r0, r4
 8002de0:	4928      	ldr	r1, [pc, #160]	; (8002e84 <shell_thread.lto_priv.45+0x224>)
 8002de2:	f7ff ff2d 	bl	8002c40 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8002de6:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8002dea:	2a00      	cmp	r2, #0
 8002dec:	d1f7      	bne.n	8002dde <shell_thread.lto_priv.45+0x17e>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 8002dee:	f1b8 0f00 	cmp.w	r8, #0
 8002df2:	d00b      	beq.n	8002e0c <shell_thread.lto_priv.45+0x1ac>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8002df4:	f8d8 2000 	ldr.w	r2, [r8]
 8002df8:	b142      	cbz	r2, 8002e0c <shell_thread.lto_priv.45+0x1ac>
 8002dfa:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	4921      	ldr	r1, [pc, #132]	; (8002e84 <shell_thread.lto_priv.45+0x224>)
 8002e00:	f7ff ff1e 	bl	8002c40 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8002e04:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8002e08:	2a00      	cmp	r2, #0
 8002e0a:	d1f7      	bne.n	8002dfc <shell_thread.lto_priv.45+0x19c>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	4916      	ldr	r1, [pc, #88]	; (8002e68 <shell_thread.lto_priv.45+0x208>)
 8002e10:	f7ff ff16 	bl	8002c40 <chprintf>
 8002e14:	e735      	b.n	8002c82 <shell_thread.lto_priv.45+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8002e16:	f1b8 0f00 	cmp.w	r8, #0
 8002e1a:	d00d      	beq.n	8002e38 <shell_thread.lto_priv.45+0x1d8>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8002e1c:	f8d8 0000 	ldr.w	r0, [r8]
 8002e20:	b150      	cbz	r0, 8002e38 <shell_thread.lto_priv.45+0x1d8>
 8002e22:	46c1      	mov	r9, r8
 8002e24:	e002      	b.n	8002e2c <shell_thread.lto_priv.45+0x1cc>
 8002e26:	f859 0f08 	ldr.w	r0, [r9, #8]!
 8002e2a:	b128      	cbz	r0, 8002e38 <shell_thread.lto_priv.45+0x1d8>
    if (strcasecmp(scp->sc_name, name) == 0) {
 8002e2c:	4651      	mov	r1, sl
 8002e2e:	f000 fef7 	bl	8003c20 <strcasecmp>
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d1f7      	bne.n	8002e26 <shell_thread.lto_priv.45+0x1c6>
 8002e36:	e7c4      	b.n	8002dc2 <shell_thread.lto_priv.45+0x162>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 8002e38:	4652      	mov	r2, sl
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	4912      	ldr	r1, [pc, #72]	; (8002e88 <shell_thread.lto_priv.45+0x228>)
 8002e3e:	f7ff feff 	bl	8002c40 <chprintf>
        chprintf(chp, " ?\r\n");
 8002e42:	4620      	mov	r0, r4
 8002e44:	4911      	ldr	r1, [pc, #68]	; (8002e8c <shell_thread.lto_priv.45+0x22c>)
 8002e46:	f7ff fefb 	bl	8002c40 <chprintf>
 8002e4a:	e71a      	b.n	8002c82 <shell_thread.lto_priv.45+0x22>
 8002e4c:	20001960 	.word	0x20001960
 8002e50:	08004230 	.word	0x08004230
 8002e54:	08004238 	.word	0x08004238
 8002e58:	0800425c 	.word	0x0800425c
 8002e5c:	08004264 	.word	0x08004264
 8002e60:	080042c4 	.word	0x080042c4
 8002e64:	20000b8c 	.word	0x20000b8c
 8002e68:	08004418 	.word	0x08004418
 8002e6c:	08004280 	.word	0x08004280
 8002e70:	08004288 	.word	0x08004288
 8002e74:	08004268 	.word	0x08004268
 8002e78:	08004294 	.word	0x08004294
 8002e7c:	2000081c 	.word	0x2000081c
 8002e80:	0800429c 	.word	0x0800429c
 8002e84:	080042b4 	.word	0x080042b4
 8002e88:	080042b8 	.word	0x080042b8
 8002e8c:	080042bc 	.word	0x080042bc

08002e90 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8002e90:	2900      	cmp	r1, #0
 8002e92:	dd03      	ble.n	8002e9c <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8002e94:	4908      	ldr	r1, [pc, #32]	; (8002eb8 <cmd_systime+0x28>)
 8002e96:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <cmd_systime+0x2c>)
 8002e98:	f7ff bed2 	b.w	8002c40 <chprintf>
 8002e9c:	2320      	movs	r3, #32
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8002ea2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 8002eae:	4904      	ldr	r1, [pc, #16]	; (8002ec0 <cmd_systime+0x30>)
 8002eb0:	b292      	uxth	r2, r2
 8002eb2:	f7ff bec5 	b.w	8002c40 <chprintf>
 8002eb6:	bf00      	nop
 8002eb8:	08004288 	.word	0x08004288
 8002ebc:	080042d0 	.word	0x080042d0
 8002ec0:	080042d8 	.word	0x080042d8
	...

08002ed0 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8002ed0:	2900      	cmp	r1, #0
 8002ed2:	dd03      	ble.n	8002edc <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8002ed4:	4919      	ldr	r1, [pc, #100]	; (8002f3c <cmd_info+0x6c>)
 8002ed6:	4a1a      	ldr	r2, [pc, #104]	; (8002f40 <cmd_info+0x70>)
 8002ed8:	f7ff beb2 	b.w	8002c40 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002edc:	b510      	push	{r4, lr}
 8002ede:	4604      	mov	r4, r0
 8002ee0:	b082      	sub	sp, #8
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8002ee2:	4918      	ldr	r1, [pc, #96]	; (8002f44 <cmd_info+0x74>)
 8002ee4:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <cmd_info+0x78>)
 8002ee6:	f7ff feab 	bl	8002c40 <chprintf>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 8002eea:	4620      	mov	r0, r4
 8002eec:	4917      	ldr	r1, [pc, #92]	; (8002f4c <cmd_info+0x7c>)
 8002eee:	4a18      	ldr	r2, [pc, #96]	; (8002f50 <cmd_info+0x80>)
 8002ef0:	f7ff fea6 	bl	8002c40 <chprintf>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	4917      	ldr	r1, [pc, #92]	; (8002f54 <cmd_info+0x84>)
 8002ef8:	4a17      	ldr	r2, [pc, #92]	; (8002f58 <cmd_info+0x88>)
 8002efa:	f7ff fea1 	bl	8002c40 <chprintf>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 8002efe:	4620      	mov	r0, r4
 8002f00:	4916      	ldr	r1, [pc, #88]	; (8002f5c <cmd_info+0x8c>)
 8002f02:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <cmd_info+0x90>)
 8002f04:	f7ff fe9c 	bl	8002c40 <chprintf>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 8002f08:	4620      	mov	r0, r4
 8002f0a:	4916      	ldr	r1, [pc, #88]	; (8002f64 <cmd_info+0x94>)
 8002f0c:	4a16      	ldr	r2, [pc, #88]	; (8002f68 <cmd_info+0x98>)
 8002f0e:	f7ff fe97 	bl	8002c40 <chprintf>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 8002f12:	4620      	mov	r0, r4
 8002f14:	4915      	ldr	r1, [pc, #84]	; (8002f6c <cmd_info+0x9c>)
 8002f16:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <cmd_info+0xa0>)
 8002f18:	f7ff fe92 	bl	8002c40 <chprintf>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	4915      	ldr	r1, [pc, #84]	; (8002f74 <cmd_info+0xa4>)
 8002f20:	4a15      	ldr	r2, [pc, #84]	; (8002f78 <cmd_info+0xa8>)
 8002f22:	f7ff fe8d 	bl	8002c40 <chprintf>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <cmd_info+0xac>)
 8002f28:	4620      	mov	r0, r4
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	4914      	ldr	r1, [pc, #80]	; (8002f80 <cmd_info+0xb0>)
 8002f2e:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <cmd_info+0xb4>)
 8002f30:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <cmd_info+0xb8>)
 8002f32:	f7ff fe85 	bl	8002c40 <chprintf>
#endif
#endif
}
 8002f36:	b002      	add	sp, #8
 8002f38:	bd10      	pop	{r4, pc}
 8002f3a:	bf00      	nop
 8002f3c:	08004288 	.word	0x08004288
 8002f40:	080042e0 	.word	0x080042e0
 8002f44:	080042e8 	.word	0x080042e8
 8002f48:	080042fc 	.word	0x080042fc
 8002f4c:	08004304 	.word	0x08004304
 8002f50:	08004318 	.word	0x08004318
 8002f54:	08004360 	.word	0x08004360
 8002f58:	08004374 	.word	0x08004374
 8002f5c:	0800437c 	.word	0x0800437c
 8002f60:	08004390 	.word	0x08004390
 8002f64:	0800439c 	.word	0x0800439c
 8002f68:	080043b0 	.word	0x080043b0
 8002f6c:	080043c8 	.word	0x080043c8
 8002f70:	080043dc 	.word	0x080043dc
 8002f74:	08004408 	.word	0x08004408
 8002f78:	0800441c 	.word	0x0800441c
 8002f7c:	08004458 	.word	0x08004458
 8002f80:	08004430 	.word	0x08004430
 8002f84:	08004448 	.word	0x08004448
 8002f88:	08004454 	.word	0x08004454
 8002f8c:	00000000 	.word	0x00000000

08002f90 <Vector8C>:
 */
OSAL_IRQ_HANDLER(STM32_USB1_HP_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  OSAL_IRQ_EPILOGUE();
 8002f90:	f7fd bfce 	b.w	8000f30 <_port_irq_epilogue>
	...

08002fa0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8002fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8002fa4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002fa8:	6923      	ldr	r3, [r4, #16]
 8002faa:	079b      	lsls	r3, r3, #30
 8002fac:	d403      	bmi.n	8002fb6 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8002fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8002fb2:	f7fd bfbd 	b.w	8000f30 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8002fb6:	2700      	movs	r7, #0
 8002fb8:	6127      	str	r7, [r4, #16]
 8002fba:	2520      	movs	r5, #32
 8002fbc:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8002fc0:	4e1e      	ldr	r6, [pc, #120]	; (800303c <VectorB0+0x9c>)
 8002fc2:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002fc4:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8002fc8:	69f3      	ldr	r3, [r6, #28]
 8002fca:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002fcc:	ebce 0100 	rsb	r1, lr, r0
 8002fd0:	891a      	ldrh	r2, [r3, #8]
 8002fd2:	b289      	uxth	r1, r1
 8002fd4:	4291      	cmp	r1, r2
 8002fd6:	f106 081c 	add.w	r8, r6, #28
 8002fda:	d31b      	bcc.n	8003014 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002fdc:	6819      	ldr	r1, [r3, #0]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8002fde:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8002fe0:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8002fe2:	84f2      	strh	r2, [r6, #38]	; 0x26

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8002fe4:	68da      	ldr	r2, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002fe6:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8002fea:	61f1      	str	r1, [r6, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8002fec:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8002fee:	bf08      	it	eq
 8002ff0:	60e7      	streq	r7, [r4, #12]
 8002ff2:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8002ff6:	6918      	ldr	r0, [r3, #16]
 8002ff8:	4790      	blx	r2
 8002ffa:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8002ffe:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8003000:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8003004:	69f3      	ldr	r3, [r6, #28]
 8003006:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8003008:	ebce 0100 	rsb	r1, lr, r0
 800300c:	891a      	ldrh	r2, [r3, #8]
 800300e:	b289      	uxth	r1, r1
 8003010:	428a      	cmp	r2, r1
 8003012:	d9e3      	bls.n	8002fdc <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8003014:	4543      	cmp	r3, r8
 8003016:	d00a      	beq.n	800302e <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8003018:	4472      	add	r2, lr
 800301a:	1a12      	subs	r2, r2, r0
 800301c:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800301e:	2a01      	cmp	r2, #1
 8003020:	bf98      	it	ls
 8003022:	2202      	movls	r2, #2
  }
  port_timer_set_alarm(now + delta);
 8003024:	4402      	add	r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003026:	b292      	uxth	r2, r2
 8003028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800302c:	635a      	str	r2, [r3, #52]	; 0x34
 800302e:	2300      	movs	r3, #0
 8003030:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8003034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8003038:	f7fd bf7a 	b.w	8000f30 <_port_irq_epilogue>
 800303c:	20001960 	.word	0x20001960

08003040 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <Vector84+0x20>)
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8003042:	4808      	ldr	r0, [pc, #32]	; (8003064 <Vector84+0x24>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8003044:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8003046:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8003048:	f3c1 6103 	ubfx	r1, r1, #24, #4
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 800304c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
 800304e:	060c      	lsls	r4, r1, #24
 8003050:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8003052:	b10a      	cbz	r2, 8003058 <Vector84+0x18>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8003054:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003056:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8003058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800305c:	f7fd bf68 	b.w	8000f30 <_port_irq_epilogue>
 8003060:	40020000 	.word	0x40020000
 8003064:	20000bac 	.word	0x20000bac
	...

08003070 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8003070:	4b07      	ldr	r3, [pc, #28]	; (8003090 <Vector80+0x20>)
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8003072:	4808      	ldr	r0, [pc, #32]	; (8003094 <Vector80+0x24>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8003074:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8003076:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8003078:	f3c1 5103 	ubfx	r1, r1, #20, #4
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 800307c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
 800307e:	050c      	lsls	r4, r1, #20
 8003080:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8003082:	b10a      	cbz	r2, 8003088 <Vector80+0x18>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8003084:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003086:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8003088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800308c:	f7fd bf50 	b.w	8000f30 <_port_irq_epilogue>
 8003090:	40020000 	.word	0x40020000
 8003094:	20000bac 	.word	0x20000bac
	...

080030a0 <Vector7C>:
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 80030a0:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <Vector7C+0x20>)
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 80030a2:	4808      	ldr	r0, [pc, #32]	; (80030c4 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 80030a4:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 80030a6:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 80030a8:	f3c1 4103 	ubfx	r1, r1, #16, #4
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 80030ac:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
 80030ae:	040c      	lsls	r4, r1, #16
 80030b0:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 80030b2:	b10a      	cbz	r2, 80030b8 <Vector7C+0x18>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 80030b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80030b6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80030b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80030bc:	f7fd bf38 	b.w	8000f30 <_port_irq_epilogue>
 80030c0:	40020000 	.word	0x40020000
 80030c4:	20000bac 	.word	0x20000bac
	...

080030d0 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 80030d0:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <Vector78+0x20>)
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 80030d2:	4808      	ldr	r0, [pc, #32]	; (80030f4 <Vector78+0x24>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 80030d4:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 80030d6:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 80030d8:	f3c1 3103 	ubfx	r1, r1, #12, #4
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 80030dc:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
 80030de:	030c      	lsls	r4, r1, #12
 80030e0:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[3].dma_func)
 80030e2:	b10a      	cbz	r2, 80030e8 <Vector78+0x18>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80030e4:	69c0      	ldr	r0, [r0, #28]
 80030e6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80030e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80030ec:	f7fd bf20 	b.w	8000f30 <_port_irq_epilogue>
 80030f0:	40020000 	.word	0x40020000
 80030f4:	20000bac 	.word	0x20000bac
	...

08003100 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8003100:	4b07      	ldr	r3, [pc, #28]	; (8003120 <Vector74+0x20>)
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 8003102:	4808      	ldr	r0, [pc, #32]	; (8003124 <Vector74+0x24>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8003104:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 8003106:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8003108:	f3c1 2103 	ubfx	r1, r1, #8, #4
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 800310c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
 800310e:	020c      	lsls	r4, r1, #8
 8003110:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[2].dma_func)
 8003112:	b10a      	cbz	r2, 8003118 <Vector74+0x18>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8003114:	6940      	ldr	r0, [r0, #20]
 8003116:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8003118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800311c:	f7fd bf08 	b.w	8000f30 <_port_irq_epilogue>
 8003120:	40020000 	.word	0x40020000
 8003124:	20000bac 	.word	0x20000bac
	...

08003130 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <Vector70+0x20>)
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8003132:	4808      	ldr	r0, [pc, #32]	; (8003154 <Vector70+0x24>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8003134:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8003136:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8003138:	f3c1 1103 	ubfx	r1, r1, #4, #4
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 800313c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
 800313e:	010c      	lsls	r4, r1, #4
 8003140:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[1].dma_func)
 8003142:	b10a      	cbz	r2, 8003148 <Vector70+0x18>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8003144:	68c0      	ldr	r0, [r0, #12]
 8003146:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8003148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800314c:	f7fd bef0 	b.w	8000f30 <_port_irq_epilogue>
 8003150:	40020000 	.word	0x40020000
 8003154:	20000bac 	.word	0x20000bac
	...

08003160 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 8003160:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <Vector6C+0x20>)
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 8003164:	4a07      	ldr	r2, [pc, #28]	; (8003184 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8003166:	6819      	ldr	r1, [r3, #0]
 8003168:	f001 010f 	and.w	r1, r1, #15
  DMA1->IFCR = flags << 0;
 800316c:	6059      	str	r1, [r3, #4]
  if (dma_isr_redir[0].dma_func)
 800316e:	6813      	ldr	r3, [r2, #0]
 8003170:	b10b      	cbz	r3, 8003176 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8003172:	6850      	ldr	r0, [r2, #4]
 8003174:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8003176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800317a:	f7fd bed9 	b.w	8000f30 <_port_irq_epilogue>
 800317e:	bf00      	nop
 8003180:	40020000 	.word	0x40020000
 8003184:	20000bac 	.word	0x20000bac
	...

08003190 <usb_packet_write_from_queue>:
 *                      not exceed the maximum packet size for this endpoint.
 *
 * @notapi
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8003192:	6803      	ldr	r3, [r0, #0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8003194:	ea5f 0c52 	movs.w	ip, r2, lsr #1
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8003198:	f103 5e00 	add.w	lr, r3, #536870912	; 0x20000000
 800319c:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
 80031a0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80031a4:	6042      	str	r2, [r0, #4]
  nhw = n / 2;
  while (nhw > 0) {
 80031a6:	d018      	beq.n	80031da <usb_packet_write_from_queue+0x4a>
 80031a8:	4677      	mov	r7, lr
 80031aa:	4664      	mov	r4, ip
 80031ac:	690e      	ldr	r6, [r1, #16]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80031ae:	6988      	ldr	r0, [r1, #24]
 80031b0:	1c43      	adds	r3, r0, #1
    if (oqp->q_rdptr >= oqp->q_top)
 80031b2:	42b3      	cmp	r3, r6
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80031b4:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80031b6:	bf28      	it	cs
 80031b8:	68cb      	ldrcs	r3, [r1, #12]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80031ba:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 80031bc:	1c5d      	adds	r5, r3, #1
 80031be:	618d      	str	r5, [r1, #24]
 80031c0:	781b      	ldrb	r3, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top)
 80031c2:	42b5      	cmp	r5, r6
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 80031c4:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80031c8:	bf24      	itt	cs
 80031ca:	68c8      	ldrcs	r0, [r1, #12]
 80031cc:	6188      	strcs	r0, [r1, #24]
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 80031ce:	3c01      	subs	r4, #1
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 80031d0:	f847 3b04 	str.w	r3, [r7], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 80031d4:	d1eb      	bne.n	80031ae <usb_packet_write_from_queue+0x1e>
 80031d6:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
    *pmap++ = w;
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 80031da:	07d3      	lsls	r3, r2, #31
 80031dc:	d50b      	bpl.n	80031f6 <usb_packet_write_from_queue+0x66>
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80031de:	6988      	ldr	r0, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 80031e0:	690c      	ldr	r4, [r1, #16]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80031e2:	1c43      	adds	r3, r0, #1
 80031e4:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 80031e6:	42a3      	cmp	r3, r4
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80031e8:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80031ea:	bf28      	it	cs
 80031ec:	68cb      	ldrcs	r3, [r1, #12]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80031ee:	f8ce 0000 	str.w	r0, [lr]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80031f2:	bf28      	it	cs
 80031f4:	618b      	strcs	r3, [r1, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 80031f6:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 80031fa:	b9cb      	cbnz	r3, 8003230 <usb_packet_write_from_queue+0xa0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031fc:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003200:	2320      	movs	r3, #32
 8003202:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 8003206:	688b      	ldr	r3, [r1, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8003208:	4608      	mov	r0, r1
 800320a:	441a      	add	r2, r3
 800320c:	608a      	str	r2, [r1, #8]
 800320e:	2100      	movs	r1, #0
 8003210:	f7fe f80e 	bl	8001230 <chThdDequeueAllI>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003214:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8003218:	f3c4 0408 	ubfx	r4, r4, #0, #9
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 800321c:	b11c      	cbz	r4, 8003226 <usb_packet_write_from_queue+0x96>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800321e:	2300      	movs	r3, #0
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8003226:	f7fe f85b 	bl	80012e0 <chSchRescheduleS>
 800322a:	f384 8811 	msr	BASEPRI, r4
 800322e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003230:	688b      	ldr	r3, [r1, #8]
 8003232:	4608      	mov	r0, r1
 8003234:	441a      	add	r2, r3
 8003236:	608a      	str	r2, [r1, #8]
  osalThreadDequeueAllI(&oqp->q_waiting, Q_OK);

  osalSysRestoreStatusX(sts);
}
 8003238:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800323c:	2100      	movs	r1, #0
 800323e:	f7fd bff7 	b.w	8001230 <chThdDequeueAllI>
 8003242:	bf00      	nop
	...

08003250 <VectorAC>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_CC_HANDLER) {
 8003250:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD1);
 8003252:	f000 fbc5 	bl	80039e0 <icu_lld_serve_interrupt.constprop.18>

  OSAL_IRQ_EPILOGUE();
}
 8003256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD1);

  OSAL_IRQ_EPILOGUE();
 800325a:	f7fd be69 	b.w	8000f30 <_port_irq_epilogue>
 800325e:	bf00      	nop

08003260 <VectorA4>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8003260:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD1);
 8003262:	f000 fbbd 	bl	80039e0 <icu_lld_serve_interrupt.constprop.18>

  OSAL_IRQ_EPILOGUE();
}
 8003266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD1);

  OSAL_IRQ_EPILOGUE();
 800326a:	f7fd be61 	b.w	8000f30 <_port_irq_epilogue>
 800326e:	bf00      	nop

08003270 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003270:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <__early_init+0x80>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003272:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800327c:	680b      	ldr	r3, [r1, #0]
 800327e:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <__early_init+0x80>)
 8003280:	079b      	lsls	r3, r3, #30
 8003282:	d5fb      	bpl.n	800327c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003284:	4611      	mov	r1, r2
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003286:	6813      	ldr	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003288:	2000      	movs	r0, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800328a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800328e:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003290:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003292:	684b      	ldr	r3, [r1, #4]
 8003294:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <__early_init+0x80>)
 8003296:	f013 0f0c 	tst.w	r3, #12
 800329a:	d1fa      	bne.n	8003292 <__early_init+0x22>
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
  while (!(RCC->CR & RCC_CR_HSERDY))
 800329c:	4611      	mov	r1, r2
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 80032a6:	680b      	ldr	r3, [r1, #0]
 80032a8:	4a11      	ldr	r2, [pc, #68]	; (80032f0 <__early_init+0x80>)
 80032aa:	0398      	lsls	r0, r3, #14
 80032ac:	d5fb      	bpl.n	80032a6 <__early_init+0x36>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80032ae:	4611      	mov	r1, r2
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80032b0:	6853      	ldr	r3, [r2, #4]
 80032b2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80032b6:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 80032b8:	6813      	ldr	r3, [r2, #0]
 80032ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032be:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80032c0:	680b      	ldr	r3, [r1, #0]
 80032c2:	4a0b      	ldr	r2, [pc, #44]	; (80032f0 <__early_init+0x80>)
 80032c4:	019b      	lsls	r3, r3, #6
 80032c6:	d5fb      	bpl.n	80032c0 <__early_init+0x50>

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80032c8:	4611      	mov	r1, r2
/*
 * Early initialization code.
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {
 80032ca:	b410      	push	{r4}
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <__early_init+0x84>)
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80032ce:	4c0a      	ldr	r4, [pc, #40]	; (80032f8 <__early_init+0x88>)
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80032d0:	2012      	movs	r0, #18
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80032d2:	6054      	str	r4, [r2, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80032d4:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80032d6:	6853      	ldr	r3, [r2, #4]
 80032d8:	f043 0302 	orr.w	r3, r3, #2
 80032dc:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80032de:	684b      	ldr	r3, [r1, #4]
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d1fa      	bne.n	80032de <__early_init+0x6e>

  stm32_clock_init();
}
 80032e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40022000 	.word	0x40022000
 80032f8:	001d6400 	.word	0x001d6400
 80032fc:	00000000 	.word	0x00000000

08003300 <usb_lld_prepare_transmit>:
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003300:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003304:	68c3      	ldr	r3, [r0, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8003306:	b430      	push	{r4, r5}
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003308:	6958      	ldr	r0, [r3, #20]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 800330a:	460c      	mov	r4, r1
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
 800330c:	6842      	ldr	r2, [r0, #4]
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 800330e:	8a19      	ldrh	r1, [r3, #16]
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
 8003310:	7803      	ldrb	r3, [r0, #0]
 8003312:	428a      	cmp	r2, r1
 8003314:	bf28      	it	cs
 8003316:	460a      	movcs	r2, r1
 8003318:	bb03      	cbnz	r3, 800335c <usb_lld_prepare_transmit+0x5c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 800331a:	4917      	ldr	r1, [pc, #92]	; (8003378 <usb_lld_prepare_transmit+0x78>)
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 800331c:	1c53      	adds	r3, r2, #1

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 800331e:	6d09      	ldr	r1, [r1, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8003326:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 800332a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800332e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8003332:	6821      	ldr	r1, [r4, #0]

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8003334:	68c0      	ldr	r0, [r0, #12]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8003336:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800333a:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 800333e:	6865      	ldr	r5, [r4, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8003340:	ea4f 0141 	mov.w	r1, r1, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8003344:	6062      	str	r2, [r4, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 8003346:	d007      	beq.n	8003358 <usb_lld_prepare_transmit+0x58>
 8003348:	3802      	subs	r0, #2
 800334a:	1f0a      	subs	r2, r1, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 800334c:	f830 1f02 	ldrh.w	r1, [r0, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8003350:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8003352:	f842 1f04 	str.w	r1, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8003356:	d1f9      	bne.n	800334c <usb_lld_prepare_transmit+0x4c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8003358:	bc30      	pop	{r4, r5}
 800335a:	4770      	bx	lr
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <usb_lld_prepare_transmit+0x78>)
 800335e:	68c1      	ldr	r1, [r0, #12]
 8003360:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003362:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8003366:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800336a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800336e:	0040      	lsls	r0, r0, #1
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8003370:	bc30      	pop	{r4, r5}
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8003372:	f7ff bf0d 	b.w	8003190 <usb_packet_write_from_queue>
 8003376:	bf00      	nop
 8003378:	40005c00 	.word	0x40005c00
 800337c:	00000000 	.word	0x00000000

08003380 <usb_lld_prepare_receive>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8003380:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003384:	68c9      	ldr	r1, [r1, #12]
 8003386:	698a      	ldr	r2, [r1, #24]

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8003388:	6853      	ldr	r3, [r2, #4]
 800338a:	b133      	cbz	r3, 800339a <usb_lld_prepare_receive+0x1a>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800338c:	8a49      	ldrh	r1, [r1, #18]
 800338e:	3b01      	subs	r3, #1
 8003390:	440b      	add	r3, r1
 8003392:	fbb3 f3f1 	udiv	r3, r3, r1
 8003396:	8213      	strh	r3, [r2, #16]
 8003398:	4770      	bx	lr
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
    osp->rxpkts = 1;
 800339a:	2301      	movs	r3, #1
 800339c:	8213      	strh	r3, [r2, #16]
 800339e:	4770      	bx	lr

080033a0 <usb_lld_init_endpoint>:
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80033a0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80033a4:	68db      	ldr	r3, [r3, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 80033a6:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];

  /* Setting the endpoint type.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	f002 0203 	and.w	r2, r2, #3
 80033ae:	3a01      	subs	r2, #1
 80033b0:	2a02      	cmp	r2, #2
 80033b2:	bf96      	itet	ls
 80033b4:	4c2e      	ldrls	r4, [pc, #184]	; (8003470 <usb_lld_init_endpoint+0xd0>)
 80033b6:	f44f 7500 	movhi.w	r5, #512	; 0x200
 80033ba:	f834 5012 	ldrhls.w	r5, [r4, r2, lsl #1]
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  /* IN endpoint initially in NAK mode.*/
  if (epcp->in_cb != NULL)
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	b10a      	cbz	r2, 80033c6 <usb_lld_init_endpoint+0x26>
    epr |= EPR_STAT_TX_NAK;
 80033c2:	f045 0520 	orr.w	r5, r5, #32

  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	b10a      	cbz	r2, 80033ce <usb_lld_init_endpoint+0x2e>
    epr |= EPR_STAT_RX_NAK;
 80033ca:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 80033ce:	f647 0670 	movw	r6, #30832	; 0x7870
  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 80033d2:	ea45 0401 	orr.w	r4, r5, r1
 80033d6:	f424 4478 	bic.w	r4, r4, #63488	; 0xf800
 80033da:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80033de:	008a      	lsls	r2, r1, #2
 80033e0:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80033e4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80033e8:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80033ec:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80033f0:	6014      	str	r4, [r2, #0]
  EPR_TOGGLE(ep, epr);
 80033f2:	6814      	ldr	r4, [r2, #0]
 80033f4:	402e      	ands	r6, r5
 80033f6:	4074      	eors	r4, r6

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 80033f8:	8a5d      	ldrh	r5, [r3, #18]
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 80033fa:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80033fe:	f044 0480 	orr.w	r4, r4, #128	; 0x80

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8003402:	2d3e      	cmp	r5, #62	; 0x3e
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 8003404:	6014      	str	r4, [r2, #0]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8003406:	f105 34ff 	add.w	r4, r5, #4294967295
  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 800340a:	d826      	bhi.n	800345a <usb_lld_init_endpoint+0xba>
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 800340c:	f044 0401 	orr.w	r4, r4, #1
 8003410:	3401      	adds	r4, #1
 8003412:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8003416:	0264      	lsls	r4, r4, #9
 8003418:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
  dp = USB_GET_DESCRIPTOR(ep);
 800341c:	4a15      	ldr	r2, [pc, #84]	; (8003474 <usb_lld_init_endpoint+0xd4>)
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 800341e:	8a1e      	ldrh	r6, [r3, #16]
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 8003420:	6d12      	ldr	r2, [r2, #80]	; 0x50
  dp->TXCOUNT0 = 0;
 8003422:	2700      	movs	r7, #0
 8003424:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
 8003428:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 800342c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003430:	0049      	lsls	r1, r1, #1
  dp->TXCOUNT0 = 0;
 8003432:	684b      	ldr	r3, [r1, #4]
 8003434:	604f      	str	r7, [r1, #4]
  dp->RXCOUNT0 = nblocks;
 8003436:	68cb      	ldr	r3, [r1, #12]
 8003438:	60cc      	str	r4, [r1, #12]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800343a:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  usbp->pmnext += size;
 800343e:	1993      	adds	r3, r2, r6
 8003440:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8003444:	680b      	ldr	r3, [r1, #0]
 8003446:	600a      	str	r2, [r1, #0]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8003448:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
  usbp->pmnext += size;
 800344c:	441d      	add	r5, r3
 800344e:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8003452:	688a      	ldr	r2, [r1, #8]
}
 8003454:	bcf0      	pop	{r4, r5, r6, r7}
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8003456:	608b      	str	r3, [r1, #8]
}
 8003458:	4770      	bx	lr
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 800345a:	f044 041f 	orr.w	r4, r4, #31
 800345e:	3401      	adds	r4, #1
 8003460:	1164      	asrs	r4, r4, #5
 8003462:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8003466:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800346a:	b2a4      	uxth	r4, r4
 800346c:	e7d6      	b.n	800341c <usb_lld_init_endpoint+0x7c>
 800346e:	bf00      	nop
 8003470:	080044c0 	.word	0x080044c0
 8003474:	40005c00 	.word	0x40005c00
	...

08003480 <usb_lld_reset>:
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8003480:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 8003482:	b5f0      	push	{r4, r5, r6, r7, lr}
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8003484:	68c9      	ldr	r1, [r1, #12]
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <usb_lld_reset+0x3c>)
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8003488:	2900      	cmp	r1, #0

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 800348a:	4d0d      	ldr	r5, [pc, #52]	; (80034c0 <usb_lld_reset+0x40>)
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 800348c:	f04f 0400 	mov.w	r4, #0
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
 8003490:	bf0c      	ite	eq
 8003492:	f44f 471c 	moveq.w	r7, #39936	; 0x9c00
 8003496:	f44f 471e 	movne.w	r7, #40448	; 0x9e00
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
  STM32_USB->DADDR  = DADDR_EF;
 800349a:	f04f 0e80 	mov.w	lr, #128	; 0x80
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 800349e:	2640      	movs	r6, #64	; 0x40
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 80034a0:	651c      	str	r4, [r3, #80]	; 0x50
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 80034a2:	4621      	mov	r1, r4
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
 80034a4:	645c      	str	r4, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 80034a6:	f8c3 e04c 	str.w	lr, [r3, #76]	; 0x4c
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
  STM32_USB->CNTR = cntr;
 80034aa:	641f      	str	r7, [r3, #64]	; 0x40
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 80034ac:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 80034b0:	60c5      	str	r5, [r0, #12]
  usb_lld_init_endpoint(usbp, 0);
}
 80034b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 80034b6:	f7ff bf73 	b.w	80033a0 <usb_lld_init_endpoint>
 80034ba:	bf00      	nop
 80034bc:	40005c00 	.word	0x40005c00
 80034c0:	08004470 	.word	0x08004470
	...

080034d0 <Vector90>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 80034d4:	4b99      	ldr	r3, [pc, #612]	; (800373c <Vector90+0x26c>)
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80034d6:	b085      	sub	sp, #20
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 80034d8:	6c5c      	ldr	r4, [r3, #68]	; 0x44

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 80034da:	0563      	lsls	r3, r4, #21
 80034dc:	f100 819c 	bmi.w	8003818 <Vector90+0x348>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
 80034e0:	0527      	lsls	r7, r4, #20
 80034e2:	d511      	bpl.n	8003508 <Vector90+0x38>
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80034e4:	f8df b258 	ldr.w	fp, [pc, #600]	; 8003740 <Vector90+0x270>
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 80034e8:	4a94      	ldr	r2, [pc, #592]	; (800373c <Vector90+0x26c>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80034ea:	f8db 1004 	ldr.w	r1, [fp, #4]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 80034ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80034f0:	680d      	ldr	r5, [r1, #0]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 80034f2:	f043 0308 	orr.w	r3, r3, #8
 80034f6:	6413      	str	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80034f8:	b115      	cbz	r5, 8003500 <Vector90+0x30>
 80034fa:	4658      	mov	r0, fp
 80034fc:	2103      	movs	r1, #3
 80034fe:	47a8      	blx	r5
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 8003500:	4b8e      	ldr	r3, [pc, #568]	; (800373c <Vector90+0x26c>)
 8003502:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003506:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
 8003508:	04e6      	lsls	r6, r4, #19
 800350a:	d508      	bpl.n	800351e <Vector90+0x4e>
    uint32_t fnr = STM32_USB->FNR;
 800350c:	4b8b      	ldr	r3, [pc, #556]	; (800373c <Vector90+0x26c>)
 800350e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 8003510:	0415      	lsls	r5, r2, #16
 8003512:	f140 8171 	bpl.w	80037f8 <Vector90+0x328>
      /* Just noise, going back in SUSPEND mode, reference manual 22.4.5,
         table 169.*/
      STM32_USB->CNTR |= CNTR_LP_MODE;
    }
#endif
    STM32_USB->ISTR = ~ISTR_WKUP;
 8003516:	4b89      	ldr	r3, [pc, #548]	; (800373c <Vector90+0x26c>)
 8003518:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* SOF handling.*/
  if (istr & ISTR_SOF) {
 800351e:	05a0      	lsls	r0, r4, #22
 8003520:	d50b      	bpl.n	800353a <Vector90+0x6a>
    _usb_isr_invoke_sof_cb(usbp);
 8003522:	f8df b21c 	ldr.w	fp, [pc, #540]	; 8003740 <Vector90+0x270>
 8003526:	f8db 3004 	ldr.w	r3, [fp, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	b10b      	cbz	r3, 8003532 <Vector90+0x62>
 800352e:	4658      	mov	r0, fp
 8003530:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 8003532:	4b82      	ldr	r3, [pc, #520]	; (800373c <Vector90+0x26c>)
 8003534:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 800353a:	0421      	lsls	r1, r4, #16
 800353c:	f140 80d3 	bpl.w	80036e6 <Vector90+0x216>
 8003540:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8003740 <Vector90+0x270>
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8003544:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 800373c <Vector90+0x26c>

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
 8003548:	f004 040f 	and.w	r4, r4, #15
 800354c:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8003550:	f108 4580 	add.w	r5, r8, #1073741824	; 0x40000000
 8003554:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 8003558:	f8d5 9000 	ldr.w	r9, [r5]
    const USBEndpointConfig *epcp = usbp->epc[ep];
 800355c:	1ca6      	adds	r6, r4, #2
 800355e:	eb0b 0386 	add.w	r3, fp, r6, lsl #2

    if (epr & EPR_CTR_TX) {
 8003562:	f019 0f80 	tst.w	r9, #128	; 0x80
  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8003566:	685f      	ldr	r7, [r3, #4]

    if (epr & EPR_CTR_TX) {
 8003568:	d065      	beq.n	8003636 <Vector90+0x166>
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 800356a:	682b      	ldr	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 800356c:	00e0      	lsls	r0, r4, #3
    const USBEndpointConfig *epcp = usbp->epc[ep];

    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 800356e:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8003572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357a:	602b      	str	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 800357c:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
      epcp->in_state->txcnt  += transmitted;
 8003580:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8003584:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003588:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 800358c:	4403      	add	r3, r0
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	6859      	ldr	r1, [r3, #4]
      epcp->in_state->txcnt  += transmitted;
 8003592:	f8de 3008 	ldr.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
 8003596:	f8de 2004 	ldr.w	r2, [lr, #4]
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
      epcp->in_state->txcnt  += transmitted;
 800359a:	440b      	add	r3, r1
 800359c:	f8ce 3008 	str.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
      if (n > 0) {
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f000 80bd 	beq.w	8003720 <Vector90+0x250>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
 80035a6:	8a3a      	ldrh	r2, [r7, #16]
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
 80035a8:	f89e c000 	ldrb.w	ip, [lr]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	bf28      	it	cs
 80035b0:	461a      	movcs	r2, r3
 80035b2:	f1bc 0f00 	cmp.w	ip, #0
 80035b6:	f040 8112 	bne.w	80037de <Vector90+0x30e>
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 80035ba:	1c53      	adds	r3, r2, #1
 80035bc:	9301      	str	r3, [sp, #4]
        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 80035be:	f8de 300c 	ldr.w	r3, [lr, #12]
 80035c2:	4419      	add	r1, r3
 80035c4:	f8ce 100c 	str.w	r1, [lr, #12]
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80035c8:	f8da e050 	ldr.w	lr, [sl, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80035cc:	9b01      	ldr	r3, [sp, #4]
 80035ce:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 80035d2:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80035d6:	4470      	add	r0, lr
 80035d8:	0040      	lsls	r0, r0, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80035da:	f8d0 e000 	ldr.w	lr, [r0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80035de:	085b      	lsrs	r3, r3, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80035e0:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 80035e4:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80035e8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80035ec:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80035f0:	6042      	str	r2, [r0, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 80035f2:	d008      	beq.n	8003606 <Vector90+0x136>
 80035f4:	3902      	subs	r1, #2
 80035f6:	f1ae 0204 	sub.w	r2, lr, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 80035fa:	f831 0f02 	ldrh.w	r0, [r1, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80035fe:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8003600:	f842 0f04 	str.w	r0, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8003604:	d1f9      	bne.n	80035fa <Vector90+0x12a>
 8003606:	2320      	movs	r3, #32
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003610:	f508 48b8 	add.w	r8, r8, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8003614:	f8d8 3000 	ldr.w	r3, [r8]
 8003618:	2200      	movs	r2, #0
 800361a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800361e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003622:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800362a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800362e:	f8c8 3000 	str.w	r3, [r8]
 8003632:	f382 8811 	msr	BASEPRI, r2
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
 8003636:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 800363a:	d04f      	beq.n	80036dc <Vector90+0x20c>
      EPR_CLEAR_CTR_RX(ep);
 800363c:	682b      	ldr	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 800363e:	f419 6f00 	tst.w	r9, #2048	; 0x800
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
      EPR_CLEAR_CTR_RX(ep);
 8003642:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8003646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800364e:	602b      	str	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 8003650:	d15e      	bne.n	8003710 <Vector90+0x240>
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8003652:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8003656:	69b9      	ldr	r1, [r7, #24]
 8003658:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800365c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8003660:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003664:	005b      	lsls	r3, r3, #1
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	4610      	mov	r0, r2
 800366a:	9201      	str	r2, [sp, #4]

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 800366c:	780a      	ldrb	r2, [r1, #0]
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 800366e:	f3c0 0809 	ubfx	r8, r0, #0, #10

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8003672:	2a00      	cmp	r2, #0
 8003674:	d166      	bne.n	8003744 <Vector90+0x274>
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8003676:	689a      	ldr	r2, [r3, #8]

  n = (n + 1) / 2;
 8003678:	f108 0301 	add.w	r3, r8, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 800367c:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8003680:	f502 5240 	add.w	r2, r2, #12288	; 0x3000

  n = (n + 1) / 2;
  while (n > 0) {
 8003684:	085b      	lsrs	r3, r3, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8003686:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
                                   epcp->out_state->mode.queue.rxqueue,
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
 800368a:	68c8      	ldr	r0, [r1, #12]
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 800368c:	d009      	beq.n	80036a2 <Vector90+0x1d2>
 800368e:	468e      	mov	lr, r1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8003690:	f852 1b04 	ldr.w	r1, [r2], #4
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8003694:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8003696:	f820 1b02 	strh.w	r1, [r0], #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 800369a:	d1f9      	bne.n	8003690 <Vector90+0x1c0>
 800369c:	4671      	mov	r1, lr
 800369e:	f8de 000c 	ldr.w	r0, [lr, #12]
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
 80036a2:	4440      	add	r0, r8
 80036a4:	60c8      	str	r0, [r1, #12]
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 80036a6:	8a08      	ldrh	r0, [r1, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 80036a8:	8a7f      	ldrh	r7, [r7, #18]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 80036aa:	688a      	ldr	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 80036ac:	684b      	ldr	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;
 80036ae:	3801      	subs	r0, #1
 80036b0:	b280      	uxth	r0, r0
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 80036b2:	4442      	add	r2, r8
        epcp->out_state->rxsize             -= n;
 80036b4:	ebc8 0303 	rsb	r3, r8, r3
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 80036b8:	45b8      	cmp	r8, r7
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 80036ba:	8208      	strh	r0, [r1, #16]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 80036bc:	608a      	str	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 80036be:	604b      	str	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 80036c0:	d316      	bcc.n	80036f0 <Vector90+0x220>
 80036c2:	b1a8      	cbz	r0, 80036f0 <Vector90+0x220>
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
        }
        else {
          /* Transfer not complete, there are more packets to receive.*/
          EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 80036c4:	682b      	ldr	r3, [r5, #0]
 80036c6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80036ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ce:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80036d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036da:	602b      	str	r3, [r5, #0]
        }
      }
    }
    istr = STM32_USB->ISTR;
 80036dc:	f8da 4044 	ldr.w	r4, [sl, #68]	; 0x44
    _usb_isr_invoke_sof_cb(usbp);
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 80036e0:	0423      	lsls	r3, r4, #16
 80036e2:	f53f af31 	bmi.w	8003548 <Vector90+0x78>
    }
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
}
 80036e6:	b005      	add	sp, #20
 80036e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
 80036ec:	f7fd bc20 	b.w	8000f30 <_port_irq_epilogue>

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
 80036f0:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 80036f4:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 80036f8:	2101      	movs	r1, #1
 80036fa:	40a1      	lsls	r1, r4
 80036fc:	6872      	ldr	r2, [r6, #4]
 80036fe:	ea23 0301 	bic.w	r3, r3, r1
 8003702:	68d2      	ldr	r2, [r2, #12]
 8003704:	f8ab 300a 	strh.w	r3, [fp, #10]
 8003708:	4621      	mov	r1, r4
 800370a:	480d      	ldr	r0, [pc, #52]	; (8003740 <Vector90+0x270>)
 800370c:	4790      	blx	r2
 800370e:	e7e5      	b.n	80036dc <Vector90+0x20c>
      EPR_CLEAR_CTR_RX(ep);
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
 8003710:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 8003714:	6873      	ldr	r3, [r6, #4]
 8003716:	4621      	mov	r1, r4
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4809      	ldr	r0, [pc, #36]	; (8003740 <Vector90+0x270>)
 800371c:	4798      	blx	r3
 800371e:	e7dd      	b.n	80036dc <Vector90+0x20c>
        usb_lld_start_in(usbp, ep);
        osalSysUnlockFromISR();
      }
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <Vector90+0x270>)
 8003722:	2201      	movs	r2, #1
 8003724:	891b      	ldrh	r3, [r3, #8]
 8003726:	40a2      	lsls	r2, r4
 8003728:	ea23 0302 	bic.w	r3, r3, r2
 800372c:	4a04      	ldr	r2, [pc, #16]	; (8003740 <Vector90+0x270>)
 800372e:	4621      	mov	r1, r4
 8003730:	8113      	strh	r3, [r2, #8]
 8003732:	4610      	mov	r0, r2
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4798      	blx	r3
 8003738:	e77d      	b.n	8003636 <Vector90+0x166>
 800373a:	bf00      	nop
 800373c:	40005c00 	.word	0x40005c00
 8003740:	20000850 	.word	0x20000850
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8003744:	689b      	ldr	r3, [r3, #8]

  nhw = n / 2;
  while (nhw > 0) {
 8003746:	ea5f 0258 	movs.w	r2, r8, lsr #1
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 800374a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800374e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003752:	ea4f 0343 	mov.w	r3, r3, lsl #1
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
 8003756:	68c9      	ldr	r1, [r1, #12]
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8003758:	9302      	str	r3, [sp, #8]

  nhw = n / 2;
  while (nhw > 0) {
 800375a:	9203      	str	r2, [sp, #12]
 800375c:	d021      	beq.n	80037a2 <Vector90+0x2d2>
 800375e:	4610      	mov	r0, r2
 8003760:	469e      	mov	lr, r3
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8003762:	694b      	ldr	r3, [r1, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 8003764:	f85e 2b04 	ldr.w	r2, [lr], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 8003768:	f103 0901 	add.w	r9, r3, #1
 800376c:	f8c1 9014 	str.w	r9, [r1, #20]
 8003770:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 8003772:	690b      	ldr	r3, [r1, #16]
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8003774:	ea4f 2c12 	mov.w	ip, r2, lsr #8
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
 8003778:	694a      	ldr	r2, [r1, #20]
 800377a:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 800377c:	bf28      	it	cs
 800377e:	68ca      	ldrcs	r2, [r1, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8003780:	1c53      	adds	r3, r2, #1
 8003782:	614b      	str	r3, [r1, #20]
 8003784:	f882 c000 	strb.w	ip, [r2]
    if (iqp->q_wrptr >= iqp->q_top)
 8003788:	690b      	ldr	r3, [r1, #16]
 800378a:	694a      	ldr	r2, [r1, #20]
 800378c:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 800378e:	bf24      	itt	cs
 8003790:	68cb      	ldrcs	r3, [r1, #12]
 8003792:	614b      	strcs	r3, [r1, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 8003794:	3801      	subs	r0, #1
 8003796:	d1e4      	bne.n	8003762 <Vector90+0x292>
 8003798:	9b02      	ldr	r3, [sp, #8]
 800379a:	9a03      	ldr	r2, [sp, #12]
 800379c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80037a0:	9302      	str	r3, [sp, #8]
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 80037a2:	9b01      	ldr	r3, [sp, #4]
 80037a4:	07da      	lsls	r2, r3, #31
 80037a6:	d50b      	bpl.n	80037c0 <Vector90+0x2f0>
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 80037a8:	9a02      	ldr	r2, [sp, #8]
 80037aa:	694b      	ldr	r3, [r1, #20]
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	1c58      	adds	r0, r3, #1
 80037b0:	6148      	str	r0, [r1, #20]
 80037b2:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 80037b4:	690b      	ldr	r3, [r1, #16]
 80037b6:	694a      	ldr	r2, [r1, #20]
 80037b8:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 80037ba:	bf24      	itt	cs
 80037bc:	68cb      	ldrcs	r3, [r1, #12]
 80037be:	614b      	strcs	r3, [r1, #20]
 80037c0:	2320      	movs	r3, #32
 80037c2:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  osalSysLockFromISR();

  iqp->q_counter += n;
 80037c6:	688b      	ldr	r3, [r1, #8]
 80037c8:	4608      	mov	r0, r1
 80037ca:	4443      	add	r3, r8
 80037cc:	608b      	str	r3, [r1, #8]
 80037ce:	2100      	movs	r1, #0
 80037d0:	f7fd fd2e 	bl	8001230 <chThdDequeueAllI>
 80037d4:	2300      	movs	r3, #0
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	69b9      	ldr	r1, [r7, #24]
 80037dc:	e763      	b.n	80036a6 <Vector90+0x1d6>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 80037de:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 80037e2:	f8de 100c 	ldr.w	r1, [lr, #12]
 80037e6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80037ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80037ee:	4418      	add	r0, r3
 80037f0:	0040      	lsls	r0, r0, #1
 80037f2:	f7ff fccd 	bl	8003190 <usb_packet_write_from_queue>
 80037f6:	e706      	b.n	8003606 <Vector90+0x136>
  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80037f8:	f8df b074 	ldr.w	fp, [pc, #116]	; 8003870 <Vector90+0x3a0>

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 80037fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80037fe:	f8db 1004 	ldr.w	r1, [fp, #4]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8003802:	f022 0208 	bic.w	r2, r2, #8
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8003806:	680d      	ldr	r5, [r1, #0]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8003808:	641a      	str	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800380a:	2d00      	cmp	r5, #0
 800380c:	f43f ae83 	beq.w	8003516 <Vector90+0x46>
 8003810:	4658      	mov	r0, fp
 8003812:	2104      	movs	r1, #4
 8003814:	47a8      	blx	r5
 8003816:	e67e      	b.n	8003516 <Vector90+0x46>
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8003818:	f8df b054 	ldr.w	fp, [pc, #84]	; 8003870 <Vector90+0x3a0>
  usbp->status        = 0;
 800381c:	2300      	movs	r3, #0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 800381e:	2202      	movs	r2, #2
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8003820:	4619      	mov	r1, r3
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 8003822:	f8ab 307c 	strh.w	r3, [fp, #124]	; 0x7c
  usbp->address       = 0;
 8003826:	f88b 307e 	strb.w	r3, [fp, #126]	; 0x7e
  usbp->configuration = 0;
 800382a:	f88b 307f 	strb.w	r3, [fp, #127]	; 0x7f
  usbp->transmitting  = 0;
 800382e:	f8ab 3008 	strh.w	r3, [fp, #8]
  usbp->receiving     = 0;
 8003832:	f8ab 300a 	strh.w	r3, [fp, #10]
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8003836:	f88b 2000 	strb.w	r2, [fp]
 800383a:	f10b 0308 	add.w	r3, fp, #8
 800383e:	f10b 0228 	add.w	r2, fp, #40	; 0x28
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8003842:	f843 1f04 	str.w	r1, [r3, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8003846:	4293      	cmp	r3, r2
    usbp->epc[i] = NULL;
 8003848:	f04f 0500 	mov.w	r5, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 800384c:	d1f9      	bne.n	8003842 <Vector90+0x372>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 800384e:	4808      	ldr	r0, [pc, #32]	; (8003870 <Vector90+0x3a0>)
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8003850:	f88b 5064 	strb.w	r5, [fp, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8003854:	f7ff fe14 	bl	8003480 <usb_lld_reset>
  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
    _usb_reset(usbp);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8003858:	f8db 3004 	ldr.w	r3, [fp, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	b113      	cbz	r3, 8003866 <Vector90+0x396>
 8003860:	4629      	mov	r1, r5
 8003862:	4803      	ldr	r0, [pc, #12]	; (8003870 <Vector90+0x3a0>)
 8003864:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_RESET;
 8003866:	4b03      	ldr	r3, [pc, #12]	; (8003874 <Vector90+0x3a4>)
 8003868:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
 800386e:	e637      	b.n	80034e0 <Vector90+0x10>
 8003870:	20000850 	.word	0x20000850
 8003874:	40005c00 	.word	0x40005c00
	...

08003880 <_pal_lld_setgroupmode>:
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 8003880:	2a03      	cmp	r2, #3
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8003882:	b5f0      	push	{r4, r5, r6, r7, lr}
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 8003884:	d02c      	beq.n	80038e0 <_pal_lld_setgroupmode+0x60>
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
 8003886:	2a04      	cmp	r2, #4
    port->BRR = mask;
 8003888:	bf08      	it	eq
 800388a:	6141      	streq	r1, [r0, #20]
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	461c      	mov	r4, r3
 8003890:	461d      	mov	r5, r3
 8003892:	461e      	mov	r6, r3

  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
 8003894:	f8df e04c 	ldr.w	lr, [pc, #76]	; 80038e4 <_pal_lld_setgroupmode+0x64>
 8003898:	2708      	movs	r7, #8
 800389a:	f81e 2002 	ldrb.w	r2, [lr, r2]
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 800389e:	f011 0f80 	tst.w	r1, #128	; 0x80
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
 80038a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    mh <<= 4;
    crl <<= 4;
 80038a6:	ea4f 1303 	mov.w	r3, r3, lsl #4
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
 80038aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
    crl <<= 4;
    crh <<= 4;
 80038ae:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
 80038b2:	bf0c      	ite	eq
 80038b4:	f045 050f 	orreq.w	r5, r5, #15
    else
      crl |= cfg;
 80038b8:	4313      	orrne	r3, r2
    if ((mask & 0x8000) == 0)
 80038ba:	f411 4f00 	tst.w	r1, #32768	; 0x8000
      mh |= 0xf;
 80038be:	bf0c      	ite	eq
 80038c0:	f046 060f 	orreq.w	r6, r6, #15
    else
      crh |= cfg;
 80038c4:	4314      	orrne	r4, r2
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 80038c6:	3f01      	subs	r7, #1
      crl |= cfg;
    if ((mask & 0x8000) == 0)
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
 80038c8:	ea4f 0141 	mov.w	r1, r1, lsl #1
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 80038cc:	d1e7      	bne.n	800389e <_pal_lld_setgroupmode+0x1e>
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
  }
  port->CRH = (port->CRH & mh) | crh;
 80038ce:	6842      	ldr	r2, [r0, #4]
 80038d0:	4016      	ands	r6, r2
 80038d2:	4334      	orrs	r4, r6
 80038d4:	6044      	str	r4, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 80038d6:	6802      	ldr	r2, [r0, #0]
 80038d8:	4015      	ands	r5, r2
 80038da:	432b      	orrs	r3, r5
 80038dc:	6003      	str	r3, [r0, #0]
 80038de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
 80038e0:	6101      	str	r1, [r0, #16]
 80038e2:	e7d3      	b.n	800388c <_pal_lld_setgroupmode+0xc>
 80038e4:	080044a0 	.word	0x080044a0
	...

080038f0 <chSchWakeupS.constprop.44>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80038f0:	b470      	push	{r4, r5, r6}
 80038f2:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80038f4:	4b13      	ldr	r3, [pc, #76]	; (8003944 <chSchWakeupS.constprop.44+0x54>)
 80038f6:	6881      	ldr	r1, [r0, #8]
 80038f8:	699d      	ldr	r5, [r3, #24]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 80038fa:	2600      	movs	r6, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80038fc:	68a8      	ldr	r0, [r5, #8]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 80038fe:	6226      	str	r6, [r4, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8003900:	4281      	cmp	r1, r0
 8003902:	d80b      	bhi.n	800391c <chSchWakeupS.constprop.44+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8003904:	7726      	strb	r6, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8003906:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	4291      	cmp	r1, r2
 800390c:	d9fb      	bls.n	8003906 <chSchWakeupS.constprop.44+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800390e:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8003910:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8003912:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8003914:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8003916:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8003918:	bc70      	pop	{r4, r5, r6}
 800391a:	4770      	bx	lr
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 800391c:	461a      	mov	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800391e:	772e      	strb	r6, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8003920:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8003922:	6891      	ldr	r1, [r2, #8]
 8003924:	4288      	cmp	r0, r1
 8003926:	d9fb      	bls.n	8003920 <chSchWakeupS.constprop.44+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8003928:	6850      	ldr	r0, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800392a:	2601      	movs	r6, #1
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800392c:	6068      	str	r0, [r5, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800392e:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8003930:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 8003932:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8003934:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 8003936:	4629      	mov	r1, r5
 8003938:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800393a:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800393c:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 800393e:	f7fc bc5f 	b.w	8000200 <_port_switch>
 8003942:	bf00      	nop
 8003944:	20001960 	.word	0x20001960
	...

08003950 <chThdCreateStatic.constprop.43>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8003950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003954:	469a      	mov	sl, r3
 8003956:	4696      	mov	lr, r2
 8003958:	4604      	mov	r4, r0
 800395a:	2320      	movs	r3, #32
 800395c:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8003960:	4e17      	ldr	r6, [pc, #92]	; (80039c0 <chThdCreateStatic.constprop.43+0x70>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8003962:	3924      	subs	r1, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8003964:	6972      	ldr	r2, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8003966:	f8df b05c 	ldr.w	fp, [pc, #92]	; 80039c4 <chThdCreateStatic.constprop.43+0x74>
 800396a:	2500      	movs	r5, #0
 800396c:	1847      	adds	r7, r0, r1
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800396e:	f100 0328 	add.w	r3, r0, #40	; 0x28
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8003972:	f100 0c24 	add.w	ip, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8003976:	f04f 0902 	mov.w	r9, #2
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800397a:	f04f 0801 	mov.w	r8, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800397e:	60c7      	str	r7, [r0, #12]
 8003980:	f840 a001 	str.w	sl, [r0, r1]
 8003984:	607d      	str	r5, [r7, #4]
 8003986:	f8c7 b020 	str.w	fp, [r7, #32]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800398a:	f8c0 e008 	str.w	lr, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800398e:	6106      	str	r6, [r0, #16]
 8003990:	6142      	str	r2, [r0, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8003992:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8003994:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 8003998:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800399a:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800399c:	6185      	str	r5, [r0, #24]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800399e:	f880 901c 	strb.w	r9, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80039a2:	f880 801e 	strb.w	r8, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80039a6:	6110      	str	r0, [r2, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80039a8:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80039ac:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 80039ae:	62c3      	str	r3, [r0, #44]	; 0x2c
 80039b0:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 80039b2:	f7ff ff9d 	bl	80038f0 <chSchWakeupS.constprop.44>
 80039b6:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 80039ba:	4620      	mov	r0, r4
 80039bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c0:	20001960 	.word	0x20001960
 80039c4:	08000211 	.word	0x08000211
	...

080039d0 <chTMStartMeasurementX.constprop.41>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80039d0:	4b01      	ldr	r3, [pc, #4]	; (80039d8 <chTMStartMeasurementX.constprop.41+0x8>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80039d4:	6083      	str	r3, [r0, #8]
 80039d6:	4770      	bx	lr
 80039d8:	e0001000 	.word	0xe0001000
 80039dc:	00000000 	.word	0x00000000

080039e0 <icu_lld_serve_interrupt.constprop.18>:
/**
 * @brief   Shared IRQ handler.
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
 80039e0:	b538      	push	{r3, r4, r5, lr}
  uint32_t sr;

  sr  = icup->tim->SR;
 80039e2:	4d25      	ldr	r5, [pc, #148]	; (8003a78 <icu_lld_serve_interrupt.constprop.18+0x98>)
 80039e4:	68eb      	ldr	r3, [r5, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 80039e6:	6869      	ldr	r1, [r5, #4]
 * @param[in] icup      pointer to the @p ICUDriver object
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 80039e8:	691a      	ldr	r2, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80039ea:	68dc      	ldr	r4, [r3, #12]
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 80039ec:	7d08      	ldrb	r0, [r1, #20]
 80039ee:	4014      	ands	r4, r2
 */
static void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80039f0:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 80039f2:	43d2      	mvns	r2, r2
 80039f4:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 80039f6:	b9f8      	cbnz	r0, 8003a38 <icu_lld_serve_interrupt.constprop.18+0x58>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80039f8:	0760      	lsls	r0, r4, #29
 80039fa:	d50c      	bpl.n	8003a16 <icu_lld_serve_interrupt.constprop.18+0x36>
      _icu_isr_invoke_width_cb(icup);
 80039fc:	782b      	ldrb	r3, [r5, #0]
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d004      	beq.n	8003a0c <icu_lld_serve_interrupt.constprop.18+0x2c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8003a02:	07a1      	lsls	r1, r4, #30
 8003a04:	d40d      	bmi.n	8003a22 <icu_lld_serve_interrupt.constprop.18+0x42>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8003a06:	07e4      	lsls	r4, r4, #31
 8003a08:	d40f      	bmi.n	8003a2a <icu_lld_serve_interrupt.constprop.18+0x4a>
 8003a0a:	bd38      	pop	{r3, r4, r5, pc}
  sr  = icup->tim->SR;
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 8003a0c:	688b      	ldr	r3, [r1, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d02b      	beq.n	8003a6a <icu_lld_serve_interrupt.constprop.18+0x8a>
 8003a12:	4628      	mov	r0, r5
 8003a14:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8003a16:	07a1      	lsls	r1, r4, #30
 8003a18:	d5f5      	bpl.n	8003a06 <icu_lld_serve_interrupt.constprop.18+0x26>
      _icu_isr_invoke_period_cb(icup);
 8003a1a:	782b      	ldrb	r3, [r5, #0]
 8003a1c:	4a16      	ldr	r2, [pc, #88]	; (8003a78 <icu_lld_serve_interrupt.constprop.18+0x98>)
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d01c      	beq.n	8003a5c <icu_lld_serve_interrupt.constprop.18+0x7c>
 8003a22:	2304      	movs	r3, #4
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8003a24:	07e4      	lsls	r4, r4, #31
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 8003a26:	702b      	strb	r3, [r5, #0]
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8003a28:	d5ef      	bpl.n	8003a0a <icu_lld_serve_interrupt.constprop.18+0x2a>
    _icu_isr_invoke_overflow_cb(icup);
 8003a2a:	686b      	ldr	r3, [r5, #4]
 8003a2c:	4812      	ldr	r0, [pc, #72]	; (8003a78 <icu_lld_serve_interrupt.constprop.18+0x98>)
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	4798      	blx	r3
 8003a32:	2303      	movs	r3, #3
 8003a34:	702b      	strb	r3, [r5, #0]
 8003a36:	bd38      	pop	{r3, r4, r5, pc}
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8003a38:	07a2      	lsls	r2, r4, #30
 8003a3a:	d509      	bpl.n	8003a50 <icu_lld_serve_interrupt.constprop.18+0x70>
      _icu_isr_invoke_width_cb(icup);
 8003a3c:	782b      	ldrb	r3, [r5, #0]
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d002      	beq.n	8003a48 <icu_lld_serve_interrupt.constprop.18+0x68>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8003a42:	0763      	lsls	r3, r4, #29
 8003a44:	d4ed      	bmi.n	8003a22 <icu_lld_serve_interrupt.constprop.18+0x42>
 8003a46:	e7de      	b.n	8003a06 <icu_lld_serve_interrupt.constprop.18+0x26>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
 8003a48:	688b      	ldr	r3, [r1, #8]
 8003a4a:	b18b      	cbz	r3, 8003a70 <icu_lld_serve_interrupt.constprop.18+0x90>
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8003a50:	0763      	lsls	r3, r4, #29
 8003a52:	d5d8      	bpl.n	8003a06 <icu_lld_serve_interrupt.constprop.18+0x26>
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_period_cb(icup);
 8003a54:	782b      	ldrb	r3, [r5, #0]
 8003a56:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <icu_lld_serve_interrupt.constprop.18+0x98>)
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d1e2      	bne.n	8003a22 <icu_lld_serve_interrupt.constprop.18+0x42>
 8003a5c:	6851      	ldr	r1, [r2, #4]
 8003a5e:	68cb      	ldr	r3, [r1, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0de      	beq.n	8003a22 <icu_lld_serve_interrupt.constprop.18+0x42>
 8003a64:	4804      	ldr	r0, [pc, #16]	; (8003a78 <icu_lld_serve_interrupt.constprop.18+0x98>)
 8003a66:	4798      	blx	r3
 8003a68:	e7db      	b.n	8003a22 <icu_lld_serve_interrupt.constprop.18+0x42>
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8003a6a:	07a0      	lsls	r0, r4, #30
 8003a6c:	d4f7      	bmi.n	8003a5e <icu_lld_serve_interrupt.constprop.18+0x7e>
 8003a6e:	e7ca      	b.n	8003a06 <icu_lld_serve_interrupt.constprop.18+0x26>
      _icu_isr_invoke_period_cb(icup);
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8003a70:	0762      	lsls	r2, r4, #29
 8003a72:	d4f4      	bmi.n	8003a5e <icu_lld_serve_interrupt.constprop.18+0x7e>
 8003a74:	e7c7      	b.n	8003a06 <icu_lld_serve_interrupt.constprop.18+0x26>
 8003a76:	bf00      	nop
 8003a78:	20001ab0 	.word	0x20001ab0
 8003a7c:	00000000 	.word	0x00000000

08003a80 <_strtok.constprop.17>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8003a80:	b538      	push	{r3, r4, r5, lr}
 8003a82:	460d      	mov	r5, r1
  char *token;
  if (str)
 8003a84:	4604      	mov	r4, r0
 8003a86:	b190      	cbz	r0, 8003aae <_strtok.constprop.17+0x2e>
    *saveptr = str;
 8003a88:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	490b      	ldr	r1, [pc, #44]	; (8003abc <_strtok.constprop.17+0x3c>)
 8003a8e:	f000 f90f 	bl	8003cb0 <strspn>
 8003a92:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8003a94:	4620      	mov	r0, r4
 8003a96:	4909      	ldr	r1, [pc, #36]	; (8003abc <_strtok.constprop.17+0x3c>)
 8003a98:	f000 f8e2 	bl	8003c60 <strpbrk>
  if (*saveptr)
 8003a9c:	b160      	cbz	r0, 8003ab8 <_strtok.constprop.17+0x38>
    *(*saveptr)++ = '\0';
 8003a9e:	1c42      	adds	r2, r0, #1
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	602a      	str	r2, [r5, #0]
 8003aa4:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8003aa6:	7823      	ldrb	r3, [r4, #0]
 8003aa8:	b123      	cbz	r3, 8003ab4 <_strtok.constprop.17+0x34>
 8003aaa:	4620      	mov	r0, r4
}
 8003aac:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 8003aae:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8003ab0:	2c00      	cmp	r4, #0
 8003ab2:	d1ea      	bne.n	8003a8a <_strtok.constprop.17+0xa>
    return NULL;
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8003ab8:	6028      	str	r0, [r5, #0]
 8003aba:	e7f4      	b.n	8003aa6 <_strtok.constprop.17+0x26>
 8003abc:	080044d0 	.word	0x080044d0

08003ac0 <long_to_string_with_divisor.constprop.16>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8003ac0:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8003ac2:	f100 070b 	add.w	r7, r0, #11
 8003ac6:	463c      	mov	r4, r7
 8003ac8:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 8003aca:	fbb1 f6f2 	udiv	r6, r1, r2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 8003ace:	fbb5 f5f2 	udiv	r5, r5, r2
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 8003ad2:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8003ad6:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8003ada:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8003adc:	bfc8      	it	gt
 8003ade:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
 8003ae8:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8003aea:	2d00      	cmp	r5, #0
 8003aec:	d1ed      	bne.n	8003aca <long_to_string_with_divisor.constprop.16+0xa>

  i = (int)(p + MAX_FILLER - q);
 8003aee:	1b3a      	subs	r2, r7, r4
 8003af0:	4402      	add	r2, r0
 8003af2:	e001      	b.n	8003af8 <long_to_string_with_divisor.constprop.16+0x38>
 8003af4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8003af8:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8003afc:	4290      	cmp	r0, r2
 8003afe:	d1f9      	bne.n	8003af4 <long_to_string_with_divisor.constprop.16+0x34>

  return p;
}
 8003b00:	bcf0      	pop	{r4, r5, r6, r7}
 8003b02:	4770      	bx	lr
	...

08003b10 <memcmp>:
 8003b10:	2a03      	cmp	r2, #3
 8003b12:	b470      	push	{r4, r5, r6}
 8003b14:	d926      	bls.n	8003b64 <memcmp+0x54>
 8003b16:	ea40 0301 	orr.w	r3, r0, r1
 8003b1a:	079b      	lsls	r3, r3, #30
 8003b1c:	d011      	beq.n	8003b42 <memcmp+0x32>
 8003b1e:	7804      	ldrb	r4, [r0, #0]
 8003b20:	780d      	ldrb	r5, [r1, #0]
 8003b22:	42ac      	cmp	r4, r5
 8003b24:	d122      	bne.n	8003b6c <memcmp+0x5c>
 8003b26:	4402      	add	r2, r0
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	e005      	b.n	8003b38 <memcmp+0x28>
 8003b2c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8003b30:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8003b34:	42ac      	cmp	r4, r5
 8003b36:	d119      	bne.n	8003b6c <memcmp+0x5c>
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d1f7      	bne.n	8003b2c <memcmp+0x1c>
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	bc70      	pop	{r4, r5, r6}
 8003b40:	4770      	bx	lr
 8003b42:	460c      	mov	r4, r1
 8003b44:	4603      	mov	r3, r0
 8003b46:	681e      	ldr	r6, [r3, #0]
 8003b48:	6825      	ldr	r5, [r4, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	42ae      	cmp	r6, r5
 8003b4e:	4621      	mov	r1, r4
 8003b50:	f103 0304 	add.w	r3, r3, #4
 8003b54:	f104 0404 	add.w	r4, r4, #4
 8003b58:	d104      	bne.n	8003b64 <memcmp+0x54>
 8003b5a:	3a04      	subs	r2, #4
 8003b5c:	2a03      	cmp	r2, #3
 8003b5e:	4618      	mov	r0, r3
 8003b60:	4621      	mov	r1, r4
 8003b62:	d8f0      	bhi.n	8003b46 <memcmp+0x36>
 8003b64:	2a00      	cmp	r2, #0
 8003b66:	d1da      	bne.n	8003b1e <memcmp+0xe>
 8003b68:	4610      	mov	r0, r2
 8003b6a:	e7e8      	b.n	8003b3e <memcmp+0x2e>
 8003b6c:	1b60      	subs	r0, r4, r5
 8003b6e:	bc70      	pop	{r4, r5, r6}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
	...

08003b80 <memset>:
 8003b80:	b470      	push	{r4, r5, r6}
 8003b82:	0784      	lsls	r4, r0, #30
 8003b84:	d046      	beq.n	8003c14 <memset+0x94>
 8003b86:	1e54      	subs	r4, r2, #1
 8003b88:	2a00      	cmp	r2, #0
 8003b8a:	d041      	beq.n	8003c10 <memset+0x90>
 8003b8c:	b2cd      	uxtb	r5, r1
 8003b8e:	4603      	mov	r3, r0
 8003b90:	e002      	b.n	8003b98 <memset+0x18>
 8003b92:	1e62      	subs	r2, r4, #1
 8003b94:	b3e4      	cbz	r4, 8003c10 <memset+0x90>
 8003b96:	4614      	mov	r4, r2
 8003b98:	f803 5b01 	strb.w	r5, [r3], #1
 8003b9c:	079a      	lsls	r2, r3, #30
 8003b9e:	d1f8      	bne.n	8003b92 <memset+0x12>
 8003ba0:	2c03      	cmp	r4, #3
 8003ba2:	d92e      	bls.n	8003c02 <memset+0x82>
 8003ba4:	b2cd      	uxtb	r5, r1
 8003ba6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003baa:	2c0f      	cmp	r4, #15
 8003bac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003bb0:	d919      	bls.n	8003be6 <memset+0x66>
 8003bb2:	4626      	mov	r6, r4
 8003bb4:	f103 0210 	add.w	r2, r3, #16
 8003bb8:	3e10      	subs	r6, #16
 8003bba:	2e0f      	cmp	r6, #15
 8003bbc:	f842 5c10 	str.w	r5, [r2, #-16]
 8003bc0:	f842 5c0c 	str.w	r5, [r2, #-12]
 8003bc4:	f842 5c08 	str.w	r5, [r2, #-8]
 8003bc8:	f842 5c04 	str.w	r5, [r2, #-4]
 8003bcc:	f102 0210 	add.w	r2, r2, #16
 8003bd0:	d8f2      	bhi.n	8003bb8 <memset+0x38>
 8003bd2:	f1a4 0210 	sub.w	r2, r4, #16
 8003bd6:	f022 020f 	bic.w	r2, r2, #15
 8003bda:	f004 040f 	and.w	r4, r4, #15
 8003bde:	3210      	adds	r2, #16
 8003be0:	2c03      	cmp	r4, #3
 8003be2:	4413      	add	r3, r2
 8003be4:	d90d      	bls.n	8003c02 <memset+0x82>
 8003be6:	461e      	mov	r6, r3
 8003be8:	4622      	mov	r2, r4
 8003bea:	3a04      	subs	r2, #4
 8003bec:	2a03      	cmp	r2, #3
 8003bee:	f846 5b04 	str.w	r5, [r6], #4
 8003bf2:	d8fa      	bhi.n	8003bea <memset+0x6a>
 8003bf4:	1f22      	subs	r2, r4, #4
 8003bf6:	f022 0203 	bic.w	r2, r2, #3
 8003bfa:	3204      	adds	r2, #4
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f004 0403 	and.w	r4, r4, #3
 8003c02:	b12c      	cbz	r4, 8003c10 <memset+0x90>
 8003c04:	b2c9      	uxtb	r1, r1
 8003c06:	441c      	add	r4, r3
 8003c08:	f803 1b01 	strb.w	r1, [r3], #1
 8003c0c:	42a3      	cmp	r3, r4
 8003c0e:	d1fb      	bne.n	8003c08 <memset+0x88>
 8003c10:	bc70      	pop	{r4, r5, r6}
 8003c12:	4770      	bx	lr
 8003c14:	4614      	mov	r4, r2
 8003c16:	4603      	mov	r3, r0
 8003c18:	e7c2      	b.n	8003ba0 <memset+0x20>
 8003c1a:	bf00      	nop
 8003c1c:	0000      	movs	r0, r0
	...

08003c20 <strcasecmp>:
 8003c20:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <strcasecmp+0x3c>)
 8003c22:	b430      	push	{r4, r5}
 8003c24:	681d      	ldr	r5, [r3, #0]
 8003c26:	e002      	b.n	8003c2e <strcasecmp+0xe>
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	d114      	bne.n	8003c56 <strcasecmp+0x36>
 8003c2c:	b19a      	cbz	r2, 8003c56 <strcasecmp+0x36>
 8003c2e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003c32:	18ea      	adds	r2, r5, r3
 8003c34:	7852      	ldrb	r2, [r2, #1]
 8003c36:	f002 0203 	and.w	r2, r2, #3
 8003c3a:	2a01      	cmp	r2, #1
 8003c3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c40:	bf08      	it	eq
 8003c42:	3320      	addeq	r3, #32
 8003c44:	18ac      	adds	r4, r5, r2
 8003c46:	7864      	ldrb	r4, [r4, #1]
 8003c48:	f004 0403 	and.w	r4, r4, #3
 8003c4c:	2c01      	cmp	r4, #1
 8003c4e:	d1eb      	bne.n	8003c28 <strcasecmp+0x8>
 8003c50:	3220      	adds	r2, #32
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	d0eb      	beq.n	8003c2e <strcasecmp+0xe>
 8003c56:	4618      	mov	r0, r3
 8003c58:	bc30      	pop	{r4, r5}
 8003c5a:	4770      	bx	lr
 8003c5c:	20000834 	.word	0x20000834

08003c60 <strpbrk>:
 8003c60:	b430      	push	{r4, r5}
 8003c62:	7804      	ldrb	r4, [r0, #0]
 8003c64:	b1ec      	cbz	r4, 8003ca2 <strpbrk+0x42>
 8003c66:	780d      	ldrb	r5, [r1, #0]
 8003c68:	b1ad      	cbz	r5, 8003c96 <strpbrk+0x36>
 8003c6a:	42ac      	cmp	r4, r5
 8003c6c:	d00e      	beq.n	8003c8c <strpbrk+0x2c>
 8003c6e:	460a      	mov	r2, r1
 8003c70:	e001      	b.n	8003c76 <strpbrk+0x16>
 8003c72:	429c      	cmp	r4, r3
 8003c74:	d009      	beq.n	8003c8a <strpbrk+0x2a>
 8003c76:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f9      	bne.n	8003c72 <strpbrk+0x12>
 8003c7e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8003c82:	2c00      	cmp	r4, #0
 8003c84:	d1f0      	bne.n	8003c68 <strpbrk+0x8>
 8003c86:	7815      	ldrb	r5, [r2, #0]
 8003c88:	e000      	b.n	8003c8c <strpbrk+0x2c>
 8003c8a:	4625      	mov	r5, r4
 8003c8c:	2d00      	cmp	r5, #0
 8003c8e:	bf08      	it	eq
 8003c90:	2000      	moveq	r0, #0
 8003c92:	bc30      	pop	{r4, r5}
 8003c94:	4770      	bx	lr
 8003c96:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8003c9a:	460a      	mov	r2, r1
 8003c9c:	2c00      	cmp	r4, #0
 8003c9e:	d1e3      	bne.n	8003c68 <strpbrk+0x8>
 8003ca0:	e7f1      	b.n	8003c86 <strpbrk+0x26>
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	bc30      	pop	{r4, r5}
 8003ca6:	4770      	bx	lr
	...

08003cb0 <strspn>:
 8003cb0:	b470      	push	{r4, r5, r6}
 8003cb2:	7804      	ldrb	r4, [r0, #0]
 8003cb4:	b1a4      	cbz	r4, 8003ce0 <strspn+0x30>
 8003cb6:	4605      	mov	r5, r0
 8003cb8:	780e      	ldrb	r6, [r1, #0]
 8003cba:	b14e      	cbz	r6, 8003cd0 <strspn+0x20>
 8003cbc:	42b4      	cmp	r4, r6
 8003cbe:	d00a      	beq.n	8003cd6 <strspn+0x26>
 8003cc0:	460a      	mov	r2, r1
 8003cc2:	e001      	b.n	8003cc8 <strspn+0x18>
 8003cc4:	429c      	cmp	r4, r3
 8003cc6:	d006      	beq.n	8003cd6 <strspn+0x26>
 8003cc8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f9      	bne.n	8003cc4 <strspn+0x14>
 8003cd0:	1a28      	subs	r0, r5, r0
 8003cd2:	bc70      	pop	{r4, r5, r6}
 8003cd4:	4770      	bx	lr
 8003cd6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8003cda:	2c00      	cmp	r4, #0
 8003cdc:	d1ed      	bne.n	8003cba <strspn+0xa>
 8003cde:	e7f7      	b.n	8003cd0 <strspn+0x20>
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	e7f6      	b.n	8003cd2 <strspn+0x22>
	...
 8003cf0:	00f34112 	.word	0x00f34112
	...

08003d00 <zero_status>:
	...

08003d10 <active_status>:
	...

08003d20 <halted_status>:
 8003d20:	00000001 00000000 00000000 00000000     ................

08003d30 <vcom_configuration_descriptor_data>:
 8003d30:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8003d40:	24050001 05011000 01000124 02022404     ...$....$....$..
 8003d50:	00062405 82050701 ff000803 00010409     .$..............
 8003d60:	00000a02 01050700 00004002 02810507     .........@......
 8003d70:	00000040 00000000 00000000 00000000     @...............

08003d80 <ep2config>:
 8003d80:	00000003 00000000 080002b1 00000000     ................
 8003d90:	00000010 20000b78 00000000 00000001     ....x.. ........
	...

08003db0 <vcom_strings>:
 8003db0:	00000004 08003f10 00000012 08003e50     .....?......P>..
 8003dc0:	00000038 08003e10 00000008 08003e00     8....>.......>..

08003dd0 <vcom_device_descriptor>:
 8003dd0:	00000012 08003ef0 00000000 00000000     .....>..........

08003de0 <vmt>:
 8003de0:	080007a1 080008c1 08000821 08000931     ........!...1...
 8003df0:	08000811 08000921 08000791 080008b1     ....!...........

08003e00 <vcom_string3>:
 8003e00:	00330308 00310030 00000000 00000000     ..3.0.1.........

08003e10 <vcom_string2>:
 8003e10:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 8003e20:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 8003e30:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 8003e40:	006f0050 00740072 00000000 00000000     P.o.r.t.........

08003e50 <vcom_string1>:
 8003e50:	004c0312 00610065 004c0066 00620061     ..L.e.a.f.L.a.b.
 8003e60:	00000073 00000000 00000000 00000000     s...............

08003e70 <_stm32_dma_streams>:
 8003e70:	40020008 40020004 000b0000 4002001c     ...@...@.......@
 8003e80:	40020004 000c0104 40020030 40020004     ...@....0..@...@
 8003e90:	000d0208 40020044 40020004 000e030c     ....D..@...@....
 8003ea0:	40020058 40020004 000f0410 4002006c     X..@...@....l..@
 8003eb0:	40020004 00100514 40020080 40020004     ...@.......@...@
 8003ec0:	00110618 00000000 00000000 00000000     ................

08003ed0 <ch_debug>:
 8003ed0:	6e69616d 18011600 08440204 1814100c     main......D.....
 8003ee0:	1e1d1c00 00000000 00000000 00000000     ................

08003ef0 <vcom_device_descriptor_data>:
 8003ef0:	01100112 40000002 00041eaf 02010200     .......@........
 8003f00:	00000103 00000000 00000000 00000000     ................

08003f10 <vcom_string0>:
 8003f10:	04090304 00000000 00000000 00000000     ................

08003f20 <vcom_configuration_descriptor>:
 8003f20:	00000043 08003d30 00000000 00000000     C...0=..........
 8003f30:	6e696c62 0072656b 74696e49 6d6f4320     blinker.Init Com
 8003f40:	74656c70 0a0d6465 00000000 756c6156     pleted......Valu
 8003f50:	203a2065 0d643525 00000000 67617355     e : %5d.....Usag
 8003f60:	65203a65 0a0d636e 00000000 67617355     e: enc......Usag
 8003f70:	6d203a65 0a0d6d65 00000000 2066724e     e: mem......Nrf 
 8003f80:	00005852 74696e49 65764f20 00000072     RX..Init Over...
 8003f90:	656c6469 00000000 006d656d 00636e65     idle....mem.enc.

08003fa0 <serusbcfg>:
 8003fa0:	20000850 00020101 00000000 00000000     P.. ............

08003fb0 <commands>:
 8003fb0:	08003f98 08001511 08003f9c 080014c1     .?.......?......
	...

08003fd0 <usbcfg>:
 8003fd0:	08001521 080013b1 080002c1 00000000     !...............

08003fe0 <crc16_tab>:
 8003fe0:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
 8003ff0:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
 8004000:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
 8004010:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
 8004020:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
 8004030:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
 8004040:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
 8004050:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
 8004060:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
 8004070:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
 8004080:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
 8004090:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
 80040a0:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
 80040b0:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
 80040c0:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
 80040d0:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
 80040e0:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
 80040f0:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
 8004100:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
 8004110:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
 8004120:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
 8004130:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
 8004140:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
 8004150:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
 8004160:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
 8004170:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
 8004180:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
 8004190:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
 80041a0:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
 80041b0:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
 80041c0:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
 80041d0:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

080041e0 <shell_cfg1>:
 80041e0:	20000920 08003fb0 00000000 00000000      .. .?..........

080041f0 <ep1config>:
 80041f0:	00000002 00000000 08001071 08000ff1     ........q.......
 8004200:	00400040 20000be8 20000838 00000002     @.@.... 8.. ....
	...
 8004220:	2066724e 00005854 6c756e28 0000296c     Nrf TX..(null)..
 8004230:	6c656873 0000006c 54530a0d 28686365     shell.....STech(
 8004240:	67616173 742e7261 40686365 69616d67     saagar.tech@gmai
 8004250:	6f632e6c 0a0d296d 00000000 73657567     l.com)......gues
 8004260:	00203e74 0000445e 206f6f74 796e616d     t> .^D..too many
 8004270:	67726120 6e656d75 0a0d7374 00000000      arguments......
 8004280:	74697865 00000000 67617355 25203a65     exit....Usage: %
 8004290:	000a0d73 706c6568 00000000 6d6d6f43     s...help....Comm
 80042a0:	73646e61 6568203a 6520706c 20746978     ands: help exit 
 80042b0:	00000000 00207325 00007325 0a0d3f20     ....%s .%s.. ?..
 80042c0:	00000000 6f6c0a0d 74756f67 00000000     ......logout....
 80042d0:	74737973 00656d69 0d756c25 0000000a     systime.%lu.....
 80042e0:	6f666e69 00000000 6e72654b 203a6c65     info....Kernel: 
 80042f0:	20202020 73252020 00000a0d 2e302e33           %s....3.0.
 8004300:	00000031 706d6f43 72656c69 2020203a     1...Compiler:   
 8004310:	73252020 00000a0d 20434347 2e392e34       %s....GCC 4.9.
 8004320:	30322033 35303531 28203932 656c6572     3 20150529 (rele
 8004330:	29657361 52415b20 6d652f4d 64646562     ase) [ARM/embedd
 8004340:	342d6465 622d395f 636e6172 65722068     ed-4_9-branch re
 8004350:	69736976 32206e6f 37393732 00005d37     vision 227977]..
 8004360:	68637241 63657469 65727574 7325203a     Architecture: %s
 8004370:	00000a0d 764d5241 004d2d37 65726f43     ....ARMv7-M.Core
 8004380:	72615620 746e6169 7325203a 00000a0d      Variant: %s....
 8004390:	74726f43 4d2d7865 00000033 74726f50     Cortex-M3...Port
 80043a0:	666e4920 20203a6f 73252020 00000a0d      Info:    %s....
 80043b0:	61766441 6465636e 72656b20 206c656e     Advanced kernel 
 80043c0:	65646f6d 00000000 74616c50 6d726f66     mode....Platform
 80043d0:	2020203a 73252020 00000a0d 334d5453     :     %s....STM3
 80043e0:	30314632 65502078 726f6672 636e616d     2F10x Performanc
 80043f0:	694c2065 4d20656e 75696465 6544206d     e Line Medium De
 8004400:	7469736e 00000079 72616f42 20203a64     nsity...Board:  
 8004410:	20202020 73252020 00000a0d 6661654c           %s....Leaf
 8004420:	7362614c 70614d20 4d20656c 00696e69     Labs Maple Mini.
 8004430:	6c697542 69742064 203a656d 73252020     Build time:   %s
 8004440:	73257325 00000a0d 20766f4e 32203931     %s%s....Nov 19 2
 8004450:	00373130 00202d20 323a3332 37343a34     017. - .23:24:47
	...

08004470 <ep0config>:
 8004470:	00000000 08000a81 08000991 08000411     ................
 8004480:	00400040 20001940 20001940 00000001     @.@.@.. @.. ....
 8004490:	20001954 00000000 00000000 00000000     T.. ............

080044a0 <cfgtab.7081>:
 80044a0:	08040204 07030008 08080808 08080808     ................
 80044b0:	00000f0b 00000000 00000000 00000000     ................

080044c0 <CSWTCH.32>:
 80044c0:	00000400 00000600 00000000 00000000     ................
 80044d0:	00000920 00000000 00000000 00000000      ...............

080044e0 <_ctype_>:
 80044e0:	20202000 20202020 28282020 20282828     .         ((((( 
 80044f0:	20202020 20202020 20202020 20202020                     
 8004500:	10108820 10101010 10101010 10101010      ...............
 8004510:	04040410 04040404 10040404 10101010     ................
 8004520:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8004530:	01010101 01010101 01010101 10101010     ................
 8004540:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8004550:	02020202 02020202 02020202 10101010     ................
 8004560:	00000020 00000000 00000000 00000000      ...............
	...
