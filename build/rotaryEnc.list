
build/rotaryEnc.elf:     file format elf32-littlearm


Disassembly of section .text:

08000140 <Reset_Handler>:
 8000140:	b672      	cpsid	i
 8000142:	4821      	ldr	r0, [pc, #132]	; (80001c8 <endfiniloop+0x4>)
 8000144:	f380 8809 	msr	PSP, r0
 8000148:	2002      	movs	r0, #2
 800014a:	f380 8814 	msr	CONTROL, r0
 800014e:	f3bf 8f6f 	isb	sy
 8000152:	f001 f995 	bl	8001480 <__core_init>
 8000156:	f003 f83b 	bl	80031d0 <__early_init>
 800015a:	481c      	ldr	r0, [pc, #112]	; (80001cc <endfiniloop+0x8>)
 800015c:	491c      	ldr	r1, [pc, #112]	; (80001d0 <endfiniloop+0xc>)
 800015e:	4a1d      	ldr	r2, [pc, #116]	; (80001d4 <endfiniloop+0x10>)

08000160 <msloop>:
 8000160:	4291      	cmp	r1, r2
 8000162:	bf3c      	itt	cc
 8000164:	f841 0b04 	strcc.w	r0, [r1], #4
 8000168:	e7fa      	bcc.n	8000160 <msloop>
 800016a:	491b      	ldr	r1, [pc, #108]	; (80001d8 <endfiniloop+0x14>)
 800016c:	4a16      	ldr	r2, [pc, #88]	; (80001c8 <endfiniloop+0x4>)

0800016e <psloop>:
 800016e:	4291      	cmp	r1, r2
 8000170:	bf3c      	itt	cc
 8000172:	f841 0b04 	strcc.w	r0, [r1], #4
 8000176:	e7fa      	bcc.n	800016e <psloop>
 8000178:	4918      	ldr	r1, [pc, #96]	; (80001dc <endfiniloop+0x18>)
 800017a:	4a19      	ldr	r2, [pc, #100]	; (80001e0 <endfiniloop+0x1c>)
 800017c:	4b19      	ldr	r3, [pc, #100]	; (80001e4 <endfiniloop+0x20>)

0800017e <dloop>:
 800017e:	429a      	cmp	r2, r3
 8000180:	bf3e      	ittt	cc
 8000182:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000186:	f842 0b04 	strcc.w	r0, [r2], #4
 800018a:	e7f8      	bcc.n	800017e <dloop>
 800018c:	2000      	movs	r0, #0
 800018e:	4916      	ldr	r1, [pc, #88]	; (80001e8 <endfiniloop+0x24>)
 8000190:	4a16      	ldr	r2, [pc, #88]	; (80001ec <endfiniloop+0x28>)

08000192 <bloop>:
 8000192:	4291      	cmp	r1, r2
 8000194:	bf3c      	itt	cc
 8000196:	f841 0b04 	strcc.w	r0, [r1], #4
 800019a:	e7fa      	bcc.n	8000192 <bloop>
 800019c:	f001 f968 	bl	8001470 <__late_init>
 80001a0:	4c13      	ldr	r4, [pc, #76]	; (80001f0 <endfiniloop+0x2c>)
 80001a2:	4d14      	ldr	r5, [pc, #80]	; (80001f4 <endfiniloop+0x30>)

080001a4 <initloop>:
 80001a4:	42ac      	cmp	r4, r5
 80001a6:	da03      	bge.n	80001b0 <endinitloop>
 80001a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80001ac:	4788      	blx	r1
 80001ae:	e7f9      	b.n	80001a4 <initloop>

080001b0 <endinitloop>:
 80001b0:	f002 f8d6 	bl	8002360 <main>
 80001b4:	4c10      	ldr	r4, [pc, #64]	; (80001f8 <endfiniloop+0x34>)
 80001b6:	4d11      	ldr	r5, [pc, #68]	; (80001fc <endfiniloop+0x38>)

080001b8 <finiloop>:
 80001b8:	42ac      	cmp	r4, r5
 80001ba:	da03      	bge.n	80001c4 <endfiniloop>
 80001bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80001c0:	4788      	blx	r1
 80001c2:	e7f9      	b.n	80001b8 <finiloop>

080001c4 <endfiniloop>:
 80001c4:	f001 b94c 	b.w	8001460 <__default_exit>
 80001c8:	20000800 	.word	0x20000800
 80001cc:	55555555 	.word	0x55555555
 80001d0:	20000000 	.word	0x20000000
 80001d4:	20000400 	.word	0x20000400
 80001d8:	20000400 	.word	0x20000400
 80001dc:	08004858 	.word	0x08004858
 80001e0:	20000800 	.word	0x20000800
 80001e4:	20000838 	.word	0x20000838
 80001e8:	20000838 	.word	0x20000838
 80001ec:	200011f0 	.word	0x200011f0
 80001f0:	08000140 	.word	0x08000140
 80001f4:	08000140 	.word	0x08000140
 80001f8:	08000140 	.word	0x08000140
 80001fc:	08000140 	.word	0x08000140

08000200 <_port_switch>:
 8000200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000204:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000208:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800020c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000210 <_port_thread_start>:
 8000210:	2300      	movs	r3, #0
 8000212:	f383 8811 	msr	BASEPRI, r3
 8000216:	4628      	mov	r0, r5
 8000218:	47a0      	blx	r4
 800021a:	2000      	movs	r0, #0
 800021c:	f001 f910 	bl	8001440 <chThdExit>

08000220 <_port_switch_from_isr>:
 8000220:	f000 fcde 	bl	8000be0 <chSchDoReschedule>

08000224 <_port_exit_from_isr>:
 8000224:	df00      	svc	0
 8000226:	e7fe      	b.n	8000226 <_port_exit_from_isr+0x2>
	...

08000230 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8000230:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 8000232:	b430      	push	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8000234:	fa02 f301 	lsl.w	r3, r2, r1
 8000238:	8904      	ldrh	r4, [r0, #8]
 800023a:	b29b      	uxth	r3, r3
 800023c:	ea13 0504 	ands.w	r5, r3, r4
 8000240:	d002      	beq.n	8000248 <usbStartTransmitI+0x18>
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 8000242:	bc30      	pop	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
 8000244:	4610      	mov	r0, r2
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 8000246:	4770      	bx	lr
 8000248:	0089      	lsls	r1, r1, #2
 800024a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800024e:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8000252:	680a      	ldr	r2, [r1, #0]

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000254:	4323      	orrs	r3, r4
 8000256:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800025a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800025e:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 8000262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000266:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800026a:	8103      	strh	r3, [r0, #8]
  usb_lld_start_in(usbp, ep);
  return false;
 800026c:	4628      	mov	r0, r5
}
 800026e:	bc30      	pop	{r4, r5}
 8000270:	600a      	str	r2, [r1, #0]
 8000272:	4770      	bx	lr
	...

08000280 <set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8000280:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8000284:	6842      	ldr	r2, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8000286:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 800028a:	4906      	ldr	r1, [pc, #24]	; (80002a4 <set_address+0x24>)
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800028c:	6812      	ldr	r2, [r2, #0]
 800028e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8000292:	b510      	push	{r4, lr}
 8000294:	4604      	mov	r4, r0
 8000296:	64cb      	str	r3, [r1, #76]	; 0x4c

  usbp->address = usbp->setup[2];
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8000298:	b10a      	cbz	r2, 800029e <set_address+0x1e>
 800029a:	2101      	movs	r1, #1
 800029c:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 800029e:	2303      	movs	r3, #3
 80002a0:	7023      	strb	r3, [r4, #0]
 80002a2:	bd10      	pop	{r4, pc}
 80002a4:	40005c00 	.word	0x40005c00
	...

080002b0 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
	...

080002c0 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 80002c0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80002c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80002c8:	2b20      	cmp	r3, #32
 80002ca:	d001      	beq.n	80002d0 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 80002cc:	2000      	movs	r0, #0
    }
  }
  return false;
}
 80002ce:	4770      	bx	lr
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 80002d0:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 80002d4:	2b21      	cmp	r3, #33	; 0x21
 80002d6:	d003      	beq.n	80002e0 <sduRequestsHook+0x20>
 80002d8:	2b22      	cmp	r3, #34	; 0x22
 80002da:	d009      	beq.n	80002f0 <sduRequestsHook+0x30>
 80002dc:	2b20      	cmp	r3, #32
 80002de:	d1f5      	bne.n	80002cc <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80002e0:	4906      	ldr	r1, [pc, #24]	; (80002fc <sduRequestsHook+0x3c>)
 80002e2:	2207      	movs	r2, #7
 80002e4:	2300      	movs	r3, #0
 80002e6:	6681      	str	r1, [r0, #104]	; 0x68
 80002e8:	66c2      	str	r2, [r0, #108]	; 0x6c
 80002ea:	6703      	str	r3, [r0, #112]	; 0x70
      return true;
 80002ec:	2001      	movs	r0, #1
 80002ee:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80002f0:	2300      	movs	r3, #0
 80002f2:	6683      	str	r3, [r0, #104]	; 0x68
 80002f4:	66c3      	str	r3, [r0, #108]	; 0x6c
 80002f6:	6703      	str	r3, [r0, #112]	; 0x70
      return true;
 80002f8:	2001      	movs	r0, #1
 80002fa:	4770      	bx	lr
 80002fc:	20000800 	.word	0x20000800

08000300 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000300:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000304:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000306:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800030a:	2300      	movs	r3, #0
 800030c:	f383 8811 	msr	BASEPRI, r3
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
	...

08000320 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000320:	b410      	push	{r4}
 8000322:	2320      	movs	r3, #32
 8000324:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000328:	4c09      	ldr	r4, [pc, #36]	; (8000350 <chCoreAlloc+0x30>)
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <chCoreAlloc+0x34>)
 800032c:	6822      	ldr	r2, [r4, #0]
 800032e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8000330:	1dc3      	adds	r3, r0, #7
 8000332:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000336:	1a89      	subs	r1, r1, r2
 8000338:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800033a:	bf9d      	ittte	ls
 800033c:	189b      	addls	r3, r3, r2
 800033e:	6023      	strls	r3, [r4, #0]

  return p;
 8000340:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8000342:	2000      	movhi	r0, #0
 8000344:	2300      	movs	r3, #0
 8000346:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800034a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	20000c48 	.word	0x20000c48
 8000354:	20000bf4 	.word	0x20000bf4
	...

08000360 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000360:	b410      	push	{r4}
 8000362:	2320      	movs	r3, #32
 8000364:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000368:	7f03      	ldrb	r3, [r0, #28]
 800036a:	2b07      	cmp	r3, #7
 800036c:	d80e      	bhi.n	800038c <wakeup+0x2c>
 800036e:	e8df f003 	tbb	[pc, r3]
 8000372:	0d27      	.short	0x0d27
 8000374:	0408230d 	.word	0x0408230d
 8000378:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800037a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800037c:	6893      	ldr	r3, [r2, #8]
 800037e:	3301      	adds	r3, #1
 8000380:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000382:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000386:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000388:	6802      	ldr	r2, [r0, #0]
 800038a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800038c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000390:	2200      	movs	r2, #0
 8000392:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000396:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000398:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800039a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	428a      	cmp	r2, r1
 80003a0:	d2fb      	bcs.n	800039a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80003a2:	685a      	ldr	r2, [r3, #4]
 80003a4:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80003a6:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 80003a8:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 80003aa:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80003ac:	6058      	str	r0, [r3, #4]
 80003ae:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80003b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003b6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 80003b8:	6a03      	ldr	r3, [r0, #32]
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	e7e5      	b.n	800038c <wakeup+0x2c>
 80003c0:	2300      	movs	r3, #0
 80003c2:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80003c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	20001030 	.word	0x20001030

080003d0 <_idle_thread.lto_priv.59>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80003d0:	e7fe      	b.n	80003d0 <_idle_thread.lto_priv.59>
 80003d2:	bf00      	nop
	...

080003e0 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 80003e0:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 80003e4:	b538      	push	{r3, r4, r5, lr}
 80003e6:	2a06      	cmp	r2, #6
 80003e8:	d80a      	bhi.n	8000400 <_usb_ep0out+0x20>
 80003ea:	2301      	movs	r3, #1
 80003ec:	4093      	lsls	r3, r2
 80003ee:	f013 0f67 	tst.w	r3, #103	; 0x67
 80003f2:	4604      	mov	r4, r0
 80003f4:	d111      	bne.n	800041a <_usb_ep0out+0x3a>
 80003f6:	f013 0508 	ands.w	r5, r3, #8
 80003fa:	d102      	bne.n	8000402 <_usb_ep0out+0x22>
 80003fc:	06db      	lsls	r3, r3, #27
 80003fe:	d42e      	bmi.n	800045e <_usb_ep0out+0x7e>
 8000400:	bd38      	pop	{r3, r4, r5, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 8000402:	68c3      	ldr	r3, [r0, #12]
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d1f9      	bne.n	8000400 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800040c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800040e:	b103      	cbz	r3, 8000412 <_usb_ep0out+0x32>
      usbp->ep0endcb(usbp);
 8000410:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8000412:	2300      	movs	r3, #0
 8000414:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000418:	bd38      	pop	{r3, r4, r5, pc}
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800041a:	4a1c      	ldr	r2, [pc, #112]	; (800048c <_usb_ep0out+0xac>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800041c:	6841      	ldr	r1, [r0, #4]
 800041e:	6813      	ldr	r3, [r2, #0]
 8000420:	680d      	ldr	r5, [r1, #0]
 8000422:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800042a:	f083 0310 	eor.w	r3, r3, #16
 800042e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000436:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000438:	6813      	ldr	r3, [r2, #0]
 800043a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800043e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000442:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800044a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800044e:	6013      	str	r3, [r2, #0]
 8000450:	b10d      	cbz	r5, 8000456 <_usb_ep0out+0x76>
 8000452:	2105      	movs	r1, #5
 8000454:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8000456:	2306      	movs	r3, #6
 8000458:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800045c:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800045e:	68c3      	ldr	r3, [r0, #12]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8000460:	2205      	movs	r2, #5
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000462:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000464:	4629      	mov	r1, r5

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8000466:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800046a:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800046c:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800046e:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8000470:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000472:	f002 fef5 	bl	8003260 <usb_lld_prepare_transmit>
 8000476:	2320      	movs	r3, #32
 8000478:	f383 8811 	msr	BASEPRI, r3
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, 0);
 800047c:	4620      	mov	r0, r4
 800047e:	4629      	mov	r1, r5
 8000480:	f7ff fed6 	bl	8000230 <usbStartTransmitI>
 8000484:	f385 8811 	msr	BASEPRI, r5
 8000488:	bd38      	pop	{r3, r4, r5, pc}
 800048a:	bf00      	nop
 800048c:	40005c00 	.word	0x40005c00

08000490 <onotify.lto_priv.58>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 8000492:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000494:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8000498:	6813      	ldr	r3, [r2, #0]
 800049a:	7819      	ldrb	r1, [r3, #0]
 800049c:	2904      	cmp	r1, #4
 800049e:	d000      	beq.n	80004a2 <onotify.lto_priv.58+0x12>
 80004a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004a2:	7a21      	ldrb	r1, [r4, #8]
 80004a4:	2902      	cmp	r1, #2
 80004a6:	d1fb      	bne.n	80004a0 <onotify.lto_priv.58+0x10>
    return;
  }

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80004a8:	7912      	ldrb	r2, [r2, #4]
 80004aa:	891b      	ldrh	r3, [r3, #8]
 80004ac:	2601      	movs	r6, #1
 80004ae:	fa06 f202 	lsl.w	r2, r6, r2
 80004b2:	ea12 0503 	ands.w	r5, r2, r3
 80004b6:	d1f3      	bne.n	80004a0 <onotify.lto_priv.58+0x10>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 80004b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80004ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80004bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80004be:	1ad3      	subs	r3, r2, r3
    if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 80004c0:	1a5b      	subs	r3, r3, r1
 80004c2:	d0ed      	beq.n	80004a0 <onotify.lto_priv.58+0x10>
 80004c4:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();

      usbPrepareQueuedTransmit(sdup->config->usbp,
 80004c8:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 80004cc:	f104 0730 	add.w	r7, r4, #48	; 0x30
 80004d0:	680a      	ldr	r2, [r1, #0]
 80004d2:	7909      	ldrb	r1, [r1, #4]
  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 80004d4:	4610      	mov	r0, r2
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80004d6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80004da:	68d2      	ldr	r2, [r2, #12]
 80004dc:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 80004de:	6053      	str	r3, [r2, #4]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 80004e0:	7016      	strb	r6, [r2, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 80004e2:	6095      	str	r5, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 80004e4:	60d7      	str	r7, [r2, #12]
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 80004e6:	f002 febb 	bl	8003260 <usb_lld_prepare_transmit>
 80004ea:	2320      	movs	r3, #32
 80004ec:	f383 8811 	msr	BASEPRI, r3
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 80004f0:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 80004f4:	6818      	ldr	r0, [r3, #0]
 80004f6:	7919      	ldrb	r1, [r3, #4]
    }
  }
}
 80004f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      usbPrepareQueuedTransmit(sdup->config->usbp,
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 80004fc:	f7ff be98 	b.w	8000230 <usbStartTransmitI>

08000500 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000502:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000504:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8000506:	6994      	ldr	r4, [r2, #24]

  tqp->p_next = tp->p_next;
 8000508:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800050a:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 800050c:	2600      	movs	r6, #0
 800050e:	68a1      	ldr	r1, [r4, #8]
 8000510:	462b      	mov	r3, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000512:	606a      	str	r2, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000514:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000516:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000518:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800051a:	7726      	strb	r6, [r4, #28]
 800051c:	e000      	b.n	8000520 <chSchDoRescheduleAhead+0x20>
 800051e:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8000520:	689a      	ldr	r2, [r3, #8]
 8000522:	428a      	cmp	r2, r1
 8000524:	d8fb      	bhi.n	800051e <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8000526:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000528:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800052a:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 800052c:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = otp;
 800052e:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8000530:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 8000532:	bcf0      	pop	{r4, r5, r6, r7}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000534:	f7ff be64 	b.w	8000200 <_port_switch>
 8000538:	20001030 	.word	0x20001030
 800053c:	00000000 	.word	0x00000000

08000540 <usbStartReceiveI>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 8000540:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 8000542:	b430      	push	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 8000544:	fa02 f301 	lsl.w	r3, r2, r1
 8000548:	8944      	ldrh	r4, [r0, #10]
 800054a:	b29b      	uxth	r3, r3
 800054c:	ea13 0504 	ands.w	r5, r3, r4
 8000550:	d002      	beq.n	8000558 <usbStartReceiveI+0x18>
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 8000552:	bc30      	pop	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
 8000554:	4610      	mov	r0, r2
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 8000556:	4770      	bx	lr
 8000558:	0089      	lsls	r1, r1, #2
 800055a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800055e:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8000562:	680a      	ldr	r2, [r1, #0]

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000564:	4323      	orrs	r3, r4
 8000566:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800056a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800056e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8000572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000576:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800057a:	8143      	strh	r3, [r0, #10]
  usb_lld_start_out(usbp, ep);
  return false;
 800057c:	4628      	mov	r0, r5
}
 800057e:	bc30      	pop	{r4, r5}
 8000580:	600a      	str	r2, [r1, #0]
 8000582:	4770      	bx	lr
	...

08000590 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000590:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8000592:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000596:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8000598:	2b06      	cmp	r3, #6
 800059a:	d826      	bhi.n	80005ea <_usb_ep0in+0x5a>
 800059c:	e8df f003 	tbb	[pc, r3]
 80005a0:	042d4504 	.word	0x042d4504
 80005a4:	2604      	.short	0x2604
 80005a6:	04          	.byte	0x04
 80005a7:	00          	.byte	0x00
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80005a8:	4a33      	ldr	r2, [pc, #204]	; (8000678 <_usb_ep0in+0xe8>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80005aa:	6841      	ldr	r1, [r0, #4]
 80005ac:	6813      	ldr	r3, [r2, #0]
 80005ae:	680d      	ldr	r5, [r1, #0]
 80005b0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80005b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005b8:	f083 0310 	eor.w	r3, r3, #16
 80005bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80005c6:	6813      	ldr	r3, [r2, #0]
 80005c8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80005cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80005d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	b10d      	cbz	r5, 80005e4 <_usb_ep0in+0x54>
 80005e0:	2105      	movs	r1, #5
 80005e2:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 80005e4:	2306      	movs	r3, #6
 80005e6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80005ea:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 80005ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80005ee:	b103      	cbz	r3, 80005f2 <_usb_ep0in+0x62>
      usbp->ep0endcb(usbp);
 80005f0:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 80005f2:	2300      	movs	r3, #0
 80005f4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80005f8:	bd38      	pop	{r3, r4, r5, pc}
 80005fa:	68c3      	ldr	r3, [r0, #12]
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80005fc:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = false;
 80005fe:	2500      	movs	r5, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8000600:	2203      	movs	r2, #3
 8000602:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8000606:	4629      	mov	r1, r5
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000608:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 800060a:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 800060c:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 800060e:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8000610:	4620      	mov	r0, r4
 8000612:	f002 fe65 	bl	80032e0 <usb_lld_prepare_receive>
 8000616:	2320      	movs	r3, #32
 8000618:	f383 8811 	msr	BASEPRI, r3
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, 0);
 800061c:	4620      	mov	r0, r4
 800061e:	4629      	mov	r1, r5
 8000620:	f7ff ff8e 	bl	8000540 <usbStartReceiveI>
 8000624:	f385 8811 	msr	BASEPRI, r5
 8000628:	bd38      	pop	{r3, r4, r5, pc}

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 800062a:	f890 207b 	ldrb.w	r2, [r0, #123]	; 0x7b
 800062e:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000632:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 8000634:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000638:	428b      	cmp	r3, r1
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800063a:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800063c:	d9de      	bls.n	80005fc <_usb_ep0in+0x6c>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800063e:	8a1d      	ldrh	r5, [r3, #16]
 8000640:	fbb1 f2f5 	udiv	r2, r1, r5
 8000644:	fb05 1512 	mls	r5, r5, r2, r1
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000648:	2d00      	cmp	r5, #0
 800064a:	d1d7      	bne.n	80005fc <_usb_ep0in+0x6c>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800064c:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800064e:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000650:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8000652:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8000654:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8000656:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000658:	f002 fe02 	bl	8003260 <usb_lld_prepare_transmit>
 800065c:	2320      	movs	r3, #32
 800065e:	f383 8811 	msr	BASEPRI, r3
       transmitted.*/
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8000662:	4620      	mov	r0, r4
 8000664:	4629      	mov	r1, r5
 8000666:	f7ff fde3 	bl	8000230 <usbStartTransmitI>
 800066a:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 800066e:	2302      	movs	r3, #2
 8000670:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000674:	bd38      	pop	{r3, r4, r5, pc}
 8000676:	bf00      	nop
 8000678:	40005c00 	.word	0x40005c00
 800067c:	00000000 	.word	0x00000000

08000680 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	4604      	mov	r4, r0
  stm32_usb_pma_t *pmap;
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
 8000684:	4bbc      	ldr	r3, [pc, #752]	; (8000978 <_usb_ep0setup+0x2f8>)
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8000686:	2200      	movs	r2, #0
 8000688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800068a:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 800068e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000692:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000696:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800069a:	0049      	lsls	r1, r1, #1
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 800069c:	688b      	ldr	r3, [r1, #8]
  usbReadSetup(usbp, ep, usbp->setup);
 800069e:	f100 0274 	add.w	r2, r0, #116	; 0x74
 80006a2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80006a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	f100 067c 	add.w	r6, r0, #124	; 0x7c
  for (n = 0; n < 4; n++) {
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80006b0:	f853 1b04 	ldr.w	r1, [r3], #4
 80006b4:	f822 1b02 	strh.w	r1, [r2], #2
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
  pmap = USB_ADDR2PTR(udp->RXADDR0);
  for (n = 0; n < 4; n++) {
 80006b8:	42b2      	cmp	r2, r6
 80006ba:	d1f9      	bne.n	80006b0 <_usb_ep0setup+0x30>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80006bc:	6863      	ldr	r3, [r4, #4]
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	b36b      	cbz	r3, 800071e <_usb_ep0setup+0x9e>
      !(usbp->config->requests_hook_cb(usbp))) {
 80006c2:	4620      	mov	r0, r4
 80006c4:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80006c6:	b350      	cbz	r0, 800071e <_usb_ep0setup+0x9e>
 80006c8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80006ca:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 80006ce:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 80006d2:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 80006d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 80006da:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 80006dc:	bf3c      	itt	cc
 80006de:	4615      	movcc	r5, r2
 80006e0:	66e2      	strcc	r2, [r4, #108]	; 0x6c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80006e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80006e6:	68e3      	ldr	r3, [r4, #12]
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80006e8:	f040 80b2 	bne.w	8000850 <_usb_ep0setup+0x1d0>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 80006ec:	2d00      	cmp	r5, #0
 80006ee:	f040 8097 	bne.w	8000820 <_usb_ep0setup+0x1a0>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80006f2:	695b      	ldr	r3, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 80006f4:	2205      	movs	r2, #5
 80006f6:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 80006fa:	4620      	mov	r0, r4
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 80006fc:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 80006fe:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8000700:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8000702:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000704:	4629      	mov	r1, r5
 8000706:	f002 fdab 	bl	8003260 <usb_lld_prepare_transmit>
 800070a:	2320      	movs	r3, #32
 800070c:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8000710:	4620      	mov	r0, r4
 8000712:	4629      	mov	r1, r5
 8000714:	f7ff fd8c 	bl	8000230 <usbStartTransmitI>
 8000718:	f385 8811 	msr	BASEPRI, r5
 800071c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800071e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000722:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 8000726:	d022      	beq.n	800076e <_usb_ep0setup+0xee>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000728:	4a93      	ldr	r2, [pc, #588]	; (8000978 <_usb_ep0setup+0x2f8>)
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800072a:	6861      	ldr	r1, [r4, #4]
 800072c:	6813      	ldr	r3, [r2, #0]
 800072e:	680d      	ldr	r5, [r1, #0]
 8000730:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000738:	f083 0310 	eor.w	r3, r3, #16
 800073c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000746:	6813      	ldr	r3, [r2, #0]
 8000748:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800074c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000750:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	6013      	str	r3, [r2, #0]
 800075e:	b115      	cbz	r5, 8000766 <_usb_ep0setup+0xe6>
 8000760:	4620      	mov	r0, r4
 8000762:	2105      	movs	r1, #5
 8000764:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8000766:	2306      	movs	r3, #6
 8000768:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800076c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 800076e:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000772:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8000776:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800077a:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 800077e:	f000 811a 	beq.w	80009b6 <_usb_ep0setup+0x336>
 8000782:	d918      	bls.n	80007b6 <_usb_ep0setup+0x136>
 8000784:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8000788:	f000 80fc 	beq.w	8000984 <_usb_ep0setup+0x304>
 800078c:	f240 808f 	bls.w	80008ae <_usb_ep0setup+0x22e>
 8000790:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 8000794:	f000 8099 	beq.w	80008ca <_usb_ep0setup+0x24a>
 8000798:	f640 4202 	movw	r2, #3074	; 0xc02
 800079c:	4295      	cmp	r5, r2
 800079e:	f000 80e3 	beq.w	8000968 <_usb_ep0setup+0x2e8>
 80007a2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80007a6:	d1bf      	bne.n	8000728 <_usb_ep0setup+0xa8>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 80007a8:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 80007ac:	2501      	movs	r5, #1
 80007ae:	6727      	str	r7, [r4, #112]	; 0x70
 80007b0:	66a2      	str	r2, [r4, #104]	; 0x68
 80007b2:	66e5      	str	r5, [r4, #108]	; 0x6c
 80007b4:	e78b      	b.n	80006ce <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80007b6:	2d02      	cmp	r5, #2
 80007b8:	f000 810d 	beq.w	80009d6 <_usb_ep0setup+0x356>
 80007bc:	f240 80ca 	bls.w	8000954 <_usb_ep0setup+0x2d4>
 80007c0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80007c4:	f000 8094 	beq.w	80008f0 <_usb_ep0setup+0x270>
 80007c8:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 80007cc:	d1ac      	bne.n	8000728 <_usb_ep0setup+0xa8>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80007ce:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80007d2:	2a00      	cmp	r2, #0
 80007d4:	d1a8      	bne.n	8000728 <_usb_ep0setup+0xa8>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80007d6:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 80007da:	f011 020f 	ands.w	r2, r1, #15
 80007de:	d01a      	beq.n	8000816 <_usb_ep0setup+0x196>
 80007e0:	0092      	lsls	r2, r2, #2
 80007e2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80007e6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80007ea:	f011 0f80 	tst.w	r1, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 80007ee:	6811      	ldr	r1, [r2, #0]
 80007f0:	f040 8115 	bne.w	8000a1e <_usb_ep0setup+0x39e>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 80007f4:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 80007f8:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 80007fc:	d00b      	beq.n	8000816 <_usb_ep0setup+0x196>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 80007fe:	6813      	ldr	r3, [r2, #0]
 8000800:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000808:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8000816:	2500      	movs	r5, #0
 8000818:	66a5      	str	r5, [r4, #104]	; 0x68
 800081a:	66e5      	str	r5, [r4, #108]	; 0x6c
 800081c:	6725      	str	r5, [r4, #112]	; 0x70
 800081e:	e756      	b.n	80006ce <_usb_ep0setup+0x4e>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000820:	699b      	ldr	r3, [r3, #24]
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 8000822:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000824:	2600      	movs	r6, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8000826:	2104      	movs	r1, #4
 8000828:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800082c:	4620      	mov	r0, r4
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
 800082e:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 8000830:	605d      	str	r5, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000832:	701e      	strb	r6, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8000834:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8000836:	4631      	mov	r1, r6
 8000838:	f002 fd52 	bl	80032e0 <usb_lld_prepare_receive>
 800083c:	2320      	movs	r3, #32
 800083e:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 8000842:	4620      	mov	r0, r4
 8000844:	4631      	mov	r1, r6
 8000846:	f7ff fe7b 	bl	8000540 <usbStartReceiveI>
 800084a:	f386 8811 	msr	BASEPRI, r6
 800084e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 8000850:	b1bd      	cbz	r5, 8000882 <_usb_ep0setup+0x202>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000852:	695b      	ldr	r3, [r3, #20]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 8000854:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000856:	2600      	movs	r6, #0
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8000858:	2101      	movs	r1, #1
 800085a:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800085e:	4620      	mov	r0, r4
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 8000860:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 8000862:	605d      	str	r5, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000864:	701e      	strb	r6, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8000866:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000868:	4631      	mov	r1, r6
 800086a:	f002 fcf9 	bl	8003260 <usb_lld_prepare_transmit>
 800086e:	2320      	movs	r3, #32
 8000870:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8000874:	4620      	mov	r0, r4
 8000876:	4631      	mov	r1, r6
 8000878:	f7ff fcda 	bl	8000230 <usbStartTransmitI>
 800087c:	f386 8811 	msr	BASEPRI, r6
 8000880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000882:	699b      	ldr	r3, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 8000884:	2203      	movs	r2, #3
 8000886:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800088a:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800088c:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 800088e:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 8000890:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8000892:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8000894:	4629      	mov	r1, r5
 8000896:	f002 fd23 	bl	80032e0 <usb_lld_prepare_receive>
 800089a:	2320      	movs	r3, #32
 800089c:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 80008a0:	4620      	mov	r0, r4
 80008a2:	4629      	mov	r1, r5
 80008a4:	f7ff fe4c 	bl	8000540 <usbStartReceiveI>
 80008a8:	f385 8811 	msr	BASEPRI, r5
 80008ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80008ae:	f240 3202 	movw	r2, #770	; 0x302
 80008b2:	4295      	cmp	r5, r2
 80008b4:	d02c      	beq.n	8000910 <_usb_ep0setup+0x290>
 80008b6:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 80008ba:	f47f af35 	bne.w	8000728 <_usb_ep0setup+0xa8>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
      set_address(usbp);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 80008be:	4a2f      	ldr	r2, [pc, #188]	; (800097c <_usb_ep0setup+0x2fc>)
 80008c0:	66a7      	str	r7, [r4, #104]	; 0x68
 80008c2:	66e7      	str	r7, [r4, #108]	; 0x6c
 80008c4:	463d      	mov	r5, r7
 80008c6:	6722      	str	r2, [r4, #112]	; 0x70
 80008c8:	e701      	b.n	80006ce <_usb_ep0setup+0x4e>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 80008ca:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80008ce:	f884 207f 	strb.w	r2, [r4, #127]	; 0x7f
    if (usbp->configuration == 0U) {
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	f040 8095 	bne.w	8000a02 <_usb_ep0setup+0x382>
      usbp->state = USB_SELECTED;
 80008d8:	2203      	movs	r2, #3
 80008da:	7022      	strb	r2, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80008dc:	6862      	ldr	r2, [r4, #4]
 80008de:	6812      	ldr	r2, [r2, #0]
 80008e0:	2a00      	cmp	r2, #0
 80008e2:	d098      	beq.n	8000816 <_usb_ep0setup+0x196>
 80008e4:	4620      	mov	r0, r4
 80008e6:	2102      	movs	r1, #2
 80008e8:	4790      	blx	r2
 80008ea:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80008ee:	e792      	b.n	8000816 <_usb_ep0setup+0x196>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80008f0:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80008f4:	2a01      	cmp	r2, #1
 80008f6:	f47f af17 	bne.w	8000728 <_usb_ep0setup+0xa8>
      usbp->status &= ~2U;
 80008fa:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80008fe:	66a7      	str	r7, [r4, #104]	; 0x68
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8000900:	f022 0202 	bic.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000904:	66e7      	str	r7, [r4, #108]	; 0x6c
 8000906:	6727      	str	r7, [r4, #112]	; 0x70
 8000908:	463d      	mov	r5, r7
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800090a:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 800090e:	e6de      	b.n	80006ce <_usb_ep0setup+0x4e>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8000910:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000914:	2a00      	cmp	r2, #0
 8000916:	f47f af07 	bne.w	8000728 <_usb_ep0setup+0xa8>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800091a:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 800091e:	f011 020f 	ands.w	r2, r1, #15
 8000922:	f43f af78 	beq.w	8000816 <_usb_ep0setup+0x196>
 8000926:	0093      	lsls	r3, r2, #2
 8000928:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800092c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8000930:	0609      	lsls	r1, r1, #24
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	f100 8087 	bmi.w	8000a46 <_usb_ep0setup+0x3c6>
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000938:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800093c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000940:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8000944:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000948:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000952:	e760      	b.n	8000816 <_usb_ep0setup+0x196>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000954:	b92d      	cbnz	r5, 8000962 <_usb_ep0setup+0x2e2>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8000956:	2202      	movs	r2, #2
 8000958:	6725      	str	r5, [r4, #112]	; 0x70
 800095a:	66a6      	str	r6, [r4, #104]	; 0x68
 800095c:	66e2      	str	r2, [r4, #108]	; 0x6c
 800095e:	4615      	mov	r5, r2
 8000960:	e6b5      	b.n	80006ce <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000962:	2d01      	cmp	r5, #1
 8000964:	f47f aee0 	bne.w	8000728 <_usb_ep0setup+0xa8>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8000968:	4905      	ldr	r1, [pc, #20]	; (8000980 <_usb_ep0setup+0x300>)
 800096a:	2502      	movs	r5, #2
 800096c:	2200      	movs	r2, #0
 800096e:	66a1      	str	r1, [r4, #104]	; 0x68
 8000970:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000972:	6722      	str	r2, [r4, #112]	; 0x70
 8000974:	e6ab      	b.n	80006ce <_usb_ep0setup+0x4e>
 8000976:	bf00      	nop
 8000978:	40005c00 	.word	0x40005c00
 800097c:	08000281 	.word	0x08000281
 8000980:	08003d80 	.word	0x08003d80
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8000984:	6861      	ldr	r1, [r4, #4]

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8000986:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 800098a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800098e:	684d      	ldr	r5, [r1, #4]
 8000990:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000994:	4620      	mov	r0, r4
 8000996:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 800099a:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800099e:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 80009a0:	2800      	cmp	r0, #0
 80009a2:	f43f aec1 	beq.w	8000728 <_usb_ep0setup+0xa8>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 80009a6:	6843      	ldr	r3, [r0, #4]
 80009a8:	6805      	ldr	r5, [r0, #0]
 80009aa:	66a3      	str	r3, [r4, #104]	; 0x68
 80009ac:	66e5      	str	r5, [r4, #108]	; 0x6c
 80009ae:	6727      	str	r7, [r4, #112]	; 0x70
 80009b0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80009b4:	e68b      	b.n	80006ce <_usb_ep0setup+0x4e>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80009b6:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80009ba:	2a01      	cmp	r2, #1
 80009bc:	f47f aeb4 	bne.w	8000728 <_usb_ep0setup+0xa8>
      usbp->status |= 2U;
 80009c0:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80009c4:	66a7      	str	r7, [r4, #104]	; 0x68
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 80009c6:	f042 0202 	orr.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80009ca:	66e7      	str	r7, [r4, #108]	; 0x6c
 80009cc:	6727      	str	r7, [r4, #112]	; 0x70
 80009ce:	463d      	mov	r5, r7
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 80009d0:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 80009d4:	e67b      	b.n	80006ce <_usb_ep0setup+0x4e>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80009d6:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 80009da:	4922      	ldr	r1, [pc, #136]	; (8000a64 <_usb_ep0setup+0x3e4>)
 80009dc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80009e0:	f002 020f 	and.w	r2, r2, #15
 80009e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009e8:	d10e      	bne.n	8000a08 <_usb_ep0setup+0x388>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 80009ea:	f412 5240 	ands.w	r2, r2, #12288	; 0x3000
 80009ee:	f43f ae9b 	beq.w	8000728 <_usb_ep0setup+0xa8>
 80009f2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80009f6:	d10d      	bne.n	8000a14 <_usb_ep0setup+0x394>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 80009f8:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <_usb_ep0setup+0x3e8>)
 80009fa:	66e5      	str	r5, [r4, #108]	; 0x6c
 80009fc:	6727      	str	r7, [r4, #112]	; 0x70
 80009fe:	66a2      	str	r2, [r4, #104]	; 0x68
 8000a00:	e665      	b.n	80006ce <_usb_ep0setup+0x4e>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 8000a02:	2204      	movs	r2, #4
 8000a04:	7022      	strb	r2, [r4, #0]
 8000a06:	e769      	b.n	80008dc <_usb_ep0setup+0x25c>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8000a08:	f012 0230 	ands.w	r2, r2, #48	; 0x30
 8000a0c:	f43f ae8c 	beq.w	8000728 <_usb_ep0setup+0xa8>
 8000a10:	2a10      	cmp	r2, #16
 8000a12:	d0f1      	beq.n	80009f8 <_usb_ep0setup+0x378>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8000a14:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <_usb_ep0setup+0x3ec>)
 8000a16:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000a18:	6727      	str	r7, [r4, #112]	; 0x70
 8000a1a:	66a2      	str	r2, [r4, #104]	; 0x68
 8000a1c:	e657      	b.n	80006ce <_usb_ep0setup+0x4e>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8000a1e:	f001 0130 	and.w	r1, r1, #48	; 0x30
 8000a22:	2930      	cmp	r1, #48	; 0x30
 8000a24:	f43f aef7 	beq.w	8000816 <_usb_ep0setup+0x196>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8000a28:	6813      	ldr	r3, [r2, #0]
 8000a2a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a32:	f083 0320 	eor.w	r3, r3, #32
 8000a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000a44:	e6e7      	b.n	8000816 <_usb_ep0setup+0x196>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000a46:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a4e:	f082 0210 	eor.w	r2, r2, #16
 8000a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000a60:	e6d9      	b.n	8000816 <_usb_ep0setup+0x196>
 8000a62:	bf00      	nop
 8000a64:	40005c00 	.word	0x40005c00
 8000a68:	08003da0 	.word	0x08003da0
 8000a6c:	08003d90 	.word	0x08003d90

08000a70 <inotify.lto_priv.57>:
/**
 * @brief   Notification of data removed from the input queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void inotify(io_queue_t *qp) {
 8000a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = qGetLink(qp);
 8000a72:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000a74:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8000a78:	6813      	ldr	r3, [r2, #0]
 8000a7a:	7819      	ldrb	r1, [r3, #0]
 8000a7c:	2904      	cmp	r1, #4
 8000a7e:	d000      	beq.n	8000a82 <inotify.lto_priv.57+0x12>
 8000a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a82:	7a21      	ldrb	r1, [r4, #8]
 8000a84:	2902      	cmp	r1, #2
 8000a86:	d1fb      	bne.n	8000a80 <inotify.lto_priv.57+0x10>
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8000a88:	7951      	ldrb	r1, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8000a8a:	2601      	movs	r6, #1
 8000a8c:	895a      	ldrh	r2, [r3, #10]
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8000a8e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000a92:	68db      	ldr	r3, [r3, #12]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8000a94:	fa06 f101 	lsl.w	r1, r6, r1
 8000a98:	ea11 0502 	ands.w	r5, r1, r2
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8000a9c:	8a58      	ldrh	r0, [r3, #18]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8000a9e:	d1ef      	bne.n	8000a80 <inotify.lto_priv.57+0x10>
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 8000aa0:	69a3      	ldr	r3, [r4, #24]
 8000aa2:	69e2      	ldr	r2, [r4, #28]
 8000aa4:	6961      	ldr	r1, [r4, #20]
 8000aa6:	1ad2      	subs	r2, r2, r3
 8000aa8:	1a53      	subs	r3, r2, r1
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8000aaa:	4298      	cmp	r0, r3
 8000aac:	d8e8      	bhi.n	8000a80 <inotify.lto_priv.57+0x10>
 8000aae:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();

      n = (n / maxsize) * maxsize;
 8000ab2:	fbb3 f3f0 	udiv	r3, r3, r0
      usbPrepareQueuedReceive(sdup->config->usbp,
 8000ab6:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
      osalSysUnlock();

      n = (n / maxsize) * maxsize;
 8000aba:	fb00 f303 	mul.w	r3, r0, r3
      usbPrepareQueuedReceive(sdup->config->usbp,
 8000abe:	7951      	ldrb	r1, [r2, #5]
 8000ac0:	6810      	ldr	r0, [r2, #0]
 8000ac2:	f104 070c 	add.w	r7, r4, #12
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000ac6:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8000aca:	68d2      	ldr	r2, [r2, #12]
 8000acc:	6992      	ldr	r2, [r2, #24]

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 8000ace:	6053      	str	r3, [r2, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 8000ad0:	7016      	strb	r6, [r2, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8000ad2:	6095      	str	r5, [r2, #8]
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
 8000ad4:	60d7      	str	r7, [r2, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8000ad6:	f002 fc03 	bl	80032e0 <usb_lld_prepare_receive>
 8000ada:	2320      	movs	r3, #32
 8000adc:	f383 8811 	msr	BASEPRI, r3
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8000ae0:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	7959      	ldrb	r1, [r3, #5]
    }
  }
}
 8000ae8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      usbPrepareQueuedReceive(sdup->config->usbp,
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8000aec:	f7ff bd28 	b.w	8000540 <usbStartReceiveI>

08000af0 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 8000af0:	6953      	ldr	r3, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8000af2:	b570      	push	{r4, r5, r6, lr}
 8000af4:	4614      	mov	r4, r2
 8000af6:	4606      	mov	r6, r0
 8000af8:	460d      	mov	r5, r1
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 8000afa:	b123      	cbz	r3, 8000b06 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8000afc:	4618      	mov	r0, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	2210      	movs	r2, #16
 8000b02:	f003 f87d 	bl	8003c00 <memset>
  }
  if (epcp->out_state != NULL) {
 8000b06:	69a0      	ldr	r0, [r4, #24]
 8000b08:	b118      	cbz	r0, 8000b12 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2214      	movs	r2, #20
 8000b0e:	f003 f877 	bl	8003c00 <memset>
  }

  usbp->epc[ep] = epcp;
 8000b12:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8000b16:	60dc      	str	r4, [r3, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8000b18:	4630      	mov	r0, r6
 8000b1a:	4629      	mov	r1, r5
}
 8000b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  usbp->epc[ep] = epcp;

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8000b20:	f002 bbee 	b.w	8003300 <usb_lld_init_endpoint>
	...

08000b30 <_port_irq_epilogue>:
 8000b30:	2320      	movs	r3, #32
 8000b32:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <_port_irq_epilogue+0x44>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000b3e:	d102      	bne.n	8000b46 <_port_irq_epilogue+0x16>
 8000b40:	f383 8811 	msr	BASEPRI, r3
 8000b44:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000b46:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000b4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b4e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8000b52:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000b56:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000b5a:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <_port_irq_epilogue+0x48>)
 8000b5c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8000b5e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000b60:	6889      	ldr	r1, [r1, #8]
 8000b62:	6892      	ldr	r2, [r2, #8]
 8000b64:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000b66:	bf8c      	ite	hi
 8000b68:	4a04      	ldrhi	r2, [pc, #16]	; (8000b7c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000b6a:	4a05      	ldrls	r2, [pc, #20]	; (8000b80 <_port_irq_epilogue+0x50>)
 8000b6c:	f843 2c08 	str.w	r2, [r3, #-8]
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	20001030 	.word	0x20001030
 8000b7c:	08000221 	.word	0x08000221
 8000b80:	08000224 	.word	0x08000224
	...

08000b90 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000b92:	490f      	ldr	r1, [pc, #60]	; (8000bd0 <chTMStopMeasurementX+0x40>)
 8000b94:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000b96:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000b98:	6f09      	ldr	r1, [r1, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000b9e:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000ba0:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000ba2:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000ba4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8000ba8:	18e4      	adds	r4, r4, r3
 8000baa:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000bae:	3201      	adds	r2, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000bb0:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000bb2:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000bb4:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000bb6:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000bba:	d805      	bhi.n	8000bc8 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 8000bbc:	6802      	ldr	r2, [r0, #0]
 8000bbe:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8000bc0:	bf38      	it	cc
 8000bc2:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000bc4:	bc30      	pop	{r4, r5}
 8000bc6:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8000bc8:	6043      	str	r3, [r0, #4]
 8000bca:	e7fb      	b.n	8000bc4 <chTMStopMeasurementX+0x34>
 8000bcc:	e0001000 	.word	0xe0001000
 8000bd0:	20001030 	.word	0x20001030
	...

08000be0 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8000be0:	f7ff bc8e 	b.w	8000500 <chSchDoRescheduleAhead>
	...

08000bf0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <chSchRescheduleS+0x14>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8000bf6:	6892      	ldr	r2, [r2, #8]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d800      	bhi.n	8000c00 <chSchRescheduleS+0x10>
 8000bfe:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8000c00:	f7ff bc7e 	b.w	8000500 <chSchDoRescheduleAhead>
 8000c04:	20001030 	.word	0x20001030
	...

08000c10 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000c12:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000c14:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000c16:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8000c18:	6814      	ldr	r4, [r2, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000c1a:	2501      	movs	r5, #1
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 8000c1c:	7708      	strb	r0, [r1, #28]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000c1e:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000c20:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000c22:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8000c24:	4610      	mov	r0, r2
}
 8000c26:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000c28:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8000c2a:	f7ff bae9 	b.w	8000200 <_port_switch>
 8000c2e:	bf00      	nop
 8000c30:	20001030 	.word	0x20001030
	...

08000c40 <chSchGoSleepTimeoutS>:
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000c48:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000c4a:	b086      	sub	sp, #24

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000c4c:	d051      	beq.n	8000cf2 <chSchGoSleepTimeoutS+0xb2>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8000c4e:	4c49      	ldr	r4, [pc, #292]	; (8000d74 <chSchGoSleepTimeoutS+0x134>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000c50:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000c54:	4625      	mov	r5, r4
 8000c56:	f855 2f1c 	ldr.w	r2, [r5, #28]!
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000c5c:	2901      	cmp	r1, #1
 8000c5e:	4606      	mov	r6, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8000c60:	f8df e114 	ldr.w	lr, [pc, #276]	; 8000d78 <chSchGoSleepTimeoutS+0x138>
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8000c64:	69a0      	ldr	r0, [r4, #24]
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000c66:	bf98      	it	ls
 8000c68:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000c6a:	42aa      	cmp	r2, r5
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8000c6c:	9005      	str	r0, [sp, #20]
 8000c6e:	b29b      	uxth	r3, r3
  vtp->vt_func = vtfunc;
 8000c70:	f8cd e010 	str.w	lr, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000c74:	d064      	beq.n	8000d40 <chSchGoSleepTimeoutS+0x100>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000c76:	4419      	add	r1, r3
 8000c78:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000c7a:	b289      	uxth	r1, r1
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000c7c:	8910      	ldrh	r0, [r2, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000c7e:	1acb      	subs	r3, r1, r3
 8000c80:	b29b      	uxth	r3, r3
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000c82:	4283      	cmp	r3, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000c84:	bf38      	it	cc
 8000c86:	6379      	strcc	r1, [r7, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8000c88:	4283      	cmp	r3, r0
 8000c8a:	d905      	bls.n	8000c98 <chSchGoSleepTimeoutS+0x58>
    delta -= p->vt_delta;
    p = p->vt_next;
 8000c8c:	6812      	ldr	r2, [r2, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8000c8e:	1a1b      	subs	r3, r3, r0
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8000c90:	8910      	ldrh	r0, [r2, #8]
    delta -= p->vt_delta;
 8000c92:	b29b      	uxth	r3, r3
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8000c94:	4298      	cmp	r0, r3
 8000c96:	d3f9      	bcc.n	8000c8c <chSchGoSleepTimeoutS+0x4c>
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000c98:	f64f 70ff 	movw	r0, #65535	; 0xffff
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000c9c:	6851      	ldr	r1, [r2, #4]
  vtp->vt_prev->vt_next = vtp;
 8000c9e:	f10d 0804 	add.w	r8, sp, #4
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000ca2:	9102      	str	r1, [sp, #8]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8000ca4:	9201      	str	r2, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8000ca6:	f8c1 8000 	str.w	r8, [r1]
  p->vt_prev = vtp;
 8000caa:	f8c2 8004 	str.w	r8, [r2, #4]
  vtp->vt_delta = delta
 8000cae:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000cb2:	8911      	ldrh	r1, [r2, #8]
 8000cb4:	1acb      	subs	r3, r1, r3
 8000cb6:	8113      	strh	r3, [r2, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000cb8:	84a0      	strh	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000cba:	4630      	mov	r0, r6
 8000cbc:	f7ff ffa8 	bl	8000c10 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000cc0:	9b04      	ldr	r3, [sp, #16]
 8000cc2:	b18b      	cbz	r3, 8000ce8 <chSchGoSleepTimeoutS+0xa8>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000cc4:	69e3      	ldr	r3, [r4, #28]
 8000cc6:	4a2b      	ldr	r2, [pc, #172]	; (8000d74 <chSchGoSleepTimeoutS+0x134>)
 8000cc8:	4543      	cmp	r3, r8
 8000cca:	d01a      	beq.n	8000d02 <chSchGoSleepTimeoutS+0xc2>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8000ccc:	9a02      	ldr	r2, [sp, #8]
 8000cce:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 8000cd0:	2100      	movs	r1, #0

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8000cd2:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000cd4:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000cd6:	42ab      	cmp	r3, r5
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000cd8:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8000cda:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000cdc:	d004      	beq.n	8000ce8 <chSchGoSleepTimeoutS+0xa8>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8000cde:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8000ce2:	891a      	ldrh	r2, [r3, #8]
 8000ce4:	440a      	add	r2, r1
 8000ce6:	811a      	strh	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000ce8:	69a3      	ldr	r3, [r4, #24]
}
 8000cea:	6a18      	ldr	r0, [r3, #32]
 8000cec:	b006      	add	sp, #24
 8000cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8000cf2:	f7ff ff8d 	bl	8000c10 <chSchGoSleepS>
 8000cf6:	4c1f      	ldr	r4, [pc, #124]	; (8000d74 <chSchGoSleepTimeoutS+0x134>)
  }

  return currp->p_u.rdymsg;
 8000cf8:	69a3      	ldr	r3, [r4, #24]
}
 8000cfa:	6a18      	ldr	r0, [r3, #32]
 8000cfc:	b006      	add	sp, #24
 8000cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000d02:	9e01      	ldr	r6, [sp, #4]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000d04:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000d06:	42ae      	cmp	r6, r5

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000d08:	61d6      	str	r6, [r2, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000d0a:	6075      	str	r5, [r6, #4]
  vtp->vt_func = NULL;
 8000d0c:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000d0e:	d02c      	beq.n	8000d6a <chSchGoSleepTimeoutS+0x12a>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000d10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d14:	6a41      	ldr	r1, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000d16:	8cd5      	ldrh	r5, [r2, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000d18:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8000d1c:	8933      	ldrh	r3, [r6, #8]
 8000d1e:	b28a      	uxth	r2, r1
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000d20:	1b51      	subs	r1, r2, r5

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000d22:	443b      	add	r3, r7
 8000d24:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000d26:	b289      	uxth	r1, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000d28:	428b      	cmp	r3, r1

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000d2a:	8133      	strh	r3, [r6, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000d2c:	d9dc      	bls.n	8000ce8 <chSchGoSleepTimeoutS+0xa8>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8000d2e:	1a5b      	subs	r3, r3, r1
 8000d30:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	bf98      	it	ls
 8000d36:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8000d38:	4413      	add	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	6343      	str	r3, [r0, #52]	; 0x34
 8000d3e:	e7d3      	b.n	8000ce8 <chSchGoSleepTimeoutS+0xa8>
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8000d40:	18ca      	adds	r2, r1, r3
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8000d42:	f10d 0804 	add.w	r8, sp, #4
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000d46:	b292      	uxth	r2, r2
  STM32_ST_TIM->SR     = 0;
 8000d48:	f04f 0e00 	mov.w	lr, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000d4c:	2002      	movs	r0, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8000d4e:	84e3      	strh	r3, [r4, #38]	; 0x26
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8000d50:	9501      	str	r5, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000d52:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;
 8000d54:	f8ad 100c 	strh.w	r1, [sp, #12]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8000d58:	f8c4 801c 	str.w	r8, [r4, #28]
      ch.vtlist.vt_prev = vtp;
 8000d5c:	f8c4 8020 	str.w	r8, [r4, #32]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000d60:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000d62:	f8c7 e010 	str.w	lr, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	e7a7      	b.n	8000cba <chSchGoSleepTimeoutS+0x7a>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000d6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d6e:	60d3      	str	r3, [r2, #12]
 8000d70:	e7ba      	b.n	8000ce8 <chSchGoSleepTimeoutS+0xa8>
 8000d72:	bf00      	nop
 8000d74:	20001030 	.word	0x20001030
 8000d78:	08000361 	.word	0x08000361
 8000d7c:	00000000 	.word	0x00000000

08000d80 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8000d80:	b169      	cbz	r1, 8000d9e <chThdEnqueueTimeoutS+0x1e>
 8000d82:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8000d86:	b410      	push	{r4}

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000d88:	699b      	ldr	r3, [r3, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000d8a:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000d8c:	2004      	movs	r0, #4
 8000d8e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8000d92:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8000d94:	6053      	str	r3, [r2, #4]
}
 8000d96:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000d9a:	f7ff bf51 	b.w	8000c40 <chSchGoSleepTimeoutS>
}
 8000d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000da2:	4770      	bx	lr
 8000da4:	20001030 	.word	0x20001030
	...

08000db0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8000db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db4:	b083      	sub	sp, #12
 8000db6:	4604      	mov	r4, r0
 8000db8:	468b      	mov	fp, r1
 8000dba:	4615      	mov	r5, r2
 8000dbc:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 8000dbe:	69c7      	ldr	r7, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000dc0:	f04f 0820 	mov.w	r8, #32
 8000dc4:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8000dc8:	2600      	movs	r6, #0
 8000dca:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8000dcc:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000dce:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8000dd2:	b1fb      	cbz	r3, 8000e14 <chOQWriteTimeout+0x64>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000dd4:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8000dd6:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000dd8:	1c50      	adds	r0, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8000dda:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 8000ddc:	6160      	str	r0, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8000dde:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000de0:	f89b 3000 	ldrb.w	r3, [fp]
 8000de4:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8000de6:	6923      	ldr	r3, [r4, #16]
 8000de8:	6962      	ldr	r2, [r4, #20]
 8000dea:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 8000dec:	bf24      	itt	cs
 8000dee:	68e3      	ldrcs	r3, [r4, #12]
 8000df0:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8000df2:	b10f      	cbz	r7, 8000df8 <chOQWriteTimeout+0x48>
      nfy(oqp);
 8000df4:	4620      	mov	r0, r4
 8000df6:	47b8      	blx	r7
 8000df8:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8000dfc:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 8000dfe:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8000e02:	d011      	beq.n	8000e28 <chOQWriteTimeout+0x78>
 8000e04:	f388 8811 	msr	BASEPRI, r8
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000e08:	46d3      	mov	fp, sl
 8000e0a:	68a3      	ldr	r3, [r4, #8]
 8000e0c:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1df      	bne.n	8000dd4 <chOQWriteTimeout+0x24>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8000e14:	4620      	mov	r0, r4
 8000e16:	9901      	ldr	r1, [sp, #4]
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	f7ff ffb1 	bl	8000d80 <chThdEnqueueTimeoutS>
 8000e1e:	9b00      	ldr	r3, [sp, #0]
 8000e20:	2800      	cmp	r0, #0
 8000e22:	d0d3      	beq.n	8000dcc <chOQWriteTimeout+0x1c>
 8000e24:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8000e28:	4630      	mov	r0, r6
 8000e2a:	b003      	add	sp, #12
 8000e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e30 <writet.lto_priv.71>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
 8000e30:	3030      	adds	r0, #48	; 0x30
 8000e32:	f7ff bfbd 	b.w	8000db0 <chOQWriteTimeout>
 8000e36:	bf00      	nop
	...

08000e40 <write.lto_priv.65>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 8000e40:	3030      	adds	r0, #48	; 0x30
 8000e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e46:	f7ff bfb3 	b.w	8000db0 <chOQWriteTimeout>
 8000e4a:	bf00      	nop
 8000e4c:	0000      	movs	r0, r0
	...

08000e50 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8000e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e52:	4604      	mov	r4, r0
 8000e54:	460f      	mov	r7, r1
 8000e56:	4616      	mov	r6, r2
 8000e58:	2320      	movs	r3, #32
 8000e5a:	f383 8811 	msr	BASEPRI, r3
 8000e5e:	e005      	b.n	8000e6c <chOQPutTimeout+0x1c>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000e60:	4620      	mov	r0, r4
 8000e62:	4631      	mov	r1, r6
 8000e64:	f7ff ff8c 	bl	8000d80 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	db17      	blt.n	8000e9c <chOQPutTimeout+0x4c>
 8000e6c:	68a5      	ldr	r5, [r4, #8]
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0f6      	beq.n	8000e60 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8000e72:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8000e74:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000e76:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8000e78:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8000e7a:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8000e7c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000e7e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000e80:	6923      	ldr	r3, [r4, #16]
 8000e82:	6962      	ldr	r2, [r4, #20]
 8000e84:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000e86:	bf24      	itt	cs
 8000e88:	68e3      	ldrcs	r3, [r4, #12]
 8000e8a:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 8000e8c:	69e3      	ldr	r3, [r4, #28]
 8000e8e:	b10b      	cbz	r3, 8000e94 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8000e90:	4620      	mov	r0, r4
 8000e92:	4798      	blx	r3
 8000e94:	2000      	movs	r0, #0
 8000e96:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8000e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e9c:	f385 8811 	msr	BASEPRI, r5
 8000ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ea2:	bf00      	nop
	...

08000eb0 <putt.lto_priv.69>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 8000eb0:	3030      	adds	r0, #48	; 0x30
 8000eb2:	f7ff bfcd 	b.w	8000e50 <chOQPutTimeout>
 8000eb6:	bf00      	nop
	...

08000ec0 <put.lto_priv.67>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000ec0:	3030      	adds	r0, #48	; 0x30
 8000ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec6:	f7ff bfc3 	b.w	8000e50 <chOQPutTimeout>
 8000eca:	bf00      	nop
 8000ecc:	0000      	movs	r0, r0
	...

08000ed0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8000ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	4689      	mov	r9, r1
 8000eda:	4693      	mov	fp, r2
 8000edc:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8000ede:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000ee2:	2720      	movs	r7, #32
 8000ee4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8000ee8:	2600      	movs	r6, #0
 8000eea:	46b2      	mov	sl, r6
 8000eec:	9701      	str	r7, [sp, #4]

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 8000eee:	f1b8 0f00 	cmp.w	r8, #0
 8000ef2:	d007      	beq.n	8000f04 <chIQReadTimeout+0x34>
      nfy(iqp);
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	47c0      	blx	r8
 8000ef8:	e004      	b.n	8000f04 <chIQReadTimeout+0x34>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8000efa:	4620      	mov	r0, r4
 8000efc:	4629      	mov	r1, r5
 8000efe:	f7ff ff3f 	bl	8000d80 <chThdEnqueueTimeoutS>
 8000f02:	b9d0      	cbnz	r0, 8000f3a <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8000f04:	68a7      	ldr	r7, [r4, #8]
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8000f06:	2f00      	cmp	r7, #0
 8000f08:	d0f7      	beq.n	8000efa <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8000f0a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000f0c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000f0e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000f10:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8000f12:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8000f14:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000f16:	7813      	ldrb	r3, [r2, #0]
 8000f18:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 8000f1c:	6923      	ldr	r3, [r4, #16]
 8000f1e:	69a2      	ldr	r2, [r4, #24]
 8000f20:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8000f22:	bf24      	itt	cs
 8000f24:	68e3      	ldrcs	r3, [r4, #12]
 8000f26:	61a3      	strcs	r3, [r4, #24]
 8000f28:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 8000f2c:	3601      	adds	r6, #1
    if (--n == 0U) {
 8000f2e:	45b3      	cmp	fp, r6
 8000f30:	d005      	beq.n	8000f3e <chIQReadTimeout+0x6e>
 8000f32:	9b01      	ldr	r3, [sp, #4]
 8000f34:	f383 8811 	msr	BASEPRI, r3
 8000f38:	e7d9      	b.n	8000eee <chIQReadTimeout+0x1e>
 8000f3a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 8000f3e:	4630      	mov	r0, r6
 8000f40:	b003      	add	sp, #12
 8000f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f46:	bf00      	nop
	...

08000f50 <readt.lto_priv.72>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, timeout);
 8000f50:	300c      	adds	r0, #12
 8000f52:	f7ff bfbd 	b.w	8000ed0 <chIQReadTimeout>
 8000f56:	bf00      	nop
	...

08000f60 <read.lto_priv.66>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 8000f60:	300c      	adds	r0, #12
 8000f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f66:	f7ff bfb3 	b.w	8000ed0 <chIQReadTimeout>
 8000f6a:	bf00      	nop
 8000f6c:	0000      	movs	r0, r0
	...

08000f70 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8000f70:	b570      	push	{r4, r5, r6, lr}
 8000f72:	2320      	movs	r3, #32
 8000f74:	460e      	mov	r6, r1
 8000f76:	4604      	mov	r4, r0
 8000f78:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 8000f7c:	69c3      	ldr	r3, [r0, #28]
 8000f7e:	b13b      	cbz	r3, 8000f90 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 8000f80:	4798      	blx	r3
 8000f82:	e005      	b.n	8000f90 <chIQGetTimeout+0x20>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000f84:	4620      	mov	r0, r4
 8000f86:	4631      	mov	r1, r6
 8000f88:	f7ff fefa 	bl	8000d80 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	db13      	blt.n	8000fb8 <chIQGetTimeout+0x48>
 8000f90:	68a5      	ldr	r5, [r4, #8]
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8000f92:	2d00      	cmp	r5, #0
 8000f94:	d0f6      	beq.n	8000f84 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000f96:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8000f98:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8000f9a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000f9c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8000f9e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8000fa0:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8000fa2:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8000fa4:	bf28      	it	cs
 8000fa6:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000fa8:	61a2      	str	r2, [r4, #24]
 8000faa:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8000fac:	bf28      	it	cs
 8000fae:	61a3      	strcs	r3, [r4, #24]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8000fb6:	bd70      	pop	{r4, r5, r6, pc}
 8000fb8:	f385 8811 	msr	BASEPRI, r5
 8000fbc:	bd70      	pop	{r4, r5, r6, pc}
 8000fbe:	bf00      	nop

08000fc0 <gett.lto_priv.70>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 8000fc0:	300c      	adds	r0, #12
 8000fc2:	f7ff bfd5 	b.w	8000f70 <chIQGetTimeout>
 8000fc6:	bf00      	nop
	...

08000fd0 <get.lto_priv.68>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 8000fd0:	300c      	adds	r0, #12
 8000fd2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fd6:	f7ff bfcb 	b.w	8000f70 <chIQGetTimeout>
 8000fda:	bf00      	nop
 8000fdc:	0000      	movs	r0, r0
	...

08000fe0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8000fe0:	b508      	push	{r3, lr}
 8000fe2:	4601      	mov	r1, r0
 8000fe4:	2320      	movs	r3, #32
 8000fe6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8000fea:	2008      	movs	r0, #8
 8000fec:	f7ff fe28 	bl	8000c40 <chSchGoSleepTimeoutS>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f383 8811 	msr	BASEPRI, r3
 8000ff6:	bd08      	pop	{r3, pc}
	...

08001000 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8001000:	b410      	push	{r4}
 8001002:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001004:	2200      	movs	r2, #0
 8001006:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800100a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800100c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	428a      	cmp	r2, r1
 8001012:	d2fb      	bcs.n	800100c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001014:	685a      	ldr	r2, [r3, #4]
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 8001016:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001018:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 800101a:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 800101c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800101e:	605c      	str	r4, [r3, #4]

  return tp;
}
 8001020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20001030 	.word	0x20001030
 800102c:	00000000 	.word	0x00000000

08001030 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001032:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001034:	42a0      	cmp	r0, r4
 8001036:	d021      	beq.n	800107c <chEvtBroadcastFlagsI+0x4c>
 8001038:	460e      	mov	r6, r1
 800103a:	4607      	mov	r7, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800103c:	2500      	movs	r5, #0
 800103e:	e002      	b.n	8001046 <chEvtBroadcastFlagsI+0x16>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8001040:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001042:	42a7      	cmp	r7, r4
 8001044:	d01a      	beq.n	800107c <chEvtBroadcastFlagsI+0x4c>
  /*lint -restore*/
    elp->el_flags |= flags;
 8001046:	68e3      	ldr	r3, [r4, #12]
 8001048:	4333      	orrs	r3, r6
 800104a:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800104c:	b116      	cbz	r6, 8001054 <chEvtBroadcastFlagsI+0x24>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 800104e:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001050:	4213      	tst	r3, r2
 8001052:	d0f5      	beq.n	8001040 <chEvtBroadcastFlagsI+0x10>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8001054:	6860      	ldr	r0, [r4, #4]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001056:	68a3      	ldr	r3, [r4, #8]
 8001058:	6b41      	ldr	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800105a:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800105c:	430b      	orrs	r3, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800105e:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001060:	6343      	str	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001062:	d00c      	beq.n	800107e <chEvtBroadcastFlagsI+0x4e>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8001064:	2a0b      	cmp	r2, #11
 8001066:	d1eb      	bne.n	8001040 <chEvtBroadcastFlagsI+0x10>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8001068:	6a02      	ldr	r2, [r0, #32]
 800106a:	4013      	ands	r3, r2

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800106c:	429a      	cmp	r2, r3
 800106e:	d1e7      	bne.n	8001040 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8001070:	6205      	str	r5, [r0, #32]
    (void) chSchReadyI(tp);
 8001072:	f7ff ffc5 	bl	8001000 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8001076:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001078:	42a7      	cmp	r7, r4
 800107a:	d1e4      	bne.n	8001046 <chEvtBroadcastFlagsI+0x16>
 800107c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800107e:	6a02      	ldr	r2, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001080:	4213      	tst	r3, r2
 8001082:	d0dd      	beq.n	8001040 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8001084:	6205      	str	r5, [r0, #32]
    (void) chSchReadyI(tp);
 8001086:	f7ff ffbb 	bl	8001000 <chSchReadyI>
 800108a:	e7f4      	b.n	8001076 <chEvtBroadcastFlagsI+0x46>
 800108c:	0000      	movs	r0, r0
	...

08001090 <sduDataReceived>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001090:	f101 0311 	add.w	r3, r1, #17
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8001094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001098:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]

  if (sdup == NULL) {
 800109c:	b1bc      	cbz	r4, 80010ce <sduDataReceived+0x3e>
 800109e:	4607      	mov	r7, r0
 80010a0:	460d      	mov	r5, r1
 80010a2:	f04f 0820 	mov.w	r8, #32
 80010a6:	f388 8811 	msr	BASEPRI, r8
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80010aa:	2104      	movs	r1, #4
 80010ac:	1860      	adds	r0, r4, r1
 80010ae:	f7ff ffbf 	bl	8001030 <chEvtBroadcastFlagsI>
 80010b2:	eb07 0085 	add.w	r0, r7, r5, lsl #2
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 80010b6:	68c1      	ldr	r1, [r0, #12]
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 80010b8:	69e2      	ldr	r2, [r4, #28]
 80010ba:	69a6      	ldr	r6, [r4, #24]
 80010bc:	6963      	ldr	r3, [r4, #20]
 80010be:	8a49      	ldrh	r1, [r1, #18]
 80010c0:	1b92      	subs	r2, r2, r6
 80010c2:	1ad3      	subs	r3, r2, r3
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 80010c4:	4299      	cmp	r1, r3
 80010c6:	d904      	bls.n	80010d2 <sduDataReceived+0x42>
 80010c8:	2300      	movs	r3, #0
 80010ca:	f383 8811 	msr	BASEPRI, r3
 80010ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010d2:	f04f 0e00 	mov.w	lr, #0
 80010d6:	f38e 8811 	msr	BASEPRI, lr
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80010de:	68c2      	ldr	r2, [r0, #12]
 80010e0:	fb01 f303 	mul.w	r3, r1, r3
 80010e4:	6992      	ldr	r2, [r2, #24]
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 80010e6:	340c      	adds	r4, #12

  osp->rxqueued           = true;
 80010e8:	2101      	movs	r1, #1
 80010ea:	7011      	strb	r1, [r2, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 80010ec:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 80010ee:	f8c2 e008 	str.w	lr, [r2, #8]
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
 80010f2:	60d4      	str	r4, [r2, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80010f4:	4638      	mov	r0, r7
 80010f6:	4629      	mov	r1, r5
 80010f8:	f002 f8f2 	bl	80032e0 <usb_lld_prepare_receive>
 80010fc:	f388 8811 	msr	BASEPRI, r8

    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, ep);
 8001100:	4638      	mov	r0, r7
 8001102:	4629      	mov	r1, r5
 8001104:	f7ff fa1c 	bl	8000540 <usbStartReceiveI>
 8001108:	e7de      	b.n	80010c8 <sduDataReceived+0x38>
 800110a:	bf00      	nop
 800110c:	0000      	movs	r0, r0
	...

08001110 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001112:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001116:	6a9c      	ldr	r4, [r3, #40]	; 0x28

  if (sdup == NULL) {
 8001118:	b1bc      	cbz	r4, 800114a <sduDataTransmitted+0x3a>
 800111a:	460e      	mov	r6, r1
 800111c:	4605      	mov	r5, r0
 800111e:	2720      	movs	r7, #32
 8001120:	f387 8811 	msr	BASEPRI, r7
 8001124:	2108      	movs	r1, #8
 8001126:	1d20      	adds	r0, r4, #4
 8001128:	f7ff ff82 	bl	8001030 <chEvtBroadcastFlagsI>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 800112c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800112e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001130:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001132:	1ad3      	subs	r3, r2, r3

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 8001134:	1a5b      	subs	r3, r3, r1
 8001136:	d118      	bne.n	800116a <sduDataTransmitted+0x5a>
 8001138:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800113c:	68cb      	ldr	r3, [r1, #12]
 800113e:	695a      	ldr	r2, [r3, #20]
 8001140:	6852      	ldr	r2, [r2, #4]
 8001142:	b91a      	cbnz	r2, 800114c <sduDataTransmitted+0x3c>
 8001144:	2300      	movs	r3, #0
 8001146:	f383 8811 	msr	BASEPRI, r3
 800114a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           ((usbp->epc[ep]->in_state->txsize &
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 800114c:	8a1b      	ldrh	r3, [r3, #16]
 800114e:	3b01      	subs	r3, #1
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001150:	4013      	ands	r3, r2
 8001152:	d1f7      	bne.n	8001144 <sduDataTransmitted+0x34>
 8001154:	f383 8811 	msr	BASEPRI, r3
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001158:	68ca      	ldr	r2, [r1, #12]
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 800115a:	3430      	adds	r4, #48	; 0x30
 800115c:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
 800115e:	2101      	movs	r1, #1
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 8001160:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 8001162:	6093      	str	r3, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 8001164:	60d4      	str	r4, [r2, #12]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 8001166:	7011      	strb	r1, [r2, #0]
 8001168:	e00c      	b.n	8001184 <sduDataTransmitted+0x74>
 800116a:	2100      	movs	r1, #0
 800116c:	f381 8811 	msr	BASEPRI, r1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001170:	eb05 0286 	add.w	r2, r5, r6, lsl #2
 8001174:	68d2      	ldr	r2, [r2, #12]
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);
 8001176:	3430      	adds	r4, #48	; 0x30
 8001178:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
 800117a:	2001      	movs	r0, #1
  isp->mode.queue.txqueue = oqp;
 800117c:	60d4      	str	r4, [r2, #12]
  isp->txsize             = n;
 800117e:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 8001180:	6091      	str	r1, [r2, #8]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 8001182:	7010      	strb	r0, [r2, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8001184:	4628      	mov	r0, r5
 8001186:	4631      	mov	r1, r6
 8001188:	f002 f86a 	bl	8003260 <usb_lld_prepare_transmit>
 800118c:	f387 8811 	msr	BASEPRI, r7
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
 8001190:	4628      	mov	r0, r5
 8001192:	4631      	mov	r1, r6
 8001194:	f7ff f84c 	bl	8000230 <usbStartTransmitI>
 8001198:	e7d4      	b.n	8001144 <sduDataTransmitted+0x34>
 800119a:	bf00      	nop
 800119c:	0000      	movs	r0, r0
	...

080011a0 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <chMtxUnlock+0x60>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 80011a2:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 80011a4:	699d      	ldr	r5, [r3, #24]
 80011a6:	2320      	movs	r3, #32
 80011a8:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80011ac:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 80011ae:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80011b0:	42a0      	cmp	r0, r4
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 80011b2:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80011b4:	d01d      	beq.n	80011f2 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 80011b6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80011b8:	b14b      	cbz	r3, 80011ce <chMtxUnlock+0x2e>
 80011ba:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80011bc:	4293      	cmp	r3, r2
 80011be:	d003      	beq.n	80011c8 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 80011c0:	6892      	ldr	r2, [r2, #8]
 80011c2:	4291      	cmp	r1, r2
 80011c4:	bf38      	it	cc
 80011c6:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 80011c8:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f5      	bne.n	80011ba <chMtxUnlock+0x1a>
 80011ce:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80011d0:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 80011d2:	6ba6      	ldr	r6, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80011d4:	4620      	mov	r0, r4
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 80011d6:	60a9      	str	r1, [r5, #8]
 80011d8:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80011da:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 80011dc:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 80011de:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 80011e0:	63a3      	str	r3, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80011e2:	f7ff ff0d 	bl	8001000 <chSchReadyI>
      chSchRescheduleS();
 80011e6:	f7ff fd03 	bl	8000bf0 <chSchRescheduleS>
 80011ea:	2300      	movs	r3, #0
 80011ec:	f383 8811 	msr	BASEPRI, r3
 80011f0:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	6083      	str	r3, [r0, #8]
 80011f6:	2300      	movs	r3, #0
 80011f8:	f383 8811 	msr	BASEPRI, r3
 80011fc:	bd70      	pop	{r4, r5, r6, pc}
 80011fe:	bf00      	nop
 8001200:	20001030 	.word	0x20001030
	...

08001210 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8001210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001212:	2320      	movs	r3, #32
 8001214:	f383 8811 	msr	BASEPRI, r3
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <chMtxLock+0xd4>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 800121a:	6882      	ldr	r2, [r0, #8]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 800121c:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 800121e:	2a00      	cmp	r2, #0
 8001220:	d057      	beq.n	80012d2 <chMtxLock+0xc2>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8001222:	68a1      	ldr	r1, [r4, #8]
 8001224:	6893      	ldr	r3, [r2, #8]
 8001226:	4605      	mov	r5, r0
 8001228:	4299      	cmp	r1, r3
 800122a:	d906      	bls.n	800123a <chMtxLock+0x2a>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800122c:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 800122e:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8001230:	2b06      	cmp	r3, #6
 8001232:	d035      	beq.n	80012a0 <chMtxLock+0x90>
 8001234:	2b07      	cmp	r3, #7
 8001236:	d01f      	beq.n	8001278 <chMtxLock+0x68>
 8001238:	b1ab      	cbz	r3, 8001266 <chMtxLock+0x56>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800123a:	462b      	mov	r3, r5
 800123c:	e003      	b.n	8001246 <chMtxLock+0x36>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800123e:	6899      	ldr	r1, [r3, #8]
 8001240:	68a2      	ldr	r2, [r4, #8]
 8001242:	4291      	cmp	r1, r2
 8001244:	d302      	bcc.n	800124c <chMtxLock+0x3c>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001246:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001248:	429d      	cmp	r5, r3
 800124a:	d1f8      	bne.n	800123e <chMtxLock+0x2e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800124c:	685a      	ldr	r2, [r3, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 800124e:	2006      	movs	r0, #6

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001250:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8001252:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8001254:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001256:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 8001258:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 800125a:	f7ff fcd9 	bl	8000c10 <chSchGoSleepS>
 800125e:	2300      	movs	r3, #0
 8001260:	f383 8811 	msr	BASEPRI, r3
 8001264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001266:	e892 000a 	ldmia.w	r2, {r1, r3}
 800126a:	6019      	str	r1, [r3, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 800126c:	4610      	mov	r0, r2
  tp->p_next->p_prev = tp->p_prev;
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	6053      	str	r3, [r2, #4]
 8001272:	f7ff fec5 	bl	8001000 <chSchReadyI>
 8001276:	e7e0      	b.n	800123a <chMtxLock+0x2a>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001278:	6817      	ldr	r7, [r2, #0]
 800127a:	6850      	ldr	r0, [r2, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800127c:	6a16      	ldr	r6, [r2, #32]
 800127e:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001280:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001282:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	e002      	b.n	800128e <chMtxLock+0x7e>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001288:	6898      	ldr	r0, [r3, #8]
 800128a:	4281      	cmp	r1, r0
 800128c:	d802      	bhi.n	8001294 <chMtxLock+0x84>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800128e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001290:	429e      	cmp	r6, r3
 8001292:	d1f9      	bne.n	8001288 <chMtxLock+0x78>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001294:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001296:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8001298:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 800129a:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	e7cc      	b.n	800123a <chMtxLock+0x2a>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80012a0:	6817      	ldr	r7, [r2, #0]
 80012a2:	6850      	ldr	r0, [r2, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 80012a4:	6a16      	ldr	r6, [r2, #32]
 80012a6:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 80012a8:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80012aa:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	e002      	b.n	80012b6 <chMtxLock+0xa6>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80012b0:	6898      	ldr	r0, [r3, #8]
 80012b2:	4288      	cmp	r0, r1
 80012b4:	d302      	bcc.n	80012bc <chMtxLock+0xac>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80012b6:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80012b8:	429e      	cmp	r6, r3
 80012ba:	d1f9      	bne.n	80012b0 <chMtxLock+0xa0>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80012bc:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80012be:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 80012c0:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 80012c2:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 80012c4:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 80012c6:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 80012c8:	68a1      	ldr	r1, [r4, #8]
 80012ca:	6893      	ldr	r3, [r2, #8]
 80012cc:	4299      	cmp	r1, r3
 80012ce:	d8ad      	bhi.n	800122c <chMtxLock+0x1c>
 80012d0:	e7b3      	b.n	800123a <chMtxLock+0x2a>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 80012d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 80012d4:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 80012d6:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 80012d8:	63a0      	str	r0, [r4, #56]	; 0x38
 80012da:	2300      	movs	r3, #0
 80012dc:	f383 8811 	msr	BASEPRI, r3
 80012e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20001030 	.word	0x20001030
	...

080012f0 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 80012f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f2:	2220      	movs	r2, #32
 80012f4:	f382 8811 	msr	BASEPRI, r2
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 80012f8:	7f83      	ldrb	r3, [r0, #30]
 80012fa:	2100      	movs	r1, #0
 80012fc:	3b01      	subs	r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	7783      	strb	r3, [r0, #30]
 8001302:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8001306:	b913      	cbnz	r3, 800130e <chThdRelease+0x1e>
 8001308:	7f01      	ldrb	r1, [r0, #28]
 800130a:	290f      	cmp	r1, #15
 800130c:	d000      	beq.n	8001310 <chThdRelease+0x20>
 800130e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 8001310:	7f41      	ldrb	r1, [r0, #29]
 8001312:	f001 0103 	and.w	r1, r1, #3
 8001316:	2901      	cmp	r1, #1
 8001318:	d002      	beq.n	8001320 <chThdRelease+0x30>
 800131a:	2902      	cmp	r1, #2
 800131c:	d01e      	beq.n	800135c <chThdRelease+0x6c>
 800131e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8001320:	6943      	ldr	r3, [r0, #20]
 8001322:	6902      	ldr	r2, [r0, #16]
 8001324:	4604      	mov	r4, r0
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	6902      	ldr	r2, [r0, #16]
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 800132a:	f1a0 0508 	sub.w	r5, r0, #8
 800132e:	6153      	str	r3, [r2, #20]
  /*lint -restore*/
  heapp = hp->h.u.heap;
 8001330:	f850 6c08 	ldr.w	r6, [r0, #-8]
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8001334:	f106 0710 	add.w	r7, r6, #16
 8001338:	4638      	mov	r0, r7

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 800133a:	3608      	adds	r6, #8

  H_LOCK(heapp);
 800133c:	f7ff ff68 	bl	8001210 <chMtxLock>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8001340:	4633      	mov	r3, r6

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8001342:	429e      	cmp	r6, r3
 8001344:	d004      	beq.n	8001350 <chThdRelease+0x60>
 8001346:	429d      	cmp	r5, r3
 8001348:	d802      	bhi.n	8001350 <chThdRelease+0x60>
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	429e      	cmp	r6, r3
 800134e:	d1fa      	bne.n	8001346 <chThdRelease+0x56>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8001350:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8001352:	b18a      	cbz	r2, 8001378 <chThdRelease+0x88>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8001354:	4295      	cmp	r5, r2
 8001356:	d30f      	bcc.n	8001378 <chThdRelease+0x88>
 8001358:	4613      	mov	r3, r2
 800135a:	e7f2      	b.n	8001342 <chThdRelease+0x52>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 800135c:	6905      	ldr	r5, [r0, #16]
 800135e:	6944      	ldr	r4, [r0, #20]
#endif
      chPoolFree(tp->p_mpool, tp);
 8001360:	6c01      	ldr	r1, [r0, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8001362:	6125      	str	r5, [r4, #16]
 8001364:	6905      	ldr	r5, [r0, #16]
 8001366:	616c      	str	r4, [r5, #20]
 8001368:	f382 8811 	msr	BASEPRI, r2
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800136c:	680a      	ldr	r2, [r1, #0]
 800136e:	6002      	str	r2, [r0, #0]
  mp->mp_next = php;
 8001370:	6008      	str	r0, [r1, #0]
 8001372:	f383 8811 	msr	BASEPRI, r3
 8001376:	e7ca      	b.n	800130e <chThdRelease+0x1e>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8001378:	f854 1c04 	ldr.w	r1, [r4, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 800137c:	f844 2c08 	str.w	r2, [r4, #-8]
      qp->h.u.next = hp;
 8001380:	601d      	str	r5, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8001382:	f101 0208 	add.w	r2, r1, #8
 8001386:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800138a:	18a8      	adds	r0, r5, r2
 800138c:	42b0      	cmp	r0, r6
 800138e:	d00a      	beq.n	80013a6 <chThdRelease+0xb6>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8001390:	6859      	ldr	r1, [r3, #4]
 8001392:	f101 0208 	add.w	r2, r1, #8
 8001396:	441a      	add	r2, r3
 8001398:	4295      	cmp	r5, r2
 800139a:	d00b      	beq.n	80013b4 <chThdRelease+0xc4>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 800139c:	4638      	mov	r0, r7
      /* Nothing to do for static threads, those are removed from the
         registry on exit.*/
      break;
    }
  }
}
 800139e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80013a2:	f7ff befd 	b.w	80011a0 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 80013a6:	6846      	ldr	r6, [r0, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 80013a8:	58a8      	ldr	r0, [r5, r2]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 80013aa:	198a      	adds	r2, r1, r6
 80013ac:	3208      	adds	r2, #8
        hp->h.u.next = hp->h.u.next->h.u.next;
 80013ae:	e904 0005 	stmdb	r4, {r0, r2}
 80013b2:	e7ed      	b.n	8001390 <chThdRelease+0xa0>
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 80013b4:	e914 0005 	ldmdb	r4, {r0, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 80013b8:	440a      	add	r2, r1
 80013ba:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 80013bc:	e883 0005 	stmia.w	r3, {r0, r2}
 80013c0:	e7ec      	b.n	800139c <chThdRelease+0xac>
 80013c2:	bf00      	nop
	...

080013d0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80013d0:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80013d2:	6803      	ldr	r3, [r0, #0]
 80013d4:	4604      	mov	r4, r0

  while (queue_notempty(tqp)) {
 80013d6:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80013d8:	460d      	mov	r5, r1

  while (queue_notempty(tqp)) {
 80013da:	d009      	beq.n	80013f0 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80013dc:	681a      	ldr	r2, [r3, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  (void) chSchReadyI(tp);
 80013de:	4618      	mov	r0, r3
 80013e0:	6022      	str	r2, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80013e2:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80013e4:	621d      	str	r5, [r3, #32]
  (void) chSchReadyI(tp);
 80013e6:	f7ff fe0b 	bl	8001000 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	429c      	cmp	r4, r3
 80013ee:	d1f5      	bne.n	80013dc <chThdDequeueAllI+0xc>
 80013f0:	bd38      	pop	{r3, r4, r5, pc}
 80013f2:	bf00      	nop
	...

08001400 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8001400:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <chThdExitS+0x3c>)
 8001404:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001406:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001408:	f104 0524 	add.w	r5, r4, #36	; 0x24
 800140c:	429d      	cmp	r5, r3
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 800140e:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001410:	d007      	beq.n	8001422 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8001412:	681a      	ldr	r2, [r3, #0]
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8001414:	4618      	mov	r0, r3
 8001416:	6262      	str	r2, [r4, #36]	; 0x24
 8001418:	f7ff fdf2 	bl	8001000 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800141c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800141e:	42ab      	cmp	r3, r5
 8001420:	d1f7      	bne.n	8001412 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001422:	7f63      	ldrb	r3, [r4, #29]
 8001424:	079b      	lsls	r3, r3, #30
 8001426:	d104      	bne.n	8001432 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8001428:	6922      	ldr	r2, [r4, #16]
 800142a:	6963      	ldr	r3, [r4, #20]
 800142c:	611a      	str	r2, [r3, #16]
 800142e:	6922      	ldr	r2, [r4, #16]
 8001430:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001432:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8001434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001438:	f7ff bbea 	b.w	8000c10 <chSchGoSleepS>
 800143c:	20001030 	.word	0x20001030

08001440 <chThdExit>:
 8001440:	2320      	movs	r3, #32
 8001442:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8001446:	f7ff bfdb 	b.w	8001400 <chThdExitS>
 800144a:	bf00      	nop
 800144c:	0000      	movs	r0, r0
	...

08001450 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8001450:	e7fe      	b.n	8001450 <BusFault_Handler>
 8001452:	bf00      	nop
	...

08001460 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001460:	e7fe      	b.n	8001460 <__default_exit>
 8001462:	bf00      	nop
	...

08001470 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
	...

08001480 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
	...

08001490 <get_descriptor.lto_priv.64>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8001490:	2902      	cmp	r1, #2
 8001492:	d006      	beq.n	80014a2 <get_descriptor.lto_priv.64+0x12>
 8001494:	2903      	cmp	r1, #3
 8001496:	d006      	beq.n	80014a6 <get_descriptor.lto_priv.64+0x16>
 8001498:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <get_descriptor.lto_priv.64+0x24>)
 800149c:	bf18      	it	ne
 800149e:	2000      	movne	r0, #0
 80014a0:	4770      	bx	lr
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <get_descriptor.lto_priv.64+0x28>)
 80014a4:	4770      	bx	lr
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 80014a6:	2a03      	cmp	r2, #3
      return &vcom_strings[dindex];
 80014a8:	bf9a      	itte	ls
 80014aa:	4b04      	ldrls	r3, [pc, #16]	; (80014bc <get_descriptor.lto_priv.64+0x2c>)
 80014ac:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
  }
  return NULL;
 80014b0:	2000      	movhi	r0, #0
}
 80014b2:	4770      	bx	lr
 80014b4:	08003ed0 	.word	0x08003ed0
 80014b8:	08004240 	.word	0x08004240
 80014bc:	08003eb0 	.word	0x08003eb0

080014c0 <usb_event.lto_priv.63>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
  extern SerialUSBDriver SDU1;

  switch (event) {
 80014c0:	2902      	cmp	r1, #2
 80014c2:	d149      	bne.n	8001558 <usb_event.lto_priv.63+0x98>
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 80014c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c6:	4606      	mov	r6, r0
 80014c8:	460d      	mov	r5, r1
 80014ca:	2320      	movs	r3, #32
 80014cc:	f383 8811 	msr	BASEPRI, r3
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
  USBDriver *usbp = sdup->config->usbp;
 80014d0:	4c22      	ldr	r4, [pc, #136]	; (800155c <usb_event.lto_priv.63+0x9c>)
    chSysLockFromISR();

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 80014d2:	2101      	movs	r1, #1
 80014d4:	4a22      	ldr	r2, [pc, #136]	; (8001560 <usb_event.lto_priv.63+0xa0>)
 80014d6:	f7ff fb0b 	bl	8000af0 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 80014da:	4630      	mov	r0, r6
 80014dc:	4629      	mov	r1, r5
 80014de:	4a21      	ldr	r2, [pc, #132]	; (8001564 <usb_event.lto_priv.63+0xa4>)
 80014e0:	f7ff fb06 	bl	8000af0 <usbInitEndpointI>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 80014e4:	69a3      	ldr	r3, [r4, #24]
 80014e6:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80014ea:	f104 070c 	add.w	r7, r4, #12

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 80014ee:	2500      	movs	r5, #0
 80014f0:	6816      	ldr	r6, [r2, #0]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80014f2:	4638      	mov	r0, r7
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 80014f4:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_wrptr = iqp->q_buffer;
 80014f6:	6223      	str	r3, [r4, #32]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80014f8:	f06f 0101 	mvn.w	r1, #1

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 80014fc:	6165      	str	r5, [r4, #20]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80014fe:	f7ff ff67 	bl	80013d0 <chThdDequeueAllI>
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8001502:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8001504:	6c23      	ldr	r3, [r4, #64]	; 0x40
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8001506:	64a2      	str	r2, [r4, #72]	; 0x48
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8001508:	1a9b      	subs	r3, r3, r2
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
 800150a:	6462      	str	r2, [r4, #68]	; 0x44
  oqp->q_counter = chQSizeX(oqp);
 800150c:	63a3      	str	r3, [r4, #56]	; 0x38
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800150e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001512:	f06f 0101 	mvn.w	r1, #1
 8001516:	f7ff ff5b 	bl	80013d0 <chThdDequeueAllI>
 800151a:	1d20      	adds	r0, r4, #4
 800151c:	2101      	movs	r1, #1
 800151e:	f7ff fd87 	bl	8001030 <chEvtBroadcastFlagsI>
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 8001522:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 8001526:	2201      	movs	r2, #1
 8001528:	7959      	ldrb	r1, [r3, #5]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800152a:	4630      	mov	r0, r6
 800152c:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 8001530:	68db      	ldr	r3, [r3, #12]
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 8001532:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8001536:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 8001538:	f8c3 e004 	str.w	lr, [r3, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 800153c:	701a      	strb	r2, [r3, #0]
  osp->mode.queue.rxqueue = iqp;
 800153e:	60df      	str	r7, [r3, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8001540:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8001542:	f001 fecd 	bl	80032e0 <usb_lld_prepare_receive>
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 8001546:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800154a:	4630      	mov	r0, r6
 800154c:	7959      	ldrb	r1, [r3, #5]
 800154e:	f7fe fff7 	bl	8000540 <usbStartReceiveI>
 8001552:	f385 8811 	msr	BASEPRI, r5
 8001556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000dd0 	.word	0x20000dd0
 8001560:	08004250 	.word	0x08004250
 8001564:	08003e10 	.word	0x08003e10
	...

08001570 <lcd_2x16_write>:
	LCD_2X16_DATA = 0x00,
} lcd_2x16_command;

//-----------------------------------------------------------------------------
void lcd_2x16_write(uint8_t data)
{
 8001570:	b538      	push	{r3, r4, r5, lr}
	pal_lld_clearport(LCD_PORT, LCD_PINS_DATA);

	palSetPad(LCD_PORT, LCD_PIN_E);

#ifdef LCD_PIN_OFFSET
	pal_lld_setport(LCD_PORT, ((LCD_PINS_DATA | (data & 0xF0))<<LCD_PIN_OFFSET) );
 8001572:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
} lcd_2x16_command;

//-----------------------------------------------------------------------------
void lcd_2x16_write(uint8_t data)
{
	pal_lld_clearport(LCD_PORT, LCD_PINS_DATA);
 8001576:	4c08      	ldr	r4, [pc, #32]	; (8001598 <lcd_2x16_write+0x28>)

	palSetPad(LCD_PORT, LCD_PIN_E);

#ifdef LCD_PIN_OFFSET
	pal_lld_setport(LCD_PORT, ((LCD_PINS_DATA | (data & 0xF0))<<LCD_PIN_OFFSET) );
 8001578:	f440 4370 	orr.w	r3, r0, #61440	; 0xf000
 800157c:	021b      	lsls	r3, r3, #8
} lcd_2x16_command;

//-----------------------------------------------------------------------------
void lcd_2x16_write(uint8_t data)
{
	pal_lld_clearport(LCD_PORT, LCD_PINS_DATA);
 800157e:	f44f 4270 	mov.w	r2, #61440	; 0xf000

	palSetPad(LCD_PORT, LCD_PIN_E);
 8001582:	f44f 6500 	mov.w	r5, #2048	; 0x800
} lcd_2x16_command;

//-----------------------------------------------------------------------------
void lcd_2x16_write(uint8_t data)
{
	pal_lld_clearport(LCD_PORT, LCD_PINS_DATA);
 8001586:	6162      	str	r2, [r4, #20]

	if (data & 0x10)
		palSetPad(LCD_PORT, LCD_PIN_DB4);
#endif

	chThdSleepMicroseconds(1);
 8001588:	2001      	movs	r0, #1
//-----------------------------------------------------------------------------
void lcd_2x16_write(uint8_t data)
{
	pal_lld_clearport(LCD_PORT, LCD_PINS_DATA);

	palSetPad(LCD_PORT, LCD_PIN_E);
 800158a:	6125      	str	r5, [r4, #16]

#ifdef LCD_PIN_OFFSET
	pal_lld_setport(LCD_PORT, ((LCD_PINS_DATA | (data & 0xF0))<<LCD_PIN_OFFSET) );
 800158c:	6123      	str	r3, [r4, #16]

	if (data & 0x10)
		palSetPad(LCD_PORT, LCD_PIN_DB4);
#endif

	chThdSleepMicroseconds(1);
 800158e:	f7ff fd27 	bl	8000fe0 <chThdSleep>
	palClearPad(LCD_PORT, LCD_PIN_E);
 8001592:	6165      	str	r5, [r4, #20]
 8001594:	bd38      	pop	{r3, r4, r5, pc}
 8001596:	bf00      	nop
 8001598:	40010c00 	.word	0x40010c00
 800159c:	00000000 	.word	0x00000000

080015a0 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 80015a0:	2900      	cmp	r1, #0
 80015a2:	dd03      	ble.n	80015ac <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80015a4:	4908      	ldr	r1, [pc, #32]	; (80015c8 <cmd_systime+0x28>)
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <cmd_systime+0x2c>)
 80015a8:	f001 bda2 	b.w	80030f0 <chprintf.lto_priv.86>
 80015ac:	2320      	movs	r3, #32
 80015ae:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80015b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b8:	2300      	movs	r3, #0
 80015ba:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 80015be:	4904      	ldr	r1, [pc, #16]	; (80015d0 <cmd_systime+0x30>)
 80015c0:	b292      	uxth	r2, r2
 80015c2:	f001 bd95 	b.w	80030f0 <chprintf.lto_priv.86>
 80015c6:	bf00      	nop
 80015c8:	08003f10 	.word	0x08003f10
 80015cc:	08003f1c 	.word	0x08003f1c
 80015d0:	08003f24 	.word	0x08003f24
	...

080015e0 <shell_thread.lto_priv.56>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 80015e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <shell_thread.lto_priv.56+0x1ec>)
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 80015e6:	6804      	ldr	r4, [r0, #0]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	4a79      	ldr	r2, [pc, #484]	; (80017d0 <shell_thread.lto_priv.56+0x1f0>)
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 80015ec:	b098      	sub	sp, #96	; 0x60
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 80015ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nSTech(saagar.tech@gmail.com)\r\n");
 80015f2:	4978      	ldr	r1, [pc, #480]	; (80017d4 <shell_thread.lto_priv.56+0x1f4>)
 80015f4:	4620      	mov	r0, r4
 80015f6:	619a      	str	r2, [r3, #24]
 80015f8:	f001 fd7a 	bl	80030f0 <chprintf.lto_priv.86>
 80015fc:	ae08      	add	r6, sp, #32
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 80015fe:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nSTech(saagar.tech@gmail.com)\r\n");
  while (true) {
    chprintf(chp, "guest> ");
 8001602:	4620      	mov	r0, r4
 8001604:	4974      	ldr	r1, [pc, #464]	; (80017d8 <shell_thread.lto_priv.56+0x1f8>)
 8001606:	f001 fd73 	bl	80030f0 <chprintf.lto_priv.86>
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 800160a:	4635      	mov	r5, r6

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	4620      	mov	r0, r4
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f10d 0107 	add.w	r1, sp, #7
 8001616:	2201      	movs	r2, #1
 8001618:	4798      	blx	r3
 800161a:	b370      	cbz	r0, 800167a <shell_thread.lto_priv.56+0x9a>
      return true;
    if (c == 4) {
 800161c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001620:	2904      	cmp	r1, #4
 8001622:	d026      	beq.n	8001672 <shell_thread.lto_priv.56+0x92>
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
 8001624:	2908      	cmp	r1, #8
 8001626:	d011      	beq.n	800164c <shell_thread.lto_priv.56+0x6c>
 8001628:	297f      	cmp	r1, #127	; 0x7f
 800162a:	d00f      	beq.n	800164c <shell_thread.lto_priv.56+0x6c>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 800162c:	290d      	cmp	r1, #13
 800162e:	d035      	beq.n	800169c <shell_thread.lto_priv.56+0xbc>
      chprintf(chp, "\r\n");
      *p = 0;
      return false;
    }
    if (c < 0x20)
 8001630:	291f      	cmp	r1, #31
 8001632:	d9eb      	bls.n	800160c <shell_thread.lto_priv.56+0x2c>
      continue;
    if (p < line + size - 1) {
 8001634:	42bd      	cmp	r5, r7
 8001636:	d2e9      	bcs.n	800160c <shell_thread.lto_priv.56+0x2c>
      chSequentialStreamPut(chp, c);
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	4620      	mov	r0, r4
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	4798      	blx	r3
      *p++ = (char)c;
 8001640:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001644:	3501      	adds	r5, #1
 8001646:	f805 3c01 	strb.w	r3, [r5, #-1]
 800164a:	e7df      	b.n	800160c <shell_thread.lto_priv.56+0x2c>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 800164c:	42b5      	cmp	r5, r6
 800164e:	d0dd      	beq.n	800160c <shell_thread.lto_priv.56+0x2c>
        chSequentialStreamPut(chp, c);
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	4620      	mov	r0, r4
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	4620      	mov	r0, r4
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2120      	movs	r1, #32
 8001660:	4798      	blx	r3
        chSequentialStreamPut(chp, c);
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	4620      	mov	r0, r4
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f89d 1007 	ldrb.w	r1, [sp, #7]
        p--;
 800166c:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
 800166e:	4798      	blx	r3
 8001670:	e7cc      	b.n	800160c <shell_thread.lto_priv.56+0x2c>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
    if (c == 4) {
      chprintf(chp, "^D");
 8001672:	4620      	mov	r0, r4
 8001674:	4959      	ldr	r1, [pc, #356]	; (80017dc <shell_thread.lto_priv.56+0x1fc>)
 8001676:	f001 fd3b 	bl	80030f0 <chprintf.lto_priv.86>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nSTech(saagar.tech@gmail.com)\r\n");
  while (true) {
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 800167a:	4620      	mov	r0, r4
 800167c:	4958      	ldr	r1, [pc, #352]	; (80017e0 <shell_thread.lto_priv.56+0x200>)
 800167e:	f001 fd37 	bl	80030f0 <chprintf.lto_priv.86>
 8001682:	2320      	movs	r3, #32
 8001684:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8001688:	2100      	movs	r1, #0
 800168a:	4856      	ldr	r0, [pc, #344]	; (80017e4 <shell_thread.lto_priv.56+0x204>)
 800168c:	f7ff fcd0 	bl	8001030 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff feb5 	bl	8001400 <chThdExitS>
        chprintf(chp, " ?\r\n");
      }
    }
  }
  shellExit(MSG_OK);
}
 8001696:	b018      	add	sp, #96	; 0x60
 8001698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 800169c:	4952      	ldr	r1, [pc, #328]	; (80017e8 <shell_thread.lto_priv.56+0x208>)
 800169e:	4620      	mov	r0, r4
 80016a0:	f001 fd26 	bl	80030f0 <chprintf.lto_priv.86>
      *p = 0;
 80016a4:	2300      	movs	r3, #0
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80016a6:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 80016a8:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80016aa:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 80016ac:	461d      	mov	r5, r3
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80016ae:	f002 fa0f 	bl	8003ad0 <_strtok.constprop.13>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80016b2:	a902      	add	r1, sp, #8
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80016b4:	4682      	mov	sl, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80016b6:	2000      	movs	r0, #0
 80016b8:	f10d 090c 	add.w	r9, sp, #12
 80016bc:	f002 fa08 	bl	8003ad0 <_strtok.constprop.13>
 80016c0:	b150      	cbz	r0, 80016d8 <shell_thread.lto_priv.56+0xf8>
      if (n >= SHELL_MAX_ARGUMENTS) {
 80016c2:	2d04      	cmp	r5, #4
 80016c4:	d01d      	beq.n	8001702 <shell_thread.lto_priv.56+0x122>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 80016c6:	f849 0b04 	str.w	r0, [r9], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80016ca:	a902      	add	r1, sp, #8
 80016cc:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 80016ce:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80016d0:	f002 f9fe 	bl	8003ad0 <_strtok.constprop.13>
 80016d4:	2800      	cmp	r0, #0
 80016d6:	d1f4      	bne.n	80016c2 <shell_thread.lto_priv.56+0xe2>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 80016d8:	ab18      	add	r3, sp, #96	; 0x60
 80016da:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80016de:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 80016e2:	f1ba 0f00 	cmp.w	sl, #0
 80016e6:	d08c      	beq.n	8001602 <shell_thread.lto_priv.56+0x22>
      if (strcasecmp(cmd, "exit") == 0) {
 80016e8:	4650      	mov	r0, sl
 80016ea:	4940      	ldr	r1, [pc, #256]	; (80017ec <shell_thread.lto_priv.56+0x20c>)
 80016ec:	f002 fad8 	bl	8003ca0 <strcasecmp>
 80016f0:	b970      	cbnz	r0, 8001710 <shell_thread.lto_priv.56+0x130>
        if (n > 0) {
 80016f2:	2d00      	cmp	r5, #0
 80016f4:	d0c5      	beq.n	8001682 <shell_thread.lto_priv.56+0xa2>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80016f6:	4620      	mov	r0, r4
 80016f8:	493d      	ldr	r1, [pc, #244]	; (80017f0 <shell_thread.lto_priv.56+0x210>)
 80016fa:	4a3c      	ldr	r2, [pc, #240]	; (80017ec <shell_thread.lto_priv.56+0x20c>)
 80016fc:	f001 fcf8 	bl	80030f0 <chprintf.lto_priv.86>
 8001700:	e77f      	b.n	8001602 <shell_thread.lto_priv.56+0x22>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 8001702:	4620      	mov	r0, r4
 8001704:	493b      	ldr	r1, [pc, #236]	; (80017f4 <shell_thread.lto_priv.56+0x214>)
 8001706:	f001 fcf3 	bl	80030f0 <chprintf.lto_priv.86>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 800170a:	2300      	movs	r3, #0
 800170c:	9307      	str	r3, [sp, #28]
 800170e:	e778      	b.n	8001602 <shell_thread.lto_priv.56+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
 8001710:	4650      	mov	r0, sl
 8001712:	4939      	ldr	r1, [pc, #228]	; (80017f8 <shell_thread.lto_priv.56+0x218>)
 8001714:	f002 fac4 	bl	8003ca0 <strcasecmp>
 8001718:	b930      	cbnz	r0, 8001728 <shell_thread.lto_priv.56+0x148>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 800171a:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
 800171c:	b1c5      	cbz	r5, 8001750 <shell_thread.lto_priv.56+0x170>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 800171e:	4934      	ldr	r1, [pc, #208]	; (80017f0 <shell_thread.lto_priv.56+0x210>)
 8001720:	4a35      	ldr	r2, [pc, #212]	; (80017f8 <shell_thread.lto_priv.56+0x218>)
 8001722:	f001 fce5 	bl	80030f0 <chprintf.lto_priv.86>
 8001726:	e76c      	b.n	8001602 <shell_thread.lto_priv.56+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8001728:	4b34      	ldr	r3, [pc, #208]	; (80017fc <shell_thread.lto_priv.56+0x21c>)
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	4699      	mov	r9, r3
 800172e:	b918      	cbnz	r0, 8001738 <shell_thread.lto_priv.56+0x158>
 8001730:	e031      	b.n	8001796 <shell_thread.lto_priv.56+0x1b6>
 8001732:	f859 0f08 	ldr.w	r0, [r9, #8]!
 8001736:	b370      	cbz	r0, 8001796 <shell_thread.lto_priv.56+0x1b6>
    if (strcasecmp(scp->sc_name, name) == 0) {
 8001738:	4651      	mov	r1, sl
 800173a:	f002 fab1 	bl	8003ca0 <strcasecmp>
 800173e:	2800      	cmp	r0, #0
 8001740:	d1f7      	bne.n	8001732 <shell_thread.lto_priv.56+0x152>
      scp->sc_function(chp, argc, argv);
 8001742:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001746:	4629      	mov	r1, r5
 8001748:	aa03      	add	r2, sp, #12
 800174a:	4620      	mov	r0, r4
 800174c:	4798      	blx	r3
 800174e:	e758      	b.n	8001602 <shell_thread.lto_priv.56+0x22>
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 8001750:	492b      	ldr	r1, [pc, #172]	; (8001800 <shell_thread.lto_priv.56+0x220>)
 8001752:	f001 fccd 	bl	80030f0 <chprintf.lto_priv.86>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001756:	4b29      	ldr	r3, [pc, #164]	; (80017fc <shell_thread.lto_priv.56+0x21c>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	461d      	mov	r5, r3
 800175c:	b13a      	cbz	r2, 800176e <shell_thread.lto_priv.56+0x18e>
    chprintf(chp, "%s ", scp->sc_name);
 800175e:	4620      	mov	r0, r4
 8001760:	4928      	ldr	r1, [pc, #160]	; (8001804 <shell_thread.lto_priv.56+0x224>)
 8001762:	f001 fcc5 	bl	80030f0 <chprintf.lto_priv.86>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001766:	f855 2f08 	ldr.w	r2, [r5, #8]!
 800176a:	2a00      	cmp	r2, #0
 800176c:	d1f7      	bne.n	800175e <shell_thread.lto_priv.56+0x17e>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 800176e:	f1b8 0f00 	cmp.w	r8, #0
 8001772:	d00b      	beq.n	800178c <shell_thread.lto_priv.56+0x1ac>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001774:	f8d8 2000 	ldr.w	r2, [r8]
 8001778:	b142      	cbz	r2, 800178c <shell_thread.lto_priv.56+0x1ac>
 800177a:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 800177c:	4620      	mov	r0, r4
 800177e:	4921      	ldr	r1, [pc, #132]	; (8001804 <shell_thread.lto_priv.56+0x224>)
 8001780:	f001 fcb6 	bl	80030f0 <chprintf.lto_priv.86>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001784:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8001788:	2a00      	cmp	r2, #0
 800178a:	d1f7      	bne.n	800177c <shell_thread.lto_priv.56+0x19c>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 800178c:	4620      	mov	r0, r4
 800178e:	4916      	ldr	r1, [pc, #88]	; (80017e8 <shell_thread.lto_priv.56+0x208>)
 8001790:	f001 fcae 	bl	80030f0 <chprintf.lto_priv.86>
 8001794:	e735      	b.n	8001602 <shell_thread.lto_priv.56+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8001796:	f1b8 0f00 	cmp.w	r8, #0
 800179a:	d00d      	beq.n	80017b8 <shell_thread.lto_priv.56+0x1d8>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 800179c:	f8d8 0000 	ldr.w	r0, [r8]
 80017a0:	b150      	cbz	r0, 80017b8 <shell_thread.lto_priv.56+0x1d8>
 80017a2:	46c1      	mov	r9, r8
 80017a4:	e002      	b.n	80017ac <shell_thread.lto_priv.56+0x1cc>
 80017a6:	f859 0f08 	ldr.w	r0, [r9, #8]!
 80017aa:	b128      	cbz	r0, 80017b8 <shell_thread.lto_priv.56+0x1d8>
    if (strcasecmp(scp->sc_name, name) == 0) {
 80017ac:	4651      	mov	r1, sl
 80017ae:	f002 fa77 	bl	8003ca0 <strcasecmp>
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d1f7      	bne.n	80017a6 <shell_thread.lto_priv.56+0x1c6>
 80017b6:	e7c4      	b.n	8001742 <shell_thread.lto_priv.56+0x162>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 80017b8:	4652      	mov	r2, sl
 80017ba:	4620      	mov	r0, r4
 80017bc:	4912      	ldr	r1, [pc, #72]	; (8001808 <shell_thread.lto_priv.56+0x228>)
 80017be:	f001 fc97 	bl	80030f0 <chprintf.lto_priv.86>
        chprintf(chp, " ?\r\n");
 80017c2:	4620      	mov	r0, r4
 80017c4:	4911      	ldr	r1, [pc, #68]	; (800180c <shell_thread.lto_priv.56+0x22c>)
 80017c6:	f001 fc93 	bl	80030f0 <chprintf.lto_priv.86>
 80017ca:	e71a      	b.n	8001602 <shell_thread.lto_priv.56+0x22>
 80017cc:	20001030 	.word	0x20001030
 80017d0:	08003f2c 	.word	0x08003f2c
 80017d4:	08003f34 	.word	0x08003f34
 80017d8:	08003f58 	.word	0x08003f58
 80017dc:	08003f60 	.word	0x08003f60
 80017e0:	08003fb4 	.word	0x08003fb4
 80017e4:	20000c4c 	.word	0x20000c4c
 80017e8:	08004408 	.word	0x08004408
 80017ec:	08003f7c 	.word	0x08003f7c
 80017f0:	08003f10 	.word	0x08003f10
 80017f4:	08003f64 	.word	0x08003f64
 80017f8:	08003f84 	.word	0x08003f84
 80017fc:	2000080c 	.word	0x2000080c
 8001800:	08003f8c 	.word	0x08003f8c
 8001804:	08003fa4 	.word	0x08003fa4
 8001808:	08003fa8 	.word	0x08003fa8
 800180c:	08003fac 	.word	0x08003fac

08001810 <lcd_2x16_write_command>:
}

//-----------------------------------------------------------------------------
void lcd_2x16_write_command(uint8_t data)
{
 8001810:	b510      	push	{r4, lr}
 8001812:	4604      	mov	r4, r0
	palClearPad(LCD_PORT, LCD_PIN_RS);
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <lcd_2x16_write_command+0x20>)
 8001816:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800181a:	615a      	str	r2, [r3, #20]

	lcd_2x16_write(data);
 800181c:	f7ff fea8 	bl	8001570 <lcd_2x16_write>
	lcd_2x16_write(data << 4);
 8001820:	0120      	lsls	r0, r4, #4
 8001822:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 8001826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void lcd_2x16_write_command(uint8_t data)
{
	palClearPad(LCD_PORT, LCD_PIN_RS);

	lcd_2x16_write(data);
	lcd_2x16_write(data << 4);
 800182a:	f7ff bea1 	b.w	8001570 <lcd_2x16_write>
 800182e:	bf00      	nop
 8001830:	40010c00 	.word	0x40010c00
	...

08001840 <rf_read_reg>:

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
}

void rf_read_reg(int reg, char *data, int len) {
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8001842:	4c16      	ldr	r4, [pc, #88]	; (800189c <rf_read_reg+0x5c>)
 8001844:	b083      	sub	sp, #12
	char cmd = NRF_CMD_READ_REGISTER | reg;
 8001846:	ad02      	add	r5, sp, #8
 8001848:	f805 0d01 	strb.w	r0, [r5, #-1]!
 800184c:	4620      	mov	r0, r4

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
}

void rf_read_reg(int reg, char *data, int len) {
 800184e:	460e      	mov	r6, r1
 8001850:	4617      	mov	r7, r2
 8001852:	f7ff fcdd 	bl	8001210 <chMtxLock>
	char cmd = NRF_CMD_READ_REGISTER | reg;
    spiAcquireBus(&SPID1);              /* Acquire ownership of the bus.    */
    spiSelect(&SPID1);                  /* Slave Select assertion.          */
 8001856:	f002 f8c3 	bl	80039e0 <spiSelect.constprop.29>
    spiSend(&SPID1,1,&cmd);
 800185a:	4629      	mov	r1, r5
 800185c:	2001      	movs	r0, #1
 800185e:	f002 f8df 	bl	8003a20 <spiSend.constprop.25>
 8001862:	2320      	movs	r3, #32
 8001864:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartReceiveI(spip, n, rxbuf);
 8001868:	2503      	movs	r5, #3
 800186a:	4638      	mov	r0, r7
 800186c:	4631      	mov	r1, r6
 800186e:	f804 5c0c 	strb.w	r5, [r4, #-12]
 8001872:	f002 f90d 	bl	8003a90 <spi_lld_receive.constprop.24>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <rf_read_reg+0x60>)
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 8001878:	1f22      	subs	r2, r4, #4
 800187a:	699b      	ldr	r3, [r3, #24]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800187c:	4628      	mov	r0, r5
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 800187e:	621a      	str	r2, [r3, #32]
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8001880:	f844 3c04 	str.w	r3, [r4, #-4]
  tp->p_u.wttrp = trp;
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8001884:	f7ff f9c4 	bl	8000c10 <chSchGoSleepS>
 8001888:	2300      	movs	r3, #0
 800188a:	f383 8811 	msr	BASEPRI, r3
    spiReceive(&SPID1,len,data);
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
 800188e:	f002 f8b7 	bl	8003a00 <spiUnselect.constprop.27>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8001892:	4620      	mov	r0, r4
 8001894:	f7ff fc84 	bl	80011a0 <chMtxUnlock>
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}
 8001898:	b003      	add	sp, #12
 800189a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800189c:	200011c4 	.word	0x200011c4
 80018a0:	20001030 	.word	0x20001030
	...

080018b0 <rf_write_reg>:

int rf_rx_power_detect(void) {
	return rf_read_reg_byte(NRF_REG_RPD) >> 1;
}

void rf_write_reg(int reg, const char *data, int len) {
 80018b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b2:	4617      	mov	r7, r2
 80018b4:	460e      	mov	r6, r1
 80018b6:	b083      	sub	sp, #12
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 80018b8:	4d0c      	ldr	r5, [pc, #48]	; (80018ec <rf_write_reg+0x3c>)
	char cmd = NRF_CMD_WRITE_REGISTER | reg;
 80018ba:	ac02      	add	r4, sp, #8
 80018bc:	f040 0020 	orr.w	r0, r0, #32
 80018c0:	f804 0d01 	strb.w	r0, [r4, #-1]!
 80018c4:	4628      	mov	r0, r5
 80018c6:	f7ff fca3 	bl	8001210 <chMtxLock>
    spiAcquireBus(&SPID1);              /* Acquire ownership of the bus.    */
    spiSelect(&SPID1);                  /* Slave Select assertion.          */
 80018ca:	f002 f889 	bl	80039e0 <spiSelect.constprop.29>
    spiSend(&SPID1,1,&cmd);
 80018ce:	4621      	mov	r1, r4
 80018d0:	2001      	movs	r0, #1
 80018d2:	f002 f8a5 	bl	8003a20 <spiSend.constprop.25>
    spiSend(&SPID1,len,data);
 80018d6:	4638      	mov	r0, r7
 80018d8:	4631      	mov	r1, r6
 80018da:	f002 f8a1 	bl	8003a20 <spiSend.constprop.25>
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
 80018de:	f002 f88f 	bl	8003a00 <spiUnselect.constprop.27>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 80018e2:	4628      	mov	r0, r5
 80018e4:	f7ff fc5c 	bl	80011a0 <chMtxUnlock>
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}
 80018e8:	b003      	add	sp, #12
 80018ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ec:	200011c4 	.word	0x200011c4

080018f0 <nrf_driver_init>:
static int rf_tx_wrapper(char *data, int len);

extern uint32_t init_errors;
extern SerialUSBDriver SDU1;

char nrf_driver_init(void) {
 80018f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80018f4:	4b6b      	ldr	r3, [pc, #428]	; (8001aa4 <nrf_driver_init+0x1b4>)
		palClearPad(NRF_PORT_SCK, NRF_PIN_SCK);
#else
//		  AFIO->MAPR |= AFIO_MAPR_SPI1_REMAP;
		  chThdSleepMilliseconds(100);

		  palSetPadMode(NRF_PORT_MISO, NRF_PIN_MISO, PAL_MODE_STM32_ALTERNATE_PUSHPULL);     /* SCK. */
 80018f6:	4c6c      	ldr	r4, [pc, #432]	; (8001aa8 <nrf_driver_init+0x1b8>)
 80018f8:	b083      	sub	sp, #12
 80018fa:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80018fc:	605b      	str	r3, [r3, #4]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80018fe:	2200      	movs	r2, #0
        palSetPad(NRF_PORT_CSN, NRF_PIN_CSN);
        palSetPad(NRF_PORT_CSN, 8);
		palClearPad(NRF_PORT_SCK, NRF_PIN_SCK);
#else
//		  AFIO->MAPR |= AFIO_MAPR_SPI1_REMAP;
		  chThdSleepMilliseconds(100);
 8001900:	20c8      	movs	r0, #200	; 0xc8
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	f7ff fb6c 	bl	8000fe0 <chThdSleep>

		  palSetPadMode(NRF_PORT_MISO, NRF_PIN_MISO, PAL_MODE_STM32_ALTERNATE_PUSHPULL);     /* SCK. */
 8001908:	4620      	mov	r0, r4
 800190a:	2140      	movs	r1, #64	; 0x40
 800190c:	2210      	movs	r2, #16
 800190e:	f001 ff67 	bl	80037e0 <_pal_lld_setgroupmode>
		  palSetPadMode(NRF_PORT_MOSI,  NRF_PIN_MOSI,  PAL_MODE_STM32_ALTERNATE_PUSHPULL);     /* MISO.*/
 8001912:	4620      	mov	r0, r4
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	2210      	movs	r2, #16
 8001918:	f001 ff62 	bl	80037e0 <_pal_lld_setgroupmode>
		  palSetPadMode(NRF_PORT_SCK,  NRF_PIN_SCK,  PAL_MODE_STM32_ALTERNATE_PUSHPULL);     /* MOSI.*/
          palSetPadMode(NRF_PORT_CSN, NRF_PIN_CSN, PAL_MODE_OUTPUT_PUSHPULL);

          palSetPadMode(NRF_PORT_CE, NRF_PIN_CE, PAL_MODE_OUTPUT_PUSHPULL);
 800191c:	4d63      	ldr	r5, [pc, #396]	; (8001aac <nrf_driver_init+0x1bc>)
//		  AFIO->MAPR |= AFIO_MAPR_SPI1_REMAP;
		  chThdSleepMilliseconds(100);

		  palSetPadMode(NRF_PORT_MISO, NRF_PIN_MISO, PAL_MODE_STM32_ALTERNATE_PUSHPULL);     /* SCK. */
		  palSetPadMode(NRF_PORT_MOSI,  NRF_PIN_MOSI,  PAL_MODE_STM32_ALTERNATE_PUSHPULL);     /* MISO.*/
		  palSetPadMode(NRF_PORT_SCK,  NRF_PIN_SCK,  PAL_MODE_STM32_ALTERNATE_PUSHPULL);     /* MOSI.*/
 800191e:	4620      	mov	r0, r4
 8001920:	2120      	movs	r1, #32
 8001922:	2210      	movs	r2, #16
 8001924:	f001 ff5c 	bl	80037e0 <_pal_lld_setgroupmode>
          palSetPadMode(NRF_PORT_CSN, NRF_PIN_CSN, PAL_MODE_OUTPUT_PUSHPULL);
 8001928:	4620      	mov	r0, r4
 800192a:	2110      	movs	r1, #16
 800192c:	2206      	movs	r2, #6
 800192e:	f001 ff57 	bl	80037e0 <_pal_lld_setgroupmode>

          palSetPadMode(NRF_PORT_CE, NRF_PIN_CE, PAL_MODE_OUTPUT_PUSHPULL);
 8001932:	4628      	mov	r0, r5
 8001934:	2101      	movs	r1, #1
 8001936:	2206      	movs	r2, #6
 8001938:	f001 ff52 	bl	80037e0 <_pal_lld_setgroupmode>
          palSetPadMode(NRF_PORT_IRQ, NRF_PIN_IRQ, PAL_MODE_INPUT);
 800193c:	2102      	movs	r1, #2
 800193e:	460a      	mov	r2, r1
 8001940:	4628      	mov	r0, r5
 8001942:	f001 ff4d 	bl	80037e0 <_pal_lld_setgroupmode>

          palSetPad(NRF_PORT_CSN, NRF_PIN_CSN);
 8001946:	2310      	movs	r3, #16
          palSetPad(NRF_PORT_CE, NRF_PIN_CE);
 8001948:	2201      	movs	r2, #1
          palSetPadMode(NRF_PORT_CSN, NRF_PIN_CSN, PAL_MODE_OUTPUT_PUSHPULL);

          palSetPadMode(NRF_PORT_CE, NRF_PIN_CE, PAL_MODE_OUTPUT_PUSHPULL);
          palSetPadMode(NRF_PORT_IRQ, NRF_PIN_IRQ, PAL_MODE_INPUT);

          palSetPad(NRF_PORT_CSN, NRF_PIN_CSN);
 800194a:	6123      	str	r3, [r4, #16]
 800194c:	2320      	movs	r3, #32
          palSetPad(NRF_PORT_CE, NRF_PIN_CE);
 800194e:	612a      	str	r2, [r5, #16]
 8001950:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 8001954:	4c56      	ldr	r4, [pc, #344]	; (8001ab0 <nrf_driver_init+0x1c0>)
 8001956:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <nrf_driver_init+0x1c4>)
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8001958:	7822      	ldrb	r2, [r4, #0]
 800195a:	6063      	str	r3, [r4, #4]
 800195c:	2a01      	cmp	r2, #1
 800195e:	d06e      	beq.n	8001a3e <nrf_driver_init+0x14e>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8001960:	895a      	ldrh	r2, [r3, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001962:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001964:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8001966:	0510      	lsls	r0, r2, #20
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001968:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800196c:	bf48      	it	mi
 800196e:	f443 63a0 	orrmi.w	r3, r3, #1280	; 0x500

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001972:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001976:	62e3      	str	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8001978:	bf48      	it	mi
 800197a:	f441 61a0 	orrmi.w	r1, r1, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 800197e:	69e3      	ldr	r3, [r4, #28]
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001980:	62a1      	str	r1, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8001982:	f442 7241 	orr.w	r2, r2, #772	; 0x304
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8001986:	2500      	movs	r5, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8001988:	2107      	movs	r1, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 800198a:	801d      	strh	r5, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800198c:	801a      	strh	r2, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 800198e:	8099      	strh	r1, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8001990:	881a      	ldrh	r2, [r3, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 8001992:	2602      	movs	r6, #2
 8001994:	b292      	uxth	r2, r2
 8001996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800199a:	801a      	strh	r2, [r3, #0]
 800199c:	7026      	strb	r6, [r4, #0]
 800199e:	f385 8811 	msr	BASEPRI, r5
	address_length = 3; // We assume length 3

#ifdef RX_MODE
	char addr_test[3] = {0x25, 0x26, 0x27};
#else
	char addr_test[3] = {0x15, 0x16, 0x17};
 80019a2:	4b45      	ldr	r3, [pc, #276]	; (8001ab8 <nrf_driver_init+0x1c8>)
 */
char rfhelp_init(void) {
  int i;
	chMtxObjectInit(&rf_mutex);
	rf_init();
	address_length = 3; // We assume length 3
 80019a4:	2403      	movs	r4, #3

#ifdef RX_MODE
	char addr_test[3] = {0x25, 0x26, 0x27};
#else
	char addr_test[3] = {0x15, 0x16, 0x17};
 80019a6:	f8b3 c000 	ldrh.w	ip, [r3]
 80019aa:	f893 e002 	ldrb.w	lr, [r3, #2]
          spiStart(&SPID1, &ls_spicfg);

#endif
		m_init_done = true;
 80019ae:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8001af4 <nrf_driver_init+0x204>
 */
char rfhelp_init(void) {
  int i;
	chMtxObjectInit(&rf_mutex);
	rf_init();
	address_length = 3; // We assume length 3
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <nrf_driver_init+0x1cc>)
#ifdef RX_MODE
	char addr_test[3] = {0x25, 0x26, 0x27};
#else
	char addr_test[3] = {0x15, 0x16, 0x17};
#endif
	rf_write_reg(NRF_REG_TX_ADDR, addr_test, 3);
 80019b4:	4669      	mov	r1, sp
 80019b6:	4622      	mov	r2, r4
 80019b8:	2010      	movs	r0, #16
 80019ba:	2701      	movs	r7, #1
	address_length = 3; // We assume length 3

#ifdef RX_MODE
	char addr_test[3] = {0x25, 0x26, 0x27};
#else
	char addr_test[3] = {0x15, 0x16, 0x17};
 80019bc:	f8ad c000 	strh.w	ip, [sp]
 80019c0:	f88d e002 	strb.w	lr, [sp, #2]
 */
char rfhelp_init(void) {
  int i;
	chMtxObjectInit(&rf_mutex);
	rf_init();
	address_length = 3; // We assume length 3
 80019c4:	601c      	str	r4, [r3, #0]
 80019c6:	f888 7000 	strb.w	r7, [r8]
#ifdef RX_MODE
	char addr_test[3] = {0x25, 0x26, 0x27};
#else
	char addr_test[3] = {0x15, 0x16, 0x17};
#endif
	rf_write_reg(NRF_REG_TX_ADDR, addr_test, 3);
 80019ca:	f7ff ff71 	bl	80018b0 <rf_write_reg>
	char addr_test_read[3];
	rf_read_reg(NRF_REG_TX_ADDR, addr_test_read, 3);
 80019ce:	a901      	add	r1, sp, #4
 80019d0:	4622      	mov	r2, r4
 80019d2:	2010      	movs	r0, #16
 80019d4:	f7ff ff34 	bl	8001840 <rf_read_reg>

	if (memcmp(addr_test, addr_test_read, 3) != 0) {
 80019d8:	4668      	mov	r0, sp
 80019da:	a901      	add	r1, sp, #4
 80019dc:	4622      	mov	r2, r4
 80019de:	f002 f8d7 	bl	8003b90 <memcmp>
 80019e2:	2800      	cmp	r0, #0
 80019e4:	d142      	bne.n	8001a6c <nrf_driver_init+0x17c>
		rf_stop();
		init_errors |= ERROR_SPI_TXRX;
		return false;
	}
    init_errors  = 0x132456;
 80019e6:	4a36      	ldr	r2, [pc, #216]	; (8001ac0 <nrf_driver_init+0x1d0>)
 80019e8:	4936      	ldr	r1, [pc, #216]	; (8001ac4 <nrf_driver_init+0x1d4>)

//	rf_read_reg(NRF_REG_TX_ADDR, tx_addr, address_length);
//	tx_pipe0_addr_eq = memcmp(rx_addr[0], tx_addr, address_length) == 0;
	init_done = true;
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <nrf_driver_init+0x1d8>)
	if (memcmp(addr_test, addr_test_read, 3) != 0) {
		rf_stop();
		init_errors |= ERROR_SPI_TXRX;
		return false;
	}
    init_errors  = 0x132456;
 80019ec:	6011      	str	r1, [r2, #0]

//	rf_read_reg(NRF_REG_TX_ADDR, tx_addr, address_length);
//	tx_pipe0_addr_eq = memcmp(rx_addr[0], tx_addr, address_length) == 0;
	init_done = true;
 80019ee:	701f      	strb	r7, [r3, #0]
    rfhelp_init();

	nosend_cnt = 0;
	nrf_restart_rx_time = 0;
 80019f0:	f8df c104 	ldr.w	ip, [pc, #260]	; 8001af8 <nrf_driver_init+0x208>
	nrf_restart_tx_time = 0;
 80019f4:	f8df e104 	ldr.w	lr, [pc, #260]	; 8001afc <nrf_driver_init+0x20c>

	pairing_time_end = 0;
	pairing_active = false;

	rx_stop = false;
 80019f8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8001b00 <nrf_driver_init+0x210>
extern SerialUSBDriver SDU1;

char nrf_driver_init(void) {
    rfhelp_init();

	nosend_cnt = 0;
 80019fc:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8001b04 <nrf_driver_init+0x214>
	nrf_restart_rx_time = 0;
	nrf_restart_tx_time = 0;

	pairing_time_end = 0;
 8001a00:	4f32      	ldr	r7, [pc, #200]	; (8001acc <nrf_driver_init+0x1dc>)
	pairing_active = false;
 8001a02:	4e33      	ldr	r6, [pc, #204]	; (8001ad0 <nrf_driver_init+0x1e0>)

	rx_stop = false;
	tx_stop = false;
 8001a04:	4d33      	ldr	r5, [pc, #204]	; (8001ad4 <nrf_driver_init+0x1e4>)
extern SerialUSBDriver SDU1;

char nrf_driver_init(void) {
    rfhelp_init();

	nosend_cnt = 0;
 8001a06:	2400      	movs	r4, #0
#ifdef RX_MODE

	chThdCreateStatic(rx_thread_wa, sizeof(rx_thread_wa), NORMALPRIO - 1, rx_thread, NULL);
#else

	chThdCreateStatic(tx_thread_wa, sizeof(tx_thread_wa), NORMALPRIO - 1, tx_thread, NULL);
 8001a08:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8001a0c:	223f      	movs	r2, #63	; 0x3f
 8001a0e:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <nrf_driver_init+0x1e8>)
 8001a10:	4832      	ldr	r0, [pc, #200]	; (8001adc <nrf_driver_init+0x1ec>)
	nrf_restart_tx_time = 0;

	pairing_time_end = 0;
	pairing_active = false;

	rx_stop = false;
 8001a12:	f889 4000 	strb.w	r4, [r9]
extern SerialUSBDriver SDU1;

char nrf_driver_init(void) {
    rfhelp_init();

	nosend_cnt = 0;
 8001a16:	f8c8 4000 	str.w	r4, [r8]
	nrf_restart_rx_time = 0;
 8001a1a:	f8cc 4000 	str.w	r4, [ip]
	nrf_restart_tx_time = 0;
 8001a1e:	f8ce 4000 	str.w	r4, [lr]

	pairing_time_end = 0;
 8001a22:	803c      	strh	r4, [r7, #0]
	pairing_active = false;
 8001a24:	7034      	strb	r4, [r6, #0]

	rx_stop = false;
	tx_stop = false;
 8001a26:	702c      	strb	r4, [r5, #0]
#ifdef RX_MODE

	chThdCreateStatic(rx_thread_wa, sizeof(rx_thread_wa), NORMALPRIO - 1, rx_thread, NULL);
#else

	chThdCreateStatic(tx_thread_wa, sizeof(tx_thread_wa), NORMALPRIO - 1, tx_thread, NULL);
 8001a28:	f001 ff42 	bl	80038b0 <chThdCreateStatic.constprop.54>
#endif

	rx_running = true;
 8001a2c:	2301      	movs	r3, #1
	tx_running = true;

	return true;
}
 8001a2e:	4618      	mov	r0, r3
#else

	chThdCreateStatic(tx_thread_wa, sizeof(tx_thread_wa), NORMALPRIO - 1, tx_thread, NULL);
#endif

	rx_running = true;
 8001a30:	492b      	ldr	r1, [pc, #172]	; (8001ae0 <nrf_driver_init+0x1f0>)
	tx_running = true;
 8001a32:	4a2c      	ldr	r2, [pc, #176]	; (8001ae4 <nrf_driver_init+0x1f4>)
#else

	chThdCreateStatic(tx_thread_wa, sizeof(tx_thread_wa), NORMALPRIO - 1, tx_thread, NULL);
#endif

	rx_running = true;
 8001a34:	700b      	strb	r3, [r1, #0]
	tx_running = true;
 8001a36:	7013      	strb	r3, [r2, #0]

	return true;
}
 8001a38:	b003      	add	sp, #12
 8001a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8001a3e:	492a      	ldr	r1, [pc, #168]	; (8001ae8 <nrf_driver_init+0x1f8>)
 8001a40:	6a20      	ldr	r0, [r4, #32]
 8001a42:	f001 ff7d 	bl	8003940 <dmaStreamAllocate.constprop.33>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 8001a46:	4929      	ldr	r1, [pc, #164]	; (8001aec <nrf_driver_init+0x1fc>)
 8001a48:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a4a:	f001 ff79 	bl	8003940 <dmaStreamAllocate.constprop.33>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8001a4e:	4928      	ldr	r1, [pc, #160]	; (8001af0 <nrf_driver_init+0x200>)
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001a50:	6a25      	ldr	r5, [r4, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8001a52:	6a60      	ldr	r0, [r4, #36]	; 0x24
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8001a54:	698b      	ldr	r3, [r1, #24]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001a56:	69e2      	ldr	r2, [r4, #28]
 8001a58:	682d      	ldr	r5, [r5, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8001a5a:	6800      	ldr	r0, [r0, #0]
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8001a5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001a60:	320c      	adds	r2, #12
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8001a62:	618b      	str	r3, [r1, #24]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001a64:	60aa      	str	r2, [r5, #8]
 8001a66:	6863      	ldr	r3, [r4, #4]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8001a68:	6082      	str	r2, [r0, #8]
 8001a6a:	e779      	b.n	8001960 <nrf_driver_init+0x70>
//	}
}

void spi_sw_stop(void) {
	palSetPadMode(NRF_PORT_MISO, NRF_PIN_MISO, PAL_MODE_INPUT);
 8001a6c:	480e      	ldr	r0, [pc, #56]	; (8001aa8 <nrf_driver_init+0x1b8>)
 8001a6e:	2140      	movs	r1, #64	; 0x40
 8001a70:	4632      	mov	r2, r6
 8001a72:	f001 feb5 	bl	80037e0 <_pal_lld_setgroupmode>
	palSetPadMode(NRF_PORT_CSN, NRF_PIN_CSN, PAL_MODE_INPUT);
 8001a76:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <nrf_driver_init+0x1b8>)
 8001a78:	2110      	movs	r1, #16
 8001a7a:	4632      	mov	r2, r6
 8001a7c:	f001 feb0 	bl	80037e0 <_pal_lld_setgroupmode>
	palSetPadMode(NRF_PORT_SCK, NRF_PIN_SCK, PAL_MODE_INPUT);
 8001a80:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <nrf_driver_init+0x1b8>)
 8001a82:	2120      	movs	r1, #32
 8001a84:	4632      	mov	r2, r6
 8001a86:	f001 feab 	bl	80037e0 <_pal_lld_setgroupmode>
	palSetPadMode(NRF_PORT_MOSI, NRF_PIN_MOSI, PAL_MODE_INPUT);
 8001a8a:	4632      	mov	r2, r6
 8001a8c:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <nrf_driver_init+0x1b8>)
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	f001 fea6 	bl	80037e0 <_pal_lld_setgroupmode>
	char addr_test_read[3];
	rf_read_reg(NRF_REG_TX_ADDR, addr_test_read, 3);

	if (memcmp(addr_test, addr_test_read, 3) != 0) {
		rf_stop();
		init_errors |= ERROR_SPI_TXRX;
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <nrf_driver_init+0x1d0>)
	m_init_done = false;
 8001a96:	f888 5000 	strb.w	r5, [r8]
 8001a9a:	6813      	ldr	r3, [r2, #0]
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e7a5      	b.n	80019f0 <nrf_driver_init+0x100>
 8001aa4:	20000c50 	.word	0x20000c50
 8001aa8:	40010800 	.word	0x40010800
 8001aac:	40010c00 	.word	0x40010c00
 8001ab0:	200011b8 	.word	0x200011b8
 8001ab4:	08003f00 	.word	0x08003f00
 8001ab8:	08003d70 	.word	0x08003d70
 8001abc:	20000db0 	.word	0x20000db0
 8001ac0:	20000bf0 	.word	0x20000bf0
 8001ac4:	00132456 	.word	0x00132456
 8001ac8:	20000c60 	.word	0x20000c60
 8001acc:	20000b08 	.word	0x20000b08
 8001ad0:	20000b50 	.word	0x20000b50
 8001ad4:	20000807 	.word	0x20000807
 8001ad8:	08001bd1 	.word	0x08001bd1
 8001adc:	20000838 	.word	0x20000838
 8001ae0:	20000b3c 	.word	0x20000b3c
 8001ae4:	20000b00 	.word	0x20000b00
 8001ae8:	08003071 	.word	0x08003071
 8001aec:	08002d91 	.word	0x08002d91
 8001af0:	40021000 	.word	0x40021000
 8001af4:	20000b10 	.word	0x20000b10
 8001af8:	20000b24 	.word	0x20000b24
 8001afc:	20000b04 	.word	0x20000b04
 8001b00:	20000808 	.word	0x20000808
 8001b04:	20000b0c 	.word	0x20000b0c
	...

08001b10 <rf_flush_rx>:
    spiSend(&SPID1,1,&cmd);
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_flush_rx(void) {
 8001b10:	b530      	push	{r4, r5, lr}
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8001b12:	4d0b      	ldr	r5, [pc, #44]	; (8001b40 <rf_flush_rx+0x30>)
 8001b14:	b083      	sub	sp, #12
	char cmd = NRF_CMD_FLUSH_RX;
 8001b16:	23e2      	movs	r3, #226	; 0xe2
 8001b18:	ac02      	add	r4, sp, #8
 8001b1a:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8001b1e:	4628      	mov	r0, r5
 8001b20:	f7ff fb76 	bl	8001210 <chMtxLock>

    spiAcquireBus(&SPID1);              /* Acquire ownership of the bus.    */
    spiSelect(&SPID1);                  /* Slave Select assertion.          */
 8001b24:	f001 ff5c 	bl	80039e0 <spiSelect.constprop.29>
    spiSend(&SPID1,1,&cmd);
 8001b28:	4621      	mov	r1, r4
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f001 ff78 	bl	8003a20 <spiSend.constprop.25>
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
 8001b30:	f001 ff66 	bl	8003a00 <spiUnselect.constprop.27>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8001b34:	4628      	mov	r0, r5
 8001b36:	f7ff fb33 	bl	80011a0 <chMtxUnlock>
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}
 8001b3a:	b003      	add	sp, #12
 8001b3c:	bd30      	pop	{r4, r5, pc}
 8001b3e:	bf00      	nop
 8001b40:	200011c4 	.word	0x200011c4
	...

08001b50 <rf_flush_tx>:
		tmp |= (features);
		rf_write_reg_byte(NRF_REG_FEATURE, tmp);	//Update if we need
	}
}

void rf_flush_tx(void) {
 8001b50:	b530      	push	{r4, r5, lr}
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8001b52:	4d0b      	ldr	r5, [pc, #44]	; (8001b80 <rf_flush_tx+0x30>)
 8001b54:	b083      	sub	sp, #12
	char cmd = NRF_CMD_FLUSH_TX;
 8001b56:	23e1      	movs	r3, #225	; 0xe1
 8001b58:	ac02      	add	r4, sp, #8
 8001b5a:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8001b5e:	4628      	mov	r0, r5
 8001b60:	f7ff fb56 	bl	8001210 <chMtxLock>
    spiAcquireBus(&SPID1);              /* Acquire ownership of the bus.    */
    spiSelect(&SPID1);                  /* Slave Select assertion.          */
 8001b64:	f001 ff3c 	bl	80039e0 <spiSelect.constprop.29>
    spiSend(&SPID1,1,&cmd);
 8001b68:	4621      	mov	r1, r4
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f001 ff58 	bl	8003a20 <spiSend.constprop.25>
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
 8001b70:	f001 ff46 	bl	8003a00 <spiUnselect.constprop.27>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8001b74:	4628      	mov	r0, r5
 8001b76:	f7ff fb13 	bl	80011a0 <chMtxUnlock>
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}
 8001b7a:	b003      	add	sp, #12
 8001b7c:	bd30      	pop	{r4, r5, pc}
 8001b7e:	bf00      	nop
 8001b80:	200011c4 	.word	0x200011c4
	...

08001b90 <rf_mode_rx>:
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
	}
}

// Set up radio for reception
void rf_mode_rx(void) {
 8001b90:	b500      	push	{lr}
 8001b92:	b083      	sub	sp, #12
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8001b94:	2000      	movs	r0, #0
 8001b96:	f10d 0107 	add.w	r1, sp, #7
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f7ff fe50 	bl	8001840 <rf_read_reg>
	return result;
 8001ba0:	f89d 3007 	ldrb.w	r3, [sp, #7]
}

// Set up radio for reception
void rf_mode_rx(void) {
	int tmp = rf_read_reg_byte(NRF_REG_CONFIG);
	if ((tmp & (NRF_CONFIG_PRIM_RX)) != (NRF_CONFIG_PRIM_RX)) {
 8001ba4:	f013 0001 	ands.w	r0, r3, #1
 8001ba8:	d108      	bne.n	8001bbc <rf_mode_rx+0x2c>
		tmp |= (NRF_CONFIG_PRIM_RX);
 8001baa:	f043 0301 	orr.w	r3, r3, #1
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8001bae:	f10d 0107 	add.w	r1, sp, #7
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f88d 3007 	strb.w	r3, [sp, #7]
 8001bb8:	f7ff fe7a 	bl	80018b0 <rf_write_reg>
	int tmp = rf_read_reg_byte(NRF_REG_CONFIG);
	if ((tmp & (NRF_CONFIG_PRIM_RX)) != (NRF_CONFIG_PRIM_RX)) {
		tmp |= (NRF_CONFIG_PRIM_RX);
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
	}
}
 8001bbc:	b003      	add	sp, #12
 8001bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bc2:	bf00      	nop
	...

08001bd0 <tx_thread>:
	}

	return res;
}

static THD_FUNCTION(tx_thread, arg) {
 8001bd0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001bd4:	b089      	sub	sp, #36	; 0x24
 8001bd6:	4b69      	ldr	r3, [pc, #420]	; (8001d7c <tx_thread+0x1ac>)
 8001bd8:	4869      	ldr	r0, [pc, #420]	; (8001d80 <tx_thread+0x1b0>)
 8001bda:	6999      	ldr	r1, [r3, #24]
 8001bdc:	4d69      	ldr	r5, [pc, #420]	; (8001d84 <tx_thread+0x1b4>)
	(void)arg;
	char cnt;
	chRegSetThreadName("Nrf TX");
	tx_running = true;
 8001bde:	4b6a      	ldr	r3, [pc, #424]	; (8001d88 <tx_thread+0x1b8>)
	}

	return res;
}

static THD_FUNCTION(tx_thread, arg) {
 8001be0:	af00      	add	r7, sp, #0
	(void)arg;
	char cnt;
	chRegSetThreadName("Nrf TX");
	tx_running = true;
 8001be2:	2201      	movs	r2, #1
 8001be4:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 8001da0 <tx_thread+0x1d0>
 8001be8:	6188      	str	r0, [r1, #24]
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	f105 0808 	add.w	r8, r5, #8
 8001bf0:	f107 0912 	add.w	r9, r7, #18

	for(;;) {
		nosend_cnt++;
		cnt++;
 8001bf4:	687b      	ldr	r3, [r7, #4]
//		cnt+='0';
//		if (nosend_cnt >= ALIVE_INTERVAL) {
			uint8_t pl[5];
			int32_t index = 0;
            pl[index++] = 'A';
            pl[index++] = 'B';
 8001bf6:	2242      	movs	r2, #66	; 0x42
	chRegSetThreadName("Nrf TX");
	tx_running = true;

	for(;;) {
		nosend_cnt++;
		cnt++;
 8001bf8:	f103 0b01 	add.w	fp, r3, #1
 8001bfc:	fa5f f38b 	uxtb.w	r3, fp
		if(cnt>'9')
		  cnt = '0';
 8001c00:	2b3a      	cmp	r3, #58	; 0x3a
 8001c02:	bf08      	it	eq
 8001c04:	2330      	moveq	r3, #48	; 0x30
 8001c06:	4618      	mov	r0, r3
//		if (nosend_cnt >= ALIVE_INTERVAL) {
			uint8_t pl[5];
			int32_t index = 0;
            pl[index++] = 'A';
            pl[index++] = 'B';
            pl[index++] = cnt;
 8001c08:	74b8      	strb	r0, [r7, #18]
		  cnt = '0';
//		cnt+='0';
//		if (nosend_cnt >= ALIVE_INTERVAL) {
			uint8_t pl[5];
			int32_t index = 0;
            pl[index++] = 'A';
 8001c0a:	f04f 0041 	mov.w	r0, #65	; 0x41

	for(;;) {
		nosend_cnt++;
		cnt++;
		if(cnt>'9')
		  cnt = '0';
 8001c0e:	607b      	str	r3, [r7, #4]
	char cnt;
	chRegSetThreadName("Nrf TX");
	tx_running = true;

	for(;;) {
		nosend_cnt++;
 8001c10:	4b5e      	ldr	r3, [pc, #376]	; (8001d8c <tx_thread+0x1bc>)
		  cnt = '0';
//		cnt+='0';
//		if (nosend_cnt >= ALIVE_INTERVAL) {
			uint8_t pl[5];
			int32_t index = 0;
            pl[index++] = 'A';
 8001c12:	7438      	strb	r0, [r7, #16]
	char cnt;
	chRegSetThreadName("Nrf TX");
	tx_running = true;

	for(;;) {
		nosend_cnt++;
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	485d      	ldr	r0, [pc, #372]	; (8001d8c <tx_thread+0x1bc>)
 8001c18:	3301      	adds	r3, #1
 8001c1a:	6003      	str	r3, [r0, #0]
//		cnt+='0';
//		if (nosend_cnt >= ALIVE_INTERVAL) {
			uint8_t pl[5];
			int32_t index = 0;
            pl[index++] = 'A';
            pl[index++] = 'B';
 8001c1c:	747a      	strb	r2, [r7, #17]
 8001c1e:	f8c7 d000 	str.w	sp, [r7]
 8001c22:	f107 0110 	add.w	r1, r7, #16
 8001c26:	2241      	movs	r2, #65	; 0x41
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e001      	b.n	8001c30 <tx_thread+0x60>
 8001c2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
	for (i = 0; i < len; i++) {
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 8001c30:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8001c34:	f83a 2012 	ldrh.w	r2, [sl, r2, lsl #1]
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
	for (i = 0; i < len; i++) {
 8001c38:	4549      	cmp	r1, r9
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 8001c3a:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
 8001c3e:	b29b      	uxth	r3, r3
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
	for (i = 0; i < len; i++) {
 8001c40:	d1f4      	bne.n	8001c2c <tx_thread+0x5c>
 */
int rfhelp_send_data_crc(char *data, int len) {
	char buffer[len + 2];
	unsigned short crc = crc16((unsigned char*)data, len);

	memcpy(buffer, data, len);
 8001c42:	693a      	ldr	r2, [r7, #16]
	buffer[len] = (char)(crc >> 8);
 8001c44:	0a1c      	lsrs	r4, r3, #8
	buffer[len + 1] = (char)(crc & 0xFF);
 8001c46:	773b      	strb	r3, [r7, #28]

	return rfhelp_send_data(buffer, len + 2, nrf_conf.send_crc_ack);
 8001c48:	4b51      	ldr	r3, [pc, #324]	; (8001d90 <tx_thread+0x1c0>)
 */
int rfhelp_send_data_crc(char *data, int len) {
	char buffer[len + 2];
	unsigned short crc = crc16((unsigned char*)data, len);

	memcpy(buffer, data, len);
 8001c4a:	0c11      	lsrs	r1, r2, #16
 */
int rfhelp_send_data(char *data, int len, char ack) {
	int timeout = 60;
	int retval = -1;

	chMtxLock(&rf_mutex);
 8001c4c:	4851      	ldr	r0, [pc, #324]	; (8001d94 <tx_thread+0x1c4>)
int rfhelp_send_data_crc(char *data, int len) {
	char buffer[len + 2];
	unsigned short crc = crc16((unsigned char*)data, len);

	memcpy(buffer, data, len);
	buffer[len] = (char)(crc >> 8);
 8001c4e:	76fc      	strb	r4, [r7, #27]
 */
int rfhelp_send_data_crc(char *data, int len) {
	char buffer[len + 2];
	unsigned short crc = crc16((unsigned char*)data, len);

	memcpy(buffer, data, len);
 8001c50:	833a      	strh	r2, [r7, #24]
	buffer[len] = (char)(crc >> 8);
	buffer[len + 1] = (char)(crc & 0xFF);

	return rfhelp_send_data(buffer, len + 2, nrf_conf.send_crc_ack);
 8001c52:	7a5c      	ldrb	r4, [r3, #9]
 */
int rfhelp_send_data_crc(char *data, int len) {
	char buffer[len + 2];
	unsigned short crc = crc16((unsigned char*)data, len);

	memcpy(buffer, data, len);
 8001c54:	76b9      	strb	r1, [r7, #26]
 */
int rfhelp_send_data(char *data, int len, char ack) {
	int timeout = 60;
	int retval = -1;

	chMtxLock(&rf_mutex);
 8001c56:	f7ff fadb 	bl	8001210 <chMtxLock>
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f107 010e 	add.w	r1, r7, #14
 8001c62:	f7ff fded 	bl	8001840 <rf_read_reg>
	return result;
 8001c66:	7bbb      	ldrb	r3, [r7, #14]
}

// Set up radio for transmission
void rf_mode_tx(void) {
	int tmp = rf_read_reg_byte(NRF_REG_CONFIG);
	if (tmp & (NRF_CONFIG_PRIM_RX)) {
 8001c68:	07da      	lsls	r2, r3, #31
 8001c6a:	d508      	bpl.n	8001c7e <tx_thread+0xae>
		tmp &= ~(NRF_CONFIG_PRIM_RX);
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8001c70:	2000      	movs	r0, #0
 8001c72:	f107 010c 	add.w	r1, r7, #12
 8001c76:	2201      	movs	r2, #1
// Set up radio for transmission
void rf_mode_tx(void) {
	int tmp = rf_read_reg_byte(NRF_REG_CONFIG);
	if (tmp & (NRF_CONFIG_PRIM_RX)) {
		tmp &= ~(NRF_CONFIG_PRIM_RX);
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
 8001c78:	733b      	strb	r3, [r7, #12]
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8001c7a:	f7ff fe19 	bl	80018b0 <rf_write_reg>
 8001c7e:	2370      	movs	r3, #112	; 0x70
 8001c80:	2007      	movs	r0, #7
 8001c82:	f107 010d 	add.w	r1, r7, #13
 8001c86:	2201      	movs	r2, #1
 8001c88:	737b      	strb	r3, [r7, #13]
 8001c8a:	f7ff fe11 	bl	80018b0 <rf_write_reg>
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_flush_all(void) {
	rf_flush_rx();
 8001c8e:	f7ff ff3f 	bl	8001b10 <rf_flush_rx>
	rf_flush_tx();
 8001c92:	f7ff ff5d 	bl	8001b50 <rf_flush_tx>
	// Pipe0-address and tx-address must be equal for ack to work.
//	if (!tx_pipe0_addr_eq && ack) {
//		rf_set_rx_addr(0, tx_addr, address_length);
//	}

	if (ack) {
 8001c96:	2c00      	cmp	r4, #0
 8001c98:	d06e      	beq.n	8001d78 <tx_thread+0x1a8>
void rf_set_tx_addr(const char *address, int addr_len) {
	rf_write_reg(NRF_REG_TX_ADDR, address, addr_len);
}

void rf_write_tx_payload(const char *data, int length) {
	char cmd = NRF_CMD_WRITE_TX_PAYLOAD;
 8001c9a:	23a0      	movs	r3, #160	; 0xa0
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8001c9c:	483e      	ldr	r0, [pc, #248]	; (8001d98 <tx_thread+0x1c8>)

}

// Write payload for transmission without requesting acknowledge
void rf_write_tx_payload_no_ack(const char *data, int length) {
	char cmd = NRF_CMD_WRITE_TX_PAYLOAD_NO_ACK;
 8001c9e:	73bb      	strb	r3, [r7, #14]
 8001ca0:	f7ff fab6 	bl	8001210 <chMtxLock>

    spiAcquireBus(&SPID1);              /* Acquire ownership of the bus.    */
    spiSelect(&SPID1);                  /* Slave Select assertion.          */
 8001ca4:	f001 fe9c 	bl	80039e0 <spiSelect.constprop.29>
    spiSend(&SPID1,1,&cmd);
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f107 010e 	add.w	r1, r7, #14
 8001cae:	f001 feb7 	bl	8003a20 <spiSend.constprop.25>
    spiSend(&SPID1,length,data);
 8001cb2:	2005      	movs	r0, #5
 8001cb4:	f107 0118 	add.w	r1, r7, #24
 8001cb8:	f001 feb2 	bl	8003a20 <spiSend.constprop.25>
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
 8001cbc:	f001 fea0 	bl	8003a00 <spiUnselect.constprop.27>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8001cc0:	4835      	ldr	r0, [pc, #212]	; (8001d98 <tx_thread+0x1c8>)
 8001cc2:	f7ff fa6d 	bl	80011a0 <chMtxUnlock>
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
 8001cc6:	243c      	movs	r4, #60	; 0x3c
    spiReleaseBus(&SPID1);              /* Ownership release.               */
	return w;
}

int rf_status(void) {
	char w = NRF_CMD_NOP;
 8001cc8:	26ff      	movs	r6, #255	; 0xff
 8001cca:	e004      	b.n	8001cd6 <tx_thread+0x106>
		timeout--;

		if (NRF_STATUS_GET_TX_DS(s)) {
			retval = 0;
			break;
		} else if (NRF_STATUS_GET_MAX_RT(s)) {
 8001ccc:	f01b 0f10 	tst.w	fp, #16
 8001cd0:	d142      	bne.n	8001d58 <tx_thread+0x188>
			rf_clear_maxrt_irq();
			retval = -1;
			break;
		} else if (timeout == 0) {
 8001cd2:	3c01      	subs	r4, #1
 8001cd4:	d048      	beq.n	8001d68 <tx_thread+0x198>
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8001cd6:	4830      	ldr	r0, [pc, #192]	; (8001d98 <tx_thread+0x1c8>)
 8001cd8:	73be      	strb	r6, [r7, #14]
 8001cda:	f7ff fa99 	bl	8001210 <chMtxLock>
    spiAcquireBus(&SPID1);              /* Acquire ownership of the bus.    */
    spiSelect(&SPID1);                  /* Slave Select assertion.          */
 8001cde:	f001 fe7f 	bl	80039e0 <spiSelect.constprop.29>
//    spiExchange(&SPID1, 1,
//                &w, &w);          /* Atomic transfer operations.      */
    spiSend(&SPID1,1,&w);
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f107 010e 	add.w	r1, r7, #14
 8001ce8:	f001 fe9a 	bl	8003a20 <spiSend.constprop.25>
 8001cec:	2320      	movs	r3, #32
 8001cee:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartReceiveI(spip, n, rxbuf);
 8001cf2:	f04f 0b03 	mov.w	fp, #3
 8001cf6:	f107 010e 	add.w	r1, r7, #14
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f885 b000 	strb.w	fp, [r5]
 8001d00:	f001 fec6 	bl	8003a90 <spi_lld_receive.constprop.24>
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <tx_thread+0x1ac>)
 8001d06:	4658      	mov	r0, fp
 8001d08:	699b      	ldr	r3, [r3, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 8001d0a:	f8c3 8020 	str.w	r8, [r3, #32]
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8001d0e:	60ab      	str	r3, [r5, #8]
  tp->p_u.wttrp = trp;
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8001d10:	f7fe ff7e 	bl	8000c10 <chSchGoSleepS>
 8001d14:	2300      	movs	r3, #0
 8001d16:	f383 8811 	msr	BASEPRI, r3
    spiReceive(&SPID1,1,&w);

    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
 8001d1a:	f001 fe71 	bl	8003a00 <spiUnselect.constprop.27>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8001d1e:	481e      	ldr	r0, [pc, #120]	; (8001d98 <tx_thread+0x1c8>)
 8001d20:	f7ff fa3e 	bl	80011a0 <chMtxUnlock>
    spiReleaseBus(&SPID1);              /* Ownership release.               */
	return w;
 8001d24:	f897 b00e 	ldrb.w	fp, [r7, #14]
	}

	for(;;) {
		int s = rf_status();

		chThdSleepMilliseconds(1);
 8001d28:	2002      	movs	r0, #2
 8001d2a:	f7ff f959 	bl	8000fe0 <chThdSleep>
		timeout--;

		if (NRF_STATUS_GET_TX_DS(s)) {
 8001d2e:	f01b 0f20 	tst.w	fp, #32
 8001d32:	d0cb      	beq.n	8001ccc <tx_thread+0xfc>
	// Restore pipe0 address
//	if (!tx_pipe0_addr_eq && ack) {
//		rf_set_rx_addr(0, rx_addr[0], address_length);
//	}

	rf_mode_rx();
 8001d34:	f7ff ff2c 	bl	8001b90 <rf_mode_rx>

	chMtxUnlock(&rf_mutex);
 8001d38:	4816      	ldr	r0, [pc, #88]	; (8001d94 <tx_thread+0x1c4>)
 8001d3a:	f7ff fa31 	bl	80011a0 <chMtxUnlock>

static int rf_tx_wrapper(char *data, int len) {
	int res = rfhelp_send_data_crc(data, len);

	if (res == 0) {
		nrf_restart_tx_time = NRF_RESTART_TIMEOUT;
 8001d3e:	4a17      	ldr	r2, [pc, #92]	; (8001d9c <tx_thread+0x1cc>)
 8001d40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d44:	f8d7 d000 	ldr.w	sp, [r7]
 8001d48:	6013      	str	r3, [r2, #0]
			int32_t index = 0;
            pl[index++] = 'A';
            pl[index++] = 'B';
            pl[index++] = cnt;
			rf_tx_wrapper((char*)pl, index);
			nosend_cnt = 0;
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <tx_thread+0x1bc>)
 8001d4c:	2300      	movs	r3, #0
//		}

		chThdSleepMilliseconds(100);
 8001d4e:	20c8      	movs	r0, #200	; 0xc8
			int32_t index = 0;
            pl[index++] = 'A';
            pl[index++] = 'B';
            pl[index++] = cnt;
			rf_tx_wrapper((char*)pl, index);
			nosend_cnt = 0;
 8001d50:	6013      	str	r3, [r2, #0]
//		}

		chThdSleepMilliseconds(100);
 8001d52:	f7ff f945 	bl	8000fe0 <chThdSleep>
 8001d56:	e74d      	b.n	8001bf4 <tx_thread+0x24>
 8001d58:	2310      	movs	r3, #16
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8001d5a:	2007      	movs	r0, #7
 8001d5c:	f107 010f 	add.w	r1, r7, #15
 8001d60:	2201      	movs	r2, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	f7ff fda4 	bl	80018b0 <rf_write_reg>
	// Restore pipe0 address
//	if (!tx_pipe0_addr_eq && ack) {
//		rf_set_rx_addr(0, rx_addr[0], address_length);
//	}

	rf_mode_rx();
 8001d68:	f7ff ff12 	bl	8001b90 <rf_mode_rx>

	chMtxUnlock(&rf_mutex);
 8001d6c:	4809      	ldr	r0, [pc, #36]	; (8001d94 <tx_thread+0x1c4>)
 8001d6e:	f7ff fa17 	bl	80011a0 <chMtxUnlock>
 8001d72:	f8d7 d000 	ldr.w	sp, [r7]
 8001d76:	e7e8      	b.n	8001d4a <tx_thread+0x17a>

}

// Write payload for transmission without requesting acknowledge
void rf_write_tx_payload_no_ack(const char *data, int length) {
	char cmd = NRF_CMD_WRITE_TX_PAYLOAD_NO_ACK;
 8001d78:	23b0      	movs	r3, #176	; 0xb0
 8001d7a:	e78f      	b.n	8001c9c <tx_thread+0xcc>
 8001d7c:	20001030 	.word	0x20001030
 8001d80:	08003fc0 	.word	0x08003fc0
 8001d84:	200011b8 	.word	0x200011b8
 8001d88:	20000b00 	.word	0x20000b00
 8001d8c:	20000b0c 	.word	0x20000b0c
 8001d90:	20000bf8 	.word	0x20000bf8
 8001d94:	20000c50 	.word	0x20000c50
 8001d98:	200011c4 	.word	0x200011c4
 8001d9c:	20000b04 	.word	0x20000b04
 8001da0:	08004040 	.word	0x08004040
	...

08001db0 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8001db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db4:	4681      	mov	r9, r0
 8001db6:	468a      	mov	sl, r1
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8001db8:	468b      	mov	fp, r1
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8001dba:	b087      	sub	sp, #28
 8001dbc:	4615      	mov	r5, r2
 8001dbe:	f10d 030d 	add.w	r3, sp, #13
 8001dc2:	aa03      	add	r2, sp, #12
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	9301      	str	r3, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8001dc8:	f04f 0800 	mov.w	r8, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8001dcc:	f89b 1000 	ldrb.w	r1, [fp]
 8001dd0:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8001dd4:	b179      	cbz	r1, 8001df6 <chvprintf+0x46>
      return n;
    if (c != '%') {
 8001dd6:	2925      	cmp	r1, #37	; 0x25
 8001dd8:	d011      	beq.n	8001dfe <chvprintf+0x4e>
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8001dda:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 8001ddc:	f8d9 2000 	ldr.w	r2, [r9]
 8001de0:	4648      	mov	r0, r9
 8001de2:	6892      	ldr	r2, [r2, #8]
 8001de4:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8001de6:	f89b 1000 	ldrb.w	r1, [fp]
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 8001dea:	f108 0801 	add.w	r8, r8, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8001dee:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8001df2:	2900      	cmp	r1, #0
 8001df4:	d1ef      	bne.n	8001dd6 <chvprintf+0x26>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 8001df6:	4640      	mov	r0, r8
 8001df8:	b007      	add	sp, #28
 8001dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8001dfe:	f89b 2001 	ldrb.w	r2, [fp, #1]
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8001e02:	2600      	movs	r6, #0
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8001e04:	2a2d      	cmp	r2, #45	; 0x2d
 8001e06:	bf03      	ittte	eq
 8001e08:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 8001e0c:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 8001e10:	f04f 0a01 	moveq.w	sl, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8001e14:	f04f 0a00 	movne.w	sl, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8001e18:	2a30      	cmp	r2, #48	; 0x30
 8001e1a:	bf03      	ittte	eq
 8001e1c:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8001e1e:	3301      	addeq	r3, #1
      filler = '0';
 8001e20:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8001e22:	2720      	movne	r7, #32
 8001e24:	1c59      	adds	r1, r3, #1
 8001e26:	e006      	b.n	8001e36 <chvprintf+0x86>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8001e28:	782b      	ldrb	r3, [r5, #0]
 8001e2a:	3504      	adds	r5, #4
 8001e2c:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 8001e30:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 8001e34:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8001e36:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8001e3e:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8001e40:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8001e44:	d9f2      	bls.n	8001e2c <chvprintf+0x7c>
        c -= '0';
      else if (c == '*')
 8001e46:	2a2a      	cmp	r2, #42	; 0x2a
 8001e48:	d0ee      	beq.n	8001e28 <chvprintf+0x78>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8001e4a:	2a2e      	cmp	r2, #46	; 0x2e
 8001e4c:	f04f 0100 	mov.w	r1, #0
 8001e50:	d043      	beq.n	8001eda <chvprintf+0x12a>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8001e52:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8001e56:	2b4c      	cmp	r3, #76	; 0x4c
 8001e58:	d04e      	beq.n	8001ef8 <chvprintf+0x148>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8001e5a:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 8001e5e:	2834      	cmp	r0, #52	; 0x34
 8001e60:	f200 80f6 	bhi.w	8002050 <chvprintf+0x2a0>
 8001e64:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001e68:	00f400ea 	.word	0x00f400ea
 8001e6c:	00f400f4 	.word	0x00f400f4
 8001e70:	00ea00f4 	.word	0x00ea00f4
 8001e74:	00f400f4 	.word	0x00f400f4
 8001e78:	00f400f4 	.word	0x00f400f4
 8001e7c:	00e800f4 	.word	0x00e800f4
 8001e80:	00f400f4 	.word	0x00f400f4
 8001e84:	00f400f4 	.word	0x00f400f4
 8001e88:	00dd00f4 	.word	0x00dd00f4
 8001e8c:	00f400f4 	.word	0x00f400f4
 8001e90:	00f400f1 	.word	0x00f400f1
 8001e94:	00f400f4 	.word	0x00f400f4
 8001e98:	00f400f4 	.word	0x00f400f4
 8001e9c:	00f400f4 	.word	0x00f400f4
 8001ea0:	00f400f4 	.word	0x00f400f4
 8001ea4:	00a100f4 	.word	0x00a100f4
 8001ea8:	00f400ea 	.word	0x00f400ea
 8001eac:	00f400f4 	.word	0x00f400f4
 8001eb0:	00ea00f4 	.word	0x00ea00f4
 8001eb4:	00f400f4 	.word	0x00f400f4
 8001eb8:	00f400f4 	.word	0x00f400f4
 8001ebc:	00e800f4 	.word	0x00e800f4
 8001ec0:	00f400f4 	.word	0x00f400f4
 8001ec4:	007100f4 	.word	0x007100f4
 8001ec8:	00dd00f4 	.word	0x00dd00f4
 8001ecc:	00f400f4 	.word	0x00f400f4
 8001ed0:	00f1      	.short	0x00f1
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8001ed2:	782b      	ldrb	r3, [r5, #0]
 8001ed4:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 8001ed6:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8001eda:	f81b 2b01 	ldrb.w	r2, [fp], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8001ede:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8001ee2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b09      	cmp	r3, #9
 8001eea:	d9f4      	bls.n	8001ed6 <chvprintf+0x126>
          c -= '0';
        else if (c == '*')
 8001eec:	2a2a      	cmp	r2, #42	; 0x2a
 8001eee:	d0f0      	beq.n	8001ed2 <chvprintf+0x122>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8001ef0:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8001ef4:	2b4c      	cmp	r3, #76	; 0x4c
 8001ef6:	d1b0      	bne.n	8001e5a <chvprintf+0xaa>
      is_long = TRUE;
      if (*fmt)
 8001ef8:	f89b 3000 	ldrb.w	r3, [fp]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80a7 	beq.w	8002050 <chvprintf+0x2a0>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8001f02:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8001f06:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8001f0a:	2a34      	cmp	r2, #52	; 0x34
 8001f0c:	f200 809f 	bhi.w	800204e <chvprintf+0x29e>
 8001f10:	e8df f002 	tbb	[pc, r2]
 8001f14:	9d9d9d94 	.word	0x9d9d9d94
 8001f18:	9d9d949d 	.word	0x9d9d949d
 8001f1c:	929d9d9d 	.word	0x929d9d9d
 8001f20:	9d9d9d9d 	.word	0x9d9d9d9d
 8001f24:	9d9d879d 	.word	0x9d9d879d
 8001f28:	9d9d9d9b 	.word	0x9d9d9d9b
 8001f2c:	9d9d9d9d 	.word	0x9d9d9d9d
 8001f30:	4b9d9d9d 	.word	0x4b9d9d9d
 8001f34:	9d9d9d94 	.word	0x9d9d9d94
 8001f38:	9d9d949d 	.word	0x9d9d949d
 8001f3c:	929d9d9d 	.word	0x929d9d9d
 8001f40:	1b9d9d9d 	.word	0x1b9d9d9d
 8001f44:	9d9d879d 	.word	0x9d9d879d
 8001f48:	9b          	.byte	0x9b
 8001f49:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8001f4a:	682c      	ldr	r4, [r5, #0]
        s = "(null)";
 8001f4c:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <chvprintf+0x304>)
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8001f4e:	3504      	adds	r5, #4
        s = "(null)";
 8001f50:	2c00      	cmp	r4, #0
 8001f52:	bf08      	it	eq
 8001f54:	461c      	moveq	r4, r3
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8001f56:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8001f58:	2900      	cmp	r1, #0
 8001f5a:	f000 8093 	beq.w	8002084 <chvprintf+0x2d4>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 8095 	beq.w	800208e <chvprintf+0x2de>
 8001f64:	3901      	subs	r1, #1
 8001f66:	4620      	mov	r0, r4
 8001f68:	e001      	b.n	8001f6e <chvprintf+0x1be>
 8001f6a:	3901      	subs	r1, #1
 8001f6c:	d403      	bmi.n	8001f76 <chvprintf+0x1c6>
 8001f6e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f9      	bne.n	8001f6a <chvprintf+0x1ba>
 8001f76:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8001f78:	1a36      	subs	r6, r6, r0
 8001f7a:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8001f7c:	2720      	movs	r7, #32
 8001f7e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8001f82:	f1ba 0f00 	cmp.w	sl, #0
 8001f86:	d01f      	beq.n	8001fc8 <chvprintf+0x218>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	da34      	bge.n	8001ff8 <chvprintf+0x248>
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8001f8e:	2e00      	cmp	r6, #0
 8001f90:	f43f af1c 	beq.w	8001dcc <chvprintf+0x1c>
 8001f94:	4634      	mov	r4, r6
      chSequentialStreamPut(chp, (uint8_t)filler);
 8001f96:	f8d9 3000 	ldr.w	r3, [r9]
 8001f9a:	4648      	mov	r0, r9
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	4639      	mov	r1, r7
 8001fa0:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8001fa2:	3c01      	subs	r4, #1
 8001fa4:	d1f7      	bne.n	8001f96 <chvprintf+0x1e6>
 8001fa6:	44b0      	add	r8, r6
 8001fa8:	e710      	b.n	8001dcc <chvprintf+0x1c>
 8001faa:	9a01      	ldr	r2, [sp, #4]

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 8001fac:	682b      	ldr	r3, [r5, #0]
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f88d 300c 	strb.w	r3, [sp, #12]
 8001fb4:	3504      	adds	r5, #4
 8001fb6:	1e53      	subs	r3, r2, #1
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8001fb8:	2720      	movs	r7, #32
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8001fba:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8001fbc:	1a36      	subs	r6, r6, r0
 8001fbe:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 8001fc2:	f1ba 0f00 	cmp.w	sl, #0
 8001fc6:	d1df      	bne.n	8001f88 <chvprintf+0x1d8>
 8001fc8:	9300      	str	r3, [sp, #0]
      width = -width;
 8001fca:	f1c6 0a00 	rsb	sl, r6, #0
    if (width < 0) {
 8001fce:	f1ba 0f00 	cmp.w	sl, #0
 8001fd2:	d044      	beq.n	800205e <chvprintf+0x2ae>
      if (*s == '-' && filler == '0') {
 8001fd4:	7821      	ldrb	r1, [r4, #0]
 8001fd6:	292d      	cmp	r1, #45	; 0x2d
 8001fd8:	d046      	beq.n	8002068 <chvprintf+0x2b8>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
 8001fda:	4656      	mov	r6, sl
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 8001fdc:	f8d9 3000 	ldr.w	r3, [r9]
 8001fe0:	4648      	mov	r0, r9
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	4639      	mov	r1, r7
 8001fe6:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8001fe8:	3601      	adds	r6, #1
 8001fea:	d1f7      	bne.n	8001fdc <chvprintf+0x22c>
    }
    while (--i >= 0) {
 8001fec:	9b00      	ldr	r3, [sp, #0]
 8001fee:	ebca 0808 	rsb	r8, sl, r8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f6ff aeea 	blt.w	8001dcc <chvprintf+0x1c>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8001ff8:	f8dd a000 	ldr.w	sl, [sp]
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8001ffc:	f8d9 3000 	ldr.w	r3, [r9]
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002000:	f10a 3aff 	add.w	sl, sl, #4294967295
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	4648      	mov	r0, r9
 8002008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800200c:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800200e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8002012:	d1f3      	bne.n	8001ffc <chvprintf+0x24c>
 8002014:	9b00      	ldr	r3, [sp, #0]
 8002016:	f108 0801 	add.w	r8, r8, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	bfa8      	it	ge
 800201e:	4498      	addge	r8, r3
 8002020:	e7b5      	b.n	8001f8e <chvprintf+0x1de>
 8002022:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8002024:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002026:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8002028:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 800202a:	f001 fd71 	bl	8003b10 <long_to_string_with_divisor.constprop.12>
 800202e:	ab03      	add	r3, sp, #12
 8002030:	1ac0      	subs	r0, r0, r3
 8002032:	1e43      	subs	r3, r0, #1
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002034:	ac03      	add	r4, sp, #12
 8002036:	e7c1      	b.n	8001fbc <chvprintf+0x20c>
 8002038:	2208      	movs	r2, #8
 800203a:	e7f3      	b.n	8002024 <chvprintf+0x274>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 800203c:	6829      	ldr	r1, [r5, #0]
 800203e:	3504      	adds	r5, #4
      if (l < 0) {
 8002040:	2900      	cmp	r1, #0
 8002042:	db2e      	blt.n	80020a2 <chvprintf+0x2f2>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8002044:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002046:	220a      	movs	r2, #10
 8002048:	e7ef      	b.n	800202a <chvprintf+0x27a>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800204a:	2210      	movs	r2, #16
 800204c:	e7ea      	b.n	8002024 <chvprintf+0x274>
 800204e:	461a      	mov	r2, r3
 8002050:	9b01      	ldr	r3, [sp, #4]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002052:	ac03      	add	r4, sp, #12
 8002054:	4618      	mov	r0, r3
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8002056:	f88d 200c 	strb.w	r2, [sp, #12]
 800205a:	3b01      	subs	r3, #1
 800205c:	e7ae      	b.n	8001fbc <chvprintf+0x20c>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800205e:	9b00      	ldr	r3, [sp, #0]
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 8002060:	4656      	mov	r6, sl
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002062:	2b00      	cmp	r3, #0
 8002064:	dac8      	bge.n	8001ff8 <chvprintf+0x248>
 8002066:	e6b1      	b.n	8001dcc <chvprintf+0x1c>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8002068:	2f30      	cmp	r7, #48	; 0x30
 800206a:	d1b6      	bne.n	8001fda <chvprintf+0x22a>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 800206c:	f8d9 3000 	ldr.w	r3, [r9]
 8002070:	4648      	mov	r0, r9
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4798      	blx	r3
 8002076:	9b00      	ldr	r3, [sp, #0]
 8002078:	3401      	adds	r4, #1
 800207a:	3b01      	subs	r3, #1
        n++;
 800207c:	f108 0801 	add.w	r8, r8, #1
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	e7aa      	b.n	8001fda <chvprintf+0x22a>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002084:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8002088:	2b00      	cmp	r3, #0
 800208a:	f47f af6c 	bne.w	8001f66 <chvprintf+0x1b6>
 800208e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002092:	f1ba 0f00 	cmp.w	sl, #0
 8002096:	d10b      	bne.n	80020b0 <chvprintf+0x300>
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2720      	movs	r7, #32
 80020a0:	e793      	b.n	8001fca <chvprintf+0x21a>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80020a2:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 80020a4:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80020a6:	f88d 300c 	strb.w	r3, [sp, #12]
 80020aa:	f10d 000d 	add.w	r0, sp, #13
 80020ae:	e7ca      	b.n	8002046 <chvprintf+0x296>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80020b0:	2720      	movs	r7, #32
 80020b2:	e76c      	b.n	8001f8e <chvprintf+0x1de>
 80020b4:	08003fc8 	.word	0x08003fc8
	...

080020c0 <chprintf.lto_priv.75>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80020c0:	b40e      	push	{r1, r2, r3}
 80020c2:	b500      	push	{lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	ab03      	add	r3, sp, #12
 80020c8:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 80020cc:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80020ce:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80020d0:	f7ff fe6e 	bl	8001db0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80020d4:	b002      	add	sp, #8
 80020d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80020da:	b003      	add	sp, #12
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop

080020e0 <cmd_mem.lto_priv.73>:


static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)argv;
  size_t n, size;
  if (argc > 0) {
 80020e0:	2900      	cmp	r1, #0
 80020e2:	dd02      	ble.n	80020ea <cmd_mem.lto_priv.73+0xa>
    chprintf(chp, "Usage: mem\r\n");
 80020e4:	4916      	ldr	r1, [pc, #88]	; (8002140 <cmd_mem.lto_priv.73+0x60>)
 80020e6:	f7ff bfeb 	b.w	80020c0 <chprintf.lto_priv.75>

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define USB2SER_WA_SIZE    THD_WORKING_AREA_SIZE(512)


static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 80020ea:	b570      	push	{r4, r5, r6, lr}
 80020ec:	4606      	mov	r6, r0

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
 80020ee:	4815      	ldr	r0, [pc, #84]	; (8002144 <cmd_mem.lto_priv.73+0x64>)
 80020f0:	f7ff f88e 	bl	8001210 <chMtxLock>
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <cmd_mem.lto_priv.73+0x68>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	b1fb      	cbz	r3, 800213a <cmd_mem.lto_priv.73+0x5a>
 80020fa:	2400      	movs	r4, #0
 80020fc:	4625      	mov	r5, r4
    sz += qp->h.u.next->h.size;
 80020fe:	685a      	ldr	r2, [r3, #4]

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8002100:	681b      	ldr	r3, [r3, #0]
    sz += qp->h.u.next->h.size;
    n++;
 8002102:	3401      	adds	r4, #1
  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
    sz += qp->h.u.next->h.size;
 8002104:	4415      	add	r5, r2

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f9      	bne.n	80020fe <cmd_mem.lto_priv.73+0x1e>
    qp = qp->h.u.next;
  }
  if (sizep != NULL) {
    *sizep = sz;
  }
  H_UNLOCK(heapp);
 800210a:	480e      	ldr	r0, [pc, #56]	; (8002144 <cmd_mem.lto_priv.73+0x64>)
 800210c:	f7ff f848 	bl	80011a0 <chMtxUnlock>
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(endmem - nextmem);
 8002110:	4a0e      	ldr	r2, [pc, #56]	; (800214c <cmd_mem.lto_priv.73+0x6c>)
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <cmd_mem.lto_priv.73+0x70>)
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
  if (argc > 0) {
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
  n = chHeapStatus(NULL, &size);
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
 8002118:	4630      	mov	r0, r6
 800211a:	1ad2      	subs	r2, r2, r3
 800211c:	490d      	ldr	r1, [pc, #52]	; (8002154 <cmd_mem.lto_priv.73+0x74>)
 800211e:	f7ff ffcf 	bl	80020c0 <chprintf.lto_priv.75>
  chprintf(chp, "heap fragments   : %u\r\n", n);
 8002122:	4622      	mov	r2, r4
 8002124:	4630      	mov	r0, r6
 8002126:	490c      	ldr	r1, [pc, #48]	; (8002158 <cmd_mem.lto_priv.73+0x78>)
 8002128:	f7ff ffca 	bl	80020c0 <chprintf.lto_priv.75>
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
 800212c:	4630      	mov	r0, r6
 800212e:	462a      	mov	r2, r5
}
 8002130:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return;
  }
  n = chHeapStatus(NULL, &size);
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
 8002134:	4909      	ldr	r1, [pc, #36]	; (800215c <cmd_mem.lto_priv.73+0x7c>)
 8002136:	f7ff bfc3 	b.w	80020c0 <chprintf.lto_priv.75>
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  sz = 0;
  n = 0;
 800213a:	461c      	mov	r4, r3
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  sz = 0;
 800213c:	461d      	mov	r5, r3
 800213e:	e7e4      	b.n	800210a <cmd_mem.lto_priv.73+0x2a>
 8002140:	08003fd0 	.word	0x08003fd0
 8002144:	20000c38 	.word	0x20000c38
 8002148:	20000c28 	.word	0x20000c28
 800214c:	20000bf4 	.word	0x20000bf4
 8002150:	20000c48 	.word	0x20000c48
 8002154:	08003fe0 	.word	0x08003fe0
 8002158:	08004000 	.word	0x08004000
 800215c:	08004018 	.word	0x08004018

08002160 <Thread1>:
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
    palClearPad(GPIOC, 13);
 8002160:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8002164:	46b0      	mov	r8, r6
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <Thread1+0x38>)
 8002168:	4a0c      	ldr	r2, [pc, #48]	; (800219c <Thread1+0x3c>)
 800216a:	699b      	ldr	r3, [r3, #24]

/*
 * Blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
 800216c:	b580      	push	{r7, lr}
  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
    palClearPad(GPIOC, 13);
 800216e:	4d0c      	ldr	r5, [pc, #48]	; (80021a0 <Thread1+0x40>)
 8002170:	4f0c      	ldr	r7, [pc, #48]	; (80021a4 <Thread1+0x44>)
 8002172:	619a      	str	r2, [r3, #24]
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
 8002174:	783b      	ldrb	r3, [r7, #0]
    palClearPad(GPIOC, 13);
 8002176:	f8c5 8014 	str.w	r8, [r5, #20]
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf0c      	ite	eq
 800217e:	f44f 74fa 	moveq.w	r4, #500	; 0x1f4
 8002182:	f44f 64fa 	movne.w	r4, #2000	; 0x7d0
    palClearPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
 8002186:	4620      	mov	r0, r4
 8002188:	f7fe ff2a 	bl	8000fe0 <chThdSleep>
    palSetPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
 800218c:	4620      	mov	r0, r4
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
    palClearPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
    palSetPad(GPIOC, 13);
 800218e:	612e      	str	r6, [r5, #16]
    chThdSleepMilliseconds(time);
 8002190:	f7fe ff26 	bl	8000fe0 <chThdSleep>
 8002194:	e7ee      	b.n	8002174 <Thread1+0x14>
 8002196:	bf00      	nop
 8002198:	20001030 	.word	0x20001030
 800219c:	08004320 	.word	0x08004320
 80021a0:	40011000 	.word	0x40011000
 80021a4:	20000b5c 	.word	0x20000b5c
	...

080021b0 <statusThreads>:
static void statusThreads(BaseSequentialStream *chp, int argc, char *argv[]) {
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 80021b0:	2900      	cmp	r1, #0
 80021b2:	dd02      	ble.n	80021ba <statusThreads+0xa>
    chprintf(chp, "Usage: threads\r\n");
 80021b4:	491e      	ldr	r1, [pc, #120]	; (8002230 <statusThreads+0x80>)
 80021b6:	f7ff bf83 	b.w	80020c0 <chprintf.lto_priv.75>
//  chprintf((BaseSequentialStream *)&SDU1, "%s",cmm);/
//  chprintf((BaseSequentialStream *)&SDU1, "\033[1;34msmso blue text\033[0m plain text\n");

  printNrfAdd();
}
static void statusThreads(BaseSequentialStream *chp, int argc, char *argv[]) {
 80021ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 80021be:	491d      	ldr	r1, [pc, #116]	; (8002234 <statusThreads+0x84>)
//  chprintf((BaseSequentialStream *)&SDU1, "%s",cmm);/
//  chprintf((BaseSequentialStream *)&SDU1, "\033[1;34msmso blue text\033[0m plain text\n");

  printNrfAdd();
}
static void statusThreads(BaseSequentialStream *chp, int argc, char *argv[]) {
 80021c0:	b084      	sub	sp, #16
 80021c2:	4606      	mov	r6, r0
 80021c4:	f04f 0820 	mov.w	r8, #32
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 80021c8:	f7ff ff7a 	bl	80020c0 <chprintf.lto_priv.75>
 80021cc:	f388 8811 	msr	BASEPRI, r8
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 80021d0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800223c <statusThreads+0x8c>
 80021d4:	2700      	movs	r7, #0
 80021d6:	f8d9 4010 	ldr.w	r4, [r9, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 80021da:	7fa3      	ldrb	r3, [r4, #30]
 80021dc:	3301      	adds	r3, #1
 80021de:	77a3      	strb	r3, [r4, #30]
 80021e0:	f387 8811 	msr	BASEPRI, r7
 80021e4:	f8df a058 	ldr.w	sl, [pc, #88]	; 8002240 <statusThreads+0x90>
 80021e8:	e000      	b.n	80021ec <statusThreads+0x3c>
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
             states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
 80021ea:	462c      	mov	r4, r5
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 80021ec:	68a2      	ldr	r2, [r4, #8]
 80021ee:	68e3      	ldr	r3, [r4, #12]
 80021f0:	9200      	str	r2, [sp, #0]
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 80021f2:	7fa2      	ldrb	r2, [r4, #30]
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 80021f4:	4630      	mov	r0, r6
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 80021f6:	3a01      	subs	r2, #1
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 80021f8:	9201      	str	r2, [sp, #4]
 80021fa:	7f22      	ldrb	r2, [r4, #28]
 80021fc:	490e      	ldr	r1, [pc, #56]	; (8002238 <statusThreads+0x88>)
 80021fe:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8002202:	9202      	str	r2, [sp, #8]
 8002204:	4622      	mov	r2, r4
 8002206:	f7ff ff5b 	bl	80020c0 <chprintf.lto_priv.75>
 800220a:	f388 8811 	msr	BASEPRI, r8
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 800220e:	6925      	ldr	r5, [r4, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8002210:	454d      	cmp	r5, r9
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 8002212:	bf17      	itett	ne
 8002214:	7fab      	ldrbne	r3, [r5, #30]
  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 8002216:	2500      	moveq	r5, #0
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 8002218:	3301      	addne	r3, #1
 800221a:	77ab      	strbne	r3, [r5, #30]
 800221c:	f387 8811 	msr	BASEPRI, r7
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 8002220:	4620      	mov	r0, r4
 8002222:	f7ff f865 	bl	80012f0 <chThdRelease>
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
             states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
 8002226:	2d00      	cmp	r5, #0
 8002228:	d1df      	bne.n	80021ea <statusThreads+0x3a>
}
 800222a:	b004      	add	sp, #16
 800222c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002230:	08004328 	.word	0x08004328
 8002234:	0800433c 	.word	0x0800433c
 8002238:	08004364 	.word	0x08004364
 800223c:	20001030 	.word	0x20001030
 8002240:	080044e0 	.word	0x080044e0
	...

08002250 <encoderData>:
 * */


static void encoderData(BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)argv;
  if (argc > 0) {
 8002250:	2900      	cmp	r1, #0
 8002252:	dc1a      	bgt.n	800228a <encoderData+0x3a>
    tp = chRegNextThread(tp);
  } while (tp != NULL);
 * */


static void encoderData(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002258:	4604      	mov	r4, r0
 800225a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800229c <encoderData+0x4c>
 800225e:	4f0c      	ldr	r7, [pc, #48]	; (8002290 <encoderData+0x40>)
 8002260:	2620      	movs	r6, #32
 8002262:	2500      	movs	r5, #0
 8002264:	f386 8811 	msr	BASEPRI, r6
 */
qeicnt_t qeiGetCount(QEIDriver *qeip) {
  qeicnt_t cnt;

  osalSysLock();
  cnt = qeiGetCountI(qeip);
 8002268:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	f385 8811 	msr	BASEPRI, r5
    chprintf(chp, "Usage: enc\r\n");
    return;
  }
  while(1)
  {
    encv = qeiGetCount(&QEID4);
 8002272:	b29b      	uxth	r3, r3
    chprintf(chp, "Value : %5d\r",encv);
 8002274:	461a      	mov	r2, r3
 8002276:	4620      	mov	r0, r4
 8002278:	4906      	ldr	r1, [pc, #24]	; (8002294 <encoderData+0x44>)
    chprintf(chp, "Usage: enc\r\n");
    return;
  }
  while(1)
  {
    encv = qeiGetCount(&QEID4);
 800227a:	603b      	str	r3, [r7, #0]
    chprintf(chp, "Value : %5d\r",encv);
 800227c:	f7ff ff20 	bl	80020c0 <chprintf.lto_priv.75>
    chThdSleepMilliseconds(500);
 8002280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002284:	f7fe feac 	bl	8000fe0 <chThdSleep>
 8002288:	e7ec      	b.n	8002264 <encoderData+0x14>


static void encoderData(BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: enc\r\n");
 800228a:	4903      	ldr	r1, [pc, #12]	; (8002298 <encoderData+0x48>)
 800228c:	f7ff bf18 	b.w	80020c0 <chprintf.lto_priv.75>
 8002290:	20000bec 	.word	0x20000bec
 8002294:	08004380 	.word	0x08004380
 8002298:	08004390 	.word	0x08004390
 800229c:	20000be0 	.word	0x20000be0

080022a0 <statusApp>:
}

static void statusApp(BaseSequentialStream *chp, int argc, char *argv[]) {
//  uint8_t cmm[5]={'[','4','1','m','\0'};
  (void)argv;
  if (argc > 0) {
 80022a0:	2900      	cmp	r1, #0
 80022a2:	dd02      	ble.n	80022aa <statusApp+0xa>
    chprintf(chp, "Usage: enc\r\n");
 80022a4:	4921      	ldr	r1, [pc, #132]	; (800232c <statusApp+0x8c>)
 80022a6:	f7ff bf0b 	b.w	80020c0 <chprintf.lto_priv.75>
    chprintf(chp, "Value : %5d\r",encv);
    chThdSleepMilliseconds(500);
  }
}

static void statusApp(BaseSequentialStream *chp, int argc, char *argv[]) {
 80022aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: enc\r\n");
    return;
  }
  chprintf((BaseSequentialStream *)&SDU1, "Error: %x\r\n",init_errors);
 80022ac:	4b20      	ldr	r3, [pc, #128]	; (8002330 <statusApp+0x90>)
    chprintf(chp, "Value : %5d\r",encv);
    chThdSleepMilliseconds(500);
  }
}

static void statusApp(BaseSequentialStream *chp, int argc, char *argv[]) {
 80022ae:	b085      	sub	sp, #20
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: enc\r\n");
    return;
  }
  chprintf((BaseSequentialStream *)&SDU1, "Error: %x\r\n",init_errors);
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4920      	ldr	r1, [pc, #128]	; (8002334 <statusApp+0x94>)
 80022b4:	4820      	ldr	r0, [pc, #128]	; (8002338 <statusApp+0x98>)
 80022b6:	f7ff ff03 	bl	80020c0 <chprintf.lto_priv.75>
//#define TX_MODE

void printNrfAdd(void)
{
  int i;
  chprintf((BaseSequentialStream *)&SDU1, "\033[1;32m\r\n");
 80022ba:	481f      	ldr	r0, [pc, #124]	; (8002338 <statusApp+0x98>)
 80022bc:	491f      	ldr	r1, [pc, #124]	; (800233c <statusApp+0x9c>)
 80022be:	f001 fc4f 	bl	8003b60 <chprintf.constprop.2>
 80022c2:	4c1f      	ldr	r4, [pc, #124]	; (8002340 <statusApp+0xa0>)
 80022c4:	4f1f      	ldr	r7, [pc, #124]	; (8002344 <statusApp+0xa4>)
  for(i=0;i<6;i++)
 80022c6:	2500      	movs	r5, #0
  {
    rf_read_reg(NRF_REG_RX_ADDR_P0 + i, rx_addr[i], address_length);
 80022c8:	f105 000a 	add.w	r0, r5, #10
 80022cc:	4621      	mov	r1, r4
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	f7ff fab6 	bl	8001840 <rf_read_reg>
    {
      chprintf((BaseSequentialStream *)&SDU1, "Rx_add[%d] : 0x%X 0x%X 0x%X 0x%X 0x%X\r\n",i,rx_addr[i][0],rx_addr[i][1],rx_addr[i][2],rx_addr[i][3],rx_addr[i][4]);
 80022d4:	78a0      	ldrb	r0, [r4, #2]
 80022d6:	78e1      	ldrb	r1, [r4, #3]
 80022d8:	7922      	ldrb	r2, [r4, #4]
 80022da:	7866      	ldrb	r6, [r4, #1]
 80022dc:	7823      	ldrb	r3, [r4, #0]
 80022de:	9001      	str	r0, [sp, #4]
 80022e0:	9102      	str	r1, [sp, #8]
 80022e2:	9203      	str	r2, [sp, #12]
 80022e4:	9600      	str	r6, [sp, #0]
 80022e6:	462a      	mov	r2, r5
 80022e8:	4813      	ldr	r0, [pc, #76]	; (8002338 <statusApp+0x98>)
 80022ea:	4917      	ldr	r1, [pc, #92]	; (8002348 <statusApp+0xa8>)

void printNrfAdd(void)
{
  int i;
  chprintf((BaseSequentialStream *)&SDU1, "\033[1;32m\r\n");
  for(i=0;i<6;i++)
 80022ec:	3501      	adds	r5, #1
  {
    rf_read_reg(NRF_REG_RX_ADDR_P0 + i, rx_addr[i], address_length);
    {
      chprintf((BaseSequentialStream *)&SDU1, "Rx_add[%d] : 0x%X 0x%X 0x%X 0x%X 0x%X\r\n",i,rx_addr[i][0],rx_addr[i][1],rx_addr[i][2],rx_addr[i][3],rx_addr[i][4]);
 80022ee:	f001 fc37 	bl	8003b60 <chprintf.constprop.2>

void printNrfAdd(void)
{
  int i;
  chprintf((BaseSequentialStream *)&SDU1, "\033[1;32m\r\n");
  for(i=0;i<6;i++)
 80022f2:	2d06      	cmp	r5, #6
 80022f4:	f104 0405 	add.w	r4, r4, #5
 80022f8:	d1e6      	bne.n	80022c8 <statusApp+0x28>
    rf_read_reg(NRF_REG_RX_ADDR_P0 + i, rx_addr[i], address_length);
    {
      chprintf((BaseSequentialStream *)&SDU1, "Rx_add[%d] : 0x%X 0x%X 0x%X 0x%X 0x%X\r\n",i,rx_addr[i][0],rx_addr[i][1],rx_addr[i][2],rx_addr[i][3],rx_addr[i][4]);
    }
  }
  rf_read_reg(NRF_REG_TX_ADDR, tx_addr, 3);
 80022fa:	4c14      	ldr	r4, [pc, #80]	; (800234c <statusApp+0xac>)
 80022fc:	2010      	movs	r0, #16
 80022fe:	4621      	mov	r1, r4
 8002300:	2203      	movs	r2, #3
 8002302:	f7ff fa9d 	bl	8001840 <rf_read_reg>
  chprintf((BaseSequentialStream *)&SDU1, "Tx_add : 0x%X 0x%X 0x%X 0x%X 0x%X\r\n",tx_addr[0],tx_addr[1],tx_addr[2],tx_addr[3],tx_addr[4]);
 8002306:	78e0      	ldrb	r0, [r4, #3]
 8002308:	7921      	ldrb	r1, [r4, #4]
 800230a:	78a5      	ldrb	r5, [r4, #2]
 800230c:	7822      	ldrb	r2, [r4, #0]
 800230e:	7863      	ldrb	r3, [r4, #1]
 8002310:	9001      	str	r0, [sp, #4]
 8002312:	9102      	str	r1, [sp, #8]
 8002314:	9500      	str	r5, [sp, #0]
 8002316:	490e      	ldr	r1, [pc, #56]	; (8002350 <statusApp+0xb0>)
 8002318:	4807      	ldr	r0, [pc, #28]	; (8002338 <statusApp+0x98>)
 800231a:	f001 fc21 	bl	8003b60 <chprintf.constprop.2>
  chprintf((BaseSequentialStream *)&SDU1, "\033[0m\r\n");
 800231e:	4806      	ldr	r0, [pc, #24]	; (8002338 <statusApp+0x98>)
 8002320:	490c      	ldr	r1, [pc, #48]	; (8002354 <statusApp+0xb4>)
//  chprintf((BaseSequentialStream *)&SDU1, "\033[1;32mbold green text\033[0m plain text\n");
//  chprintf((BaseSequentialStream *)&SDU1, "%s",cmm);/
//  chprintf((BaseSequentialStream *)&SDU1, "\033[1;34msmso blue text\033[0m plain text\n");

  printNrfAdd();
}
 8002322:	b005      	add	sp, #20
 8002324:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8002328:	f001 bc1a 	b.w	8003b60 <chprintf.constprop.2>
 800232c:	08004390 	.word	0x08004390
 8002330:	20000bf0 	.word	0x20000bf0
 8002334:	080043a0 	.word	0x080043a0
 8002338:	20000dd0 	.word	0x20000dd0
 800233c:	080043ac 	.word	0x080043ac
 8002340:	20000c04 	.word	0x20000c04
 8002344:	20000db0 	.word	0x20000db0
 8002348:	080043b8 	.word	0x080043b8
 800234c:	20000b54 	.word	0x20000b54
 8002350:	080043e0 	.word	0x080043e0
 8002354:	08004404 	.word	0x08004404
	...

08002360 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8002360:	2100      	movs	r1, #0
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 8002362:	460a      	mov	r2, r1
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8002364:	4608      	mov	r0, r1
    _stm32_dma_streams[i].channel->CCR = 0;
 8002366:	460e      	mov	r6, r1
 8002368:	4bb9      	ldr	r3, [pc, #740]	; (8002650 <main+0x2f0>)
 800236a:	f04f 34ff 	mov.w	r4, #4294967295
 800236e:	691d      	ldr	r5, [r3, #16]
    chThdSleepMilliseconds(time);
  }
}


int __attribute__((noreturn)) main(void) {
 8002370:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002374:	611c      	str	r4, [r3, #16]
 8002376:	6119      	str	r1, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8002378:	68dd      	ldr	r5, [r3, #12]
 800237a:	60dc      	str	r4, [r3, #12]
 800237c:	60d9      	str	r1, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800237e:	69dc      	ldr	r4, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002380:	4db4      	ldr	r5, [pc, #720]	; (8002654 <main+0x2f4>)
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8002382:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8002386:	61dc      	str	r4, [r3, #28]
  rccEnableBKPInterface(FALSE);
 8002388:	69dc      	ldr	r4, [r3, #28]
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800238a:	4fb3      	ldr	r7, [pc, #716]	; (8002658 <main+0x2f8>)
 800238c:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8002390:	61dc      	str	r4, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002392:	682b      	ldr	r3, [r5, #0]
 8002394:	f8df e330 	ldr.w	lr, [pc, #816]	; 80026c8 <main+0x368>
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	4caf      	ldr	r4, [pc, #700]	; (800265c <main+0x2fc>)
 800239e:	602b      	str	r3, [r5, #0]
 80023a0:	b08d      	sub	sp, #52	; 0x34
 80023a2:	6039      	str	r1, [r7, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80023a4:	f85e 3002 	ldr.w	r3, [lr, r2]
 80023a8:	2100      	movs	r1, #0
 80023aa:	601e      	str	r6, [r3, #0]
    dma_isr_redir[i].dma_func = NULL;
 80023ac:	f844 6030 	str.w	r6, [r4, r0, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80023b0:	3001      	adds	r0, #1
 80023b2:	2807      	cmp	r0, #7
 80023b4:	f102 020c 	add.w	r2, r2, #12
 80023b8:	d1f4      	bne.n	80023a4 <main+0x44>
#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80023ba:	f241 0b0a 	movw	fp, #4106	; 0x100a
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80023be:	f241 0918 	movw	r9, #4120	; 0x1018
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80023c2:	468c      	mov	ip, r1
    _stm32_dma_streams[i].channel->CCR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFF;
 80023c4:	4ba6      	ldr	r3, [pc, #664]	; (8002660 <main+0x300>)
 80023c6:	f04f 32ff 	mov.w	r2, #4294967295
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80023ca:	f8df e284 	ldr.w	lr, [pc, #644]	; 8002650 <main+0x2f0>
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	f8de 6018 	ldr.w	r6, [lr, #24]
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80023d4:	4ba3      	ldr	r3, [pc, #652]	; (8002664 <main+0x304>)

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80023d6:	4da4      	ldr	r5, [pc, #656]	; (8002668 <main+0x308>)
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 80023d8:	48a4      	ldr	r0, [pc, #656]	; (800266c <main+0x30c>)
  GPIOB->CRH = config->PBData.crh;
 80023da:	4fa5      	ldr	r7, [pc, #660]	; (8002670 <main+0x310>)

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80023dc:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 80026cc <main+0x36c>
  GPIOA->CRL = config->PAData.crl;
 80023e0:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 80026d0 <main+0x370>
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80023e4:	f046 067d 	orr.w	r6, r6, #125	; 0x7d
 80023e8:	f8ce 6018 	str.w	r6, [lr, #24]
  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80023ec:	4ca1      	ldr	r4, [pc, #644]	; (8002674 <main+0x314>)

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80023ee:	60ea      	str	r2, [r5, #12]
  spip->config = NULL;
 80023f0:	6059      	str	r1, [r3, #4]
  GPIOA->CRH = config->PAData.crh;
 80023f2:	f8c5 a004 	str.w	sl, [r5, #4]
  GPIOA->CRL = config->PAData.crl;
 80023f6:	f8c5 8000 	str.w	r8, [r5]
  GPIOB->ODR = config->PBData.odr;
 80023fa:	60c2      	str	r2, [r0, #12]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 80023fc:	6099      	str	r1, [r3, #8]
  GPIOB->CRH = config->PBData.crh;
 80023fe:	6047      	str	r7, [r0, #4]
 8002400:	6159      	str	r1, [r3, #20]
  GPIOB->CRL = config->PBData.crl;
 8002402:	6007      	str	r7, [r0, #0]

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8002404:	4f9c      	ldr	r7, [pc, #624]	; (8002678 <main+0x318>)
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 8002406:	f04f 3088 	mov.w	r0, #2290649224	; 0x88888888
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 800240a:	f5ae 3e80 	sub.w	lr, lr, #65536	; 0x10000
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 800240e:	4e9b      	ldr	r6, [pc, #620]	; (800267c <main+0x31c>)
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8002410:	f8ce 200c 	str.w	r2, [lr, #12]
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8002414:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 80026d4 <main+0x374>

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8002418:	61df      	str	r7, [r3, #28]
  GPIOC->CRH = config->PCData.crh;
 800241a:	f8ce 0004 	str.w	r0, [lr, #4]
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 800241e:	4f98      	ldr	r7, [pc, #608]	; (8002680 <main+0x320>)
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8002420:	621c      	str	r4, [r3, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8002422:	340c      	adds	r4, #12
  GPIOC->CRL = config->PCData.crl;
 8002424:	f8ce 0000 	str.w	r0, [lr]
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002428:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 800242c:	60f2      	str	r2, [r6, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800242e:	f103 0e0c 	add.w	lr, r3, #12
 8002432:	625c      	str	r4, [r3, #36]	; 0x24
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8002434:	f50a 7a63 	add.w	sl, sl, #908	; 0x38c
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8002438:	2401      	movs	r4, #1
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
 800243a:	6070      	str	r0, [r6, #4]
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800243c:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  GPIOD->CRL = config->PDData.crl;
 8002440:	f8c6 a000 	str.w	sl, [r6]
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8002444:	f8c3 902c 	str.w	r9, [r3, #44]	; 0x2c
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002448:	60ea      	str	r2, [r5, #12]
 800244a:	f8c3 e00c 	str.w	lr, [r3, #12]
  GPIOE->CRH = config->PEData.crh;
 800244e:	6068      	str	r0, [r5, #4]
  tqp->p_prev = (thread_t *)tqp;
 8002450:	f8c3 e010 	str.w	lr, [r3, #16]
  GPIOE->CRL = config->PEData.crl;
 8002454:	6028      	str	r0, [r5, #0]
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8002456:	f8a8 2000 	strh.w	r2, [r8]
 800245a:	701c      	strb	r4, [r3, #0]
  usbp->config       = NULL;
 800245c:	6079      	str	r1, [r7, #4]
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 800245e:	703c      	strb	r4, [r7, #0]
 8002460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002464:	f107 0244 	add.w	r2, r7, #68	; 0x44
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002468:	f843 cf04 	str.w	ip, [r3, #4]!
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 800246c:	4293      	cmp	r3, r2
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
 800246e:	f8c3 c01c 	str.w	ip, [r3, #28]
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002472:	f04f 0600 	mov.w	r6, #0
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002476:	d1f7      	bne.n	8002468 <main+0x108>
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002478:	f64f 75ff 	movw	r5, #65535	; 0xffff

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800247c:	f648 4b9f 	movw	fp, #35999	; 0x8c9f
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8002480:	f64f 01ff 	movw	r1, #63743	; 0xf8ff

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002484:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8002650 <main+0x2f0>

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002488:	f8df a24c 	ldr.w	sl, [pc, #588]	; 80026d8 <main+0x378>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800248c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8002490:	4a7c      	ldr	r2, [pc, #496]	; (8002684 <main+0x324>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	f8c8 301c 	str.w	r3, [r8, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800249a:	f8da 4004 	ldr.w	r4, [sl, #4]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800249e:	487a      	ldr	r0, [pc, #488]	; (8002688 <main+0x328>)

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80024a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80024a4:	f04f 0901 	mov.w	r9, #1
 80024a8:	f04f 0c80 	mov.w	ip, #128	; 0x80
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80024ac:	f04f 5e80 	mov.w	lr, #268435456	; 0x10000000

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80024b0:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80024b4:	f8ca 4004 	str.w	r4, [sl, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80024b8:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80024bc:	62dd      	str	r5, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80024be:	619e      	str	r6, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80024c0:	635e      	str	r6, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80024c2:	60de      	str	r6, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 80024c4:	605e      	str	r6, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80024c6:	f8c3 9014 	str.w	r9, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80024ca:	f8c3 9000 	str.w	r9, [r3]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80024ce:	f880 c31c 	strb.w	ip, [r0, #796]	; 0x31c
 80024d2:	f8cd c004 	str.w	ip, [sp, #4]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80024d6:	f8c0 e180 	str.w	lr, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80024da:	f8c0 e000 	str.w	lr, [r0]
 80024de:	6096      	str	r6, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e0:	68d0      	ldr	r0, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80024e2:	4b6a      	ldr	r3, [pc, #424]	; (800268c <main+0x32c>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80024e4:	4001      	ands	r1, r0
  reg_value  =  (reg_value                                 |
 80024e6:	430b      	orrs	r3, r1

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80024e8:	4969      	ldr	r1, [pc, #420]	; (8002690 <main+0x330>)
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80024ea:	60d3      	str	r3, [r2, #12]
 80024ec:	68cb      	ldr	r3, [r1, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80024ee:	4869      	ldr	r0, [pc, #420]	; (8002694 <main+0x334>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80024f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f4:	60cb      	str	r3, [r1, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80024f6:	6803      	ldr	r3, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80024f8:	f04f 0e10 	mov.w	lr, #16
 80024fc:	ea43 0309 	orr.w	r3, r3, r9
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 8002500:	813e      	strh	r6, [r7, #8]
  usbp->receiving    = 0;
 8002502:	817e      	strh	r6, [r7, #10]
 8002504:	6003      	str	r3, [r0, #0]
 8002506:	f882 e01f 	strb.w	lr, [r2, #31]
 800250a:	f04f 0e20 	mov.w	lr, #32
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800250e:	4c62      	ldr	r4, [pc, #392]	; (8002698 <main+0x338>)
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8002510:	f04f 33ff 	mov.w	r3, #4294967295
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8002514:	f104 011c 	add.w	r1, r4, #28
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8002518:	a806      	add	r0, sp, #24

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800251a:	f04f 0a00 	mov.w	sl, #0
 800251e:	f04f 0b00 	mov.w	fp, #0
  tqp->p_prev = (thread_t *)tqp;
 8002522:	6064      	str	r4, [r4, #4]
 8002524:	f882 e022 	strb.w	lr, [r2, #34]	; 0x22
 8002528:	61e1      	str	r1, [r4, #28]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800252a:	60a6      	str	r6, [r4, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800252c:	6024      	str	r4, [r4, #0]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 800252e:	6124      	str	r4, [r4, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8002530:	6164      	str	r4, [r4, #20]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002532:	6221      	str	r1, [r4, #32]
 8002534:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8002538:	9306      	str	r3, [sp, #24]
  ch.vtlist.vt_delta = (systime_t)-1;
 800253a:	84a5      	strh	r5, [r4, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800253c:	84e6      	strh	r6, [r4, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800253e:	6726      	str	r6, [r4, #112]	; 0x70
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8002540:	9607      	str	r6, [sp, #28]
  tmp->last       = (rtcnt_t)0;
 8002542:	9608      	str	r6, [sp, #32]
  tmp->n          = (ucnt_t)0;
 8002544:	9609      	str	r6, [sp, #36]	; 0x24
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8002546:	f001 f9f3 	bl	8003930 <chTMStartMeasurementX.constprop.52>
  chTMStopMeasurementX(&tm);
 800254a:	a806      	add	r0, sp, #24
 800254c:	f7fe fb20 	bl	8000b90 <chTMStopMeasurementX>
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8002550:	4a52      	ldr	r2, [pc, #328]	; (800269c <main+0x33c>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8002552:	4d53      	ldr	r5, [pc, #332]	; (80026a0 <main+0x340>)
 8002554:	f022 0b07 	bic.w	fp, r2, #7
 8002558:	4952      	ldr	r1, [pc, #328]	; (80026a4 <main+0x344>)
  ch.tm.offset = tm.last;
 800255a:	9a08      	ldr	r2, [sp, #32]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800255c:	6960      	ldr	r0, [r4, #20]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800255e:	4b52      	ldr	r3, [pc, #328]	; (80026a8 <main+0x348>)
 8002560:	f105 0e10 	add.w	lr, r5, #16
 8002564:	6722      	str	r2, [r4, #112]	; 0x70
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002566:	f04f 0a40 	mov.w	sl, #64	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800256a:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 800256e:	f8df c16c 	ldr.w	ip, [pc, #364]	; 80026dc <main+0x37c>
 8002572:	6029      	str	r1, [r5, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8002574:	494d      	ldr	r1, [pc, #308]	; (80026ac <main+0x34c>)
 8002576:	f8c5 e010 	str.w	lr, [r5, #16]
  tqp->p_prev = (thread_t *)tqp;
 800257a:	f8c5 e014 	str.w	lr, [r5, #20]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800257e:	f023 0307 	bic.w	r3, r3, #7
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002582:	f884 6049 	strb.w	r6, [r4, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8002586:	6666      	str	r6, [r4, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8002588:	6626      	str	r6, [r4, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800258a:	f884 904a 	strb.w	r9, [r4, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800258e:	6466      	str	r6, [r4, #68]	; 0x44
  REG_INSERT(tp);
 8002590:	63e4      	str	r4, [r4, #60]	; 0x3c
 8002592:	6420      	str	r0, [r4, #64]	; 0x40
 8002594:	61ae      	str	r6, [r5, #24]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002596:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800259a:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800259e:	f104 0e50 	add.w	lr, r4, #80	; 0x50
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80025a2:	6102      	str	r2, [r0, #16]
 80025a4:	6162      	str	r2, [r4, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 80025a6:	61a2      	str	r2, [r4, #24]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80025a8:	f104 0254 	add.w	r2, r4, #84	; 0x54
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80025ac:	f8c1 b000 	str.w	fp, [r1]
  default_heap.h_free.h.u.next = NULL;
 80025b0:	60ae      	str	r6, [r5, #8]
  default_heap.h_free.h.size = 0;
 80025b2:	60ee      	str	r6, [r5, #12]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 80025b4:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80025b8:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80025bc:	6562      	str	r2, [r4, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 80025be:	65a2      	str	r2, [r4, #88]	; 0x58
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80025c0:	f8cc 3000 	str.w	r3, [ip]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80025c4:	f04f 0b02 	mov.w	fp, #2
 80025c8:	f386 8811 	msr	BASEPRI, r6
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80025cc:	b662      	cpsie	i
 80025ce:	4a38      	ldr	r2, [pc, #224]	; (80026b0 <main+0x350>)
 80025d0:	69a3      	ldr	r3, [r4, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 80025d2:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80025d6:	619a      	str	r2, [r3, #24]
 80025d8:	21d8      	movs	r1, #216	; 0xd8
 80025da:	464a      	mov	r2, r9
 80025dc:	4b35      	ldr	r3, [pc, #212]	; (80026b4 <main+0x354>)
 80025de:	f001 f967 	bl	80038b0 <chThdCreateStatic.constprop.54>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 80025e2:	4b35      	ldr	r3, [pc, #212]	; (80026b8 <main+0x358>)
};


void initEncoder(void)
{
  palSetPadMode(ENC1_PORT_PINA, ENC1_PIN_PINA, PAL_MODE_INPUT);
 80025e4:	4651      	mov	r1, sl
 80025e6:	6183      	str	r3, [r0, #24]
 80025e8:	465a      	mov	r2, fp
 80025ea:	4820      	ldr	r0, [pc, #128]	; (800266c <main+0x30c>)
 80025ec:	f001 f8f8 	bl	80037e0 <_pal_lld_setgroupmode>
  palSetPadMode(ENC1_PORT_PINB, ENC1_PIN_PINB, PAL_MODE_INPUT);
 80025f0:	f8dd c004 	ldr.w	ip, [sp, #4]
 80025f4:	465a      	mov	r2, fp
 80025f6:	4661      	mov	r1, ip
 80025f8:	481c      	ldr	r0, [pc, #112]	; (800266c <main+0x30c>)
 80025fa:	f001 f8f1 	bl	80037e0 <_pal_lld_setgroupmode>
 *
 * @init
 */
void qeiObjectInit(QEIDriver *qeip) {

  qeip->state = QEI_STOP;
 80025fe:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <main+0x35c>)
#endif

#if STM32_QEI_USE_TIM4
  /* Driver initialization.*/
  qeiObjectInit(&QEID4);
  QEID4.tim = STM32_TIM4;
 8002600:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <main+0x360>)
 8002602:	f882 9000 	strb.w	r9, [r2]
 8002606:	6093      	str	r3, [r2, #8]
  qeip->last = 0;
 8002608:	8056      	strh	r6, [r2, #2]
  qeip->config = NULL;
 800260a:	6056      	str	r6, [r2, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800260c:	2320      	movs	r3, #32
 800260e:	f383 8811 	msr	BASEPRI, r3
 */
void qei_lld_start(QEIDriver *qeip) {
  osalDbgAssert((qeip->config->min == 0) || (qeip->config->max == 0),
		"only min/max set to 0 is supported");

  if (qeip->state == QEI_STOP) {
 8002612:	7813      	ldrb	r3, [r2, #0]
  osalDbgCheck((qeip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((qeip->state == QEI_STOP) || (qeip->state == QEI_READY),
                "invalid state");
  qeip->config = config;
 8002614:	482b      	ldr	r0, [pc, #172]	; (80026c4 <main+0x364>)
 8002616:	454b      	cmp	r3, r9
 8002618:	6050      	str	r0, [r2, #4]
 800261a:	f000 8397 	beq.w	8002d4c <main+0x9ec>
   /* Timer configuration.*/
  qeip->tim->CR1  = 0;                      /* Initially stopped.           */
  qeip->tim->CR2  = 0;
  qeip->tim->PSC  = 0;
  qeip->tim->DIER = 0;
  qeip->tim->ARR   = 0xFFFF;
 800261e:	f64f 76ff 	movw	r6, #65535	; 0xffff
      rccResetTIM8();
    }
#endif
  }
   /* Timer configuration.*/
  qeip->tim->CR1  = 0;                      /* Initially stopped.           */
 8002622:	6893      	ldr	r3, [r2, #8]
 8002624:	2100      	movs	r1, #0
 8002626:	6019      	str	r1, [r3, #0]
  qeip->tim->CR2  = 0;
 8002628:	6059      	str	r1, [r3, #4]
  qeip->tim->PSC  = 0;
 800262a:	6299      	str	r1, [r3, #40]	; 0x28
  qeip->tim->DIER = 0;
 800262c:	60d9      	str	r1, [r3, #12]
  qeip->tim->ARR   = 0xFFFF;
 800262e:	62de      	str	r6, [r3, #44]	; 0x2c

  /* Set Capture Compare 1 and Capture Compare 2 as input. */
   qeip->tim->CCMR1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002630:	6999      	ldr	r1, [r3, #24]

  if (qeip->config->mode == QEI_MODE_QUADRATURE) {
 8002632:	7806      	ldrb	r6, [r0, #0]
  qeip->tim->PSC  = 0;
  qeip->tim->DIER = 0;
  qeip->tim->ARR   = 0xFFFF;

  /* Set Capture Compare 1 and Capture Compare 2 as input. */
   qeip->tim->CCMR1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002634:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002638:	f041 0101 	orr.w	r1, r1, #1
 800263c:	6199      	str	r1, [r3, #24]

  if (qeip->config->mode == QEI_MODE_QUADRATURE) {
 800263e:	4921      	ldr	r1, [pc, #132]	; (80026c4 <main+0x364>)
 8002640:	2e00      	cmp	r6, #0
 8002642:	d14d      	bne.n	80026e0 <main+0x380>
    if (qeip->config->resolution == QEI_BOTH_EDGES)
 8002644:	7849      	ldrb	r1, [r1, #1]
 8002646:	2901      	cmp	r1, #1
 8002648:	f000 838f 	beq.w	8002d6a <main+0xa0a>
 800264c:	e048      	b.n	80026e0 <main+0x380>
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
 8002654:	40007000 	.word	0x40007000
 8002658:	200011e8 	.word	0x200011e8
 800265c:	20001180 	.word	0x20001180
 8002660:	40020000 	.word	0x40020000
 8002664:	200011b8 	.word	0x200011b8
 8002668:	40010800 	.word	0x40010800
 800266c:	40010c00 	.word	0x40010c00
 8002670:	88888838 	.word	0x88888838
 8002674:	0800429c 	.word	0x0800429c
 8002678:	40013000 	.word	0x40013000
 800267c:	40011400 	.word	0x40011400
 8002680:	20000b5c 	.word	0x20000b5c
 8002684:	e000ed00 	.word	0xe000ed00
 8002688:	e000e100 	.word	0xe000e100
 800268c:	05fa0300 	.word	0x05fa0300
 8002690:	e000edf0 	.word	0xe000edf0
 8002694:	e0001000 	.word	0xe0001000
 8002698:	20001030 	.word	0x20001030
 800269c:	20005000 	.word	0x20005000
 80026a0:	20000c28 	.word	0x20000c28
 80026a4:	08000321 	.word	0x08000321
 80026a8:	200011f7 	.word	0x200011f7
 80026ac:	20000bf4 	.word	0x20000bf4
 80026b0:	08004300 	.word	0x08004300
 80026b4:	080003d1 	.word	0x080003d1
 80026b8:	0800440c 	.word	0x0800440c
 80026bc:	20000be0 	.word	0x20000be0
 80026c0:	40000800 	.word	0x40000800
 80026c4:	20000824 	.word	0x20000824
 80026c8:	08004290 	.word	0x08004290
 80026cc:	888884b8 	.word	0x888884b8
 80026d0:	88884b88 	.word	0x88884b88
 80026d4:	20001028 	.word	0x20001028
 80026d8:	e0042000 	.word	0xe0042000
 80026dc:	20000c48 	.word	0x20000c48
    else
      qeip->tim->SMCR  = TIM_SMCR_SMS_0;
  } else {
    /* Direction/Clock mode.
     * Direction input on TI1, Clock input on TI2. */
    qeip->tim->SMCR  = TIM_SMCR_SMS_0;
 80026e0:	2101      	movs	r1, #1
 80026e2:	6099      	str	r1, [r3, #8]
  }

  if (qeip->config->dirinv == QEI_DIRINV_TRUE)
 80026e4:	7881      	ldrb	r1, [r0, #2]
  qei_lld_start(qeip);
  qeip->state = QEI_READY;
 80026e6:	2602      	movs	r6, #2
 80026e8:	2901      	cmp	r1, #1
    qeip->tim->CCER = TIM_CCER_CC1E | TIM_CCER_CC1P | TIM_CCER_CC2E;
 80026ea:	bf0c      	ite	eq
 80026ec:	2113      	moveq	r1, #19
  else
    qeip->tim->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E;
 80026ee:	2111      	movne	r1, #17
 80026f0:	6219      	str	r1, [r3, #32]
 80026f2:	f04f 0a00 	mov.w	sl, #0
 80026f6:	7016      	strb	r6, [r2, #0]
 80026f8:	f38a 8811 	msr	BASEPRI, sl
 80026fc:	2320      	movs	r3, #32
 80026fe:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void qei_lld_enable(QEIDriver *qeip) {

  qeip->tim->CR1 = TIM_CR1_CEN;            /* Timer enabled.               */
 8002702:	6893      	ldr	r3, [r2, #8]
 8002704:	f04f 0801 	mov.w	r8, #1
  osalDbgCheck(qeip != NULL);

  osalSysLock();
  osalDbgAssert(qeip->state == QEI_READY, "invalid state");
  qei_lld_enable(qeip);
  qeip->state = QEI_ACTIVE;
 8002708:	f04f 0903 	mov.w	r9, #3
 800270c:	f8c3 8000 	str.w	r8, [r3]
 8002710:	f882 9000 	strb.w	r9, [r2]
 8002714:	f38a 8811 	msr	BASEPRI, sl
}

//-----------------------------------------------------------------------------
void lcd_2x16_init(void)
{
	palSetGroupMode(LCD_PORT, LCD_PINS, 0, LCD_PORT_MODE);
 8002718:	f8df b340 	ldr.w	fp, [pc, #832]	; 8002a5c <main+0x6fc>
 800271c:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002720:	2206      	movs	r2, #6
 8002722:	4658      	mov	r0, fp
 8002724:	f001 f85c 	bl	80037e0 <_pal_lld_setgroupmode>
	pal_lld_clearport(LCD_PORT, LCD_PINS);
 8002728:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800272c:	f8cb 3014 	str.w	r3, [fp, #20]

	chThdSleepMilliseconds(10);
 8002730:	2014      	movs	r0, #20
 8002732:	f7fe fc55 	bl	8000fe0 <chThdSleep>

    lcd_2x16_write_command(0x03);
 8002736:	4648      	mov	r0, r9
 8002738:	f7ff f86a 	bl	8001810 <lcd_2x16_write_command>
    chThdSleepMilliseconds(10);
 800273c:	2014      	movs	r0, #20
 800273e:	f7fe fc4f 	bl	8000fe0 <chThdSleep>

    lcd_2x16_write_command(0x03);
 8002742:	4648      	mov	r0, r9
 8002744:	f7ff f864 	bl	8001810 <lcd_2x16_write_command>
    chThdSleepMilliseconds(10);
 8002748:	2014      	movs	r0, #20
 800274a:	f7fe fc49 	bl	8000fe0 <chThdSleep>

    lcd_2x16_write_command(0x03);
 800274e:	4648      	mov	r0, r9
 8002750:	f7ff f85e 	bl	8001810 <lcd_2x16_write_command>
    chThdSleepMilliseconds(10);
 8002754:	2014      	movs	r0, #20
 8002756:	f7fe fc43 	bl	8000fe0 <chThdSleep>

    lcd_2x16_write_command(0x02);
 800275a:	4630      	mov	r0, r6
 800275c:	f7ff f858 	bl	8001810 <lcd_2x16_write_command>
    chThdSleepMilliseconds(10);
 8002760:	2014      	movs	r0, #20
 8002762:	f7fe fc3d 	bl	8000fe0 <chThdSleep>

    lcd_2x16_write_command(0x28);
 8002766:	2028      	movs	r0, #40	; 0x28
 8002768:	f7ff f852 	bl	8001810 <lcd_2x16_write_command>
    chThdSleepMilliseconds(10);
 800276c:	2014      	movs	r0, #20
 800276e:	f7fe fc37 	bl	8000fe0 <chThdSleep>

    lcd_2x16_write_command(0x01);
 8002772:	4640      	mov	r0, r8
 8002774:	f7ff f84c 	bl	8001810 <lcd_2x16_write_command>
    chThdSleepMilliseconds(10);
 8002778:	2014      	movs	r0, #20
 800277a:	f7fe fc31 	bl	8000fe0 <chThdSleep>

    lcd_2x16_write_command(0x0c);
 800277e:	200c      	movs	r0, #12
 8002780:	f7ff f846 	bl	8001810 <lcd_2x16_write_command>
    chThdSleepMilliseconds(10);
 8002784:	2014      	movs	r0, #20
 8002786:	f7fe fc2b 	bl	8000fe0 <chThdSleep>
  chSysInit();

  /*Other Init*/
  initEncoder();
  lcd_2x16_init();
  nrf_driver_init();
 800278a:	f7ff f8b1 	bl	80018f0 <nrf_driver_init>
	nrf_conf.address[0] = APPCONF_NRF_ADDR_B0;
	nrf_conf.address[1] = APPCONF_NRF_ADDR_B1;
	nrf_conf.address[2] = APPCONF_NRF_ADDR_B2;
	nrf_conf.send_crc_ack = APPCONF_NRF_SEND_CRC_ACK;

	if (init_done) {
 800278e:	4baf      	ldr	r3, [pc, #700]	; (8002a4c <main+0x6ec>)
	init_done = false;
}

void rfhelp_update_conf(void) {

	nrf_conf.speed = APPCONF_NRF_SPEED;
 8002790:	4eaf      	ldr	r6, [pc, #700]	; (8002a50 <main+0x6f0>)
	nrf_conf.address[0] = APPCONF_NRF_ADDR_B0;
	nrf_conf.address[1] = APPCONF_NRF_ADDR_B1;
	nrf_conf.address[2] = APPCONF_NRF_ADDR_B2;
	nrf_conf.send_crc_ack = APPCONF_NRF_SEND_CRC_ACK;

	if (init_done) {
 8002792:	781b      	ldrb	r3, [r3, #0]
	nrf_conf.speed = APPCONF_NRF_SPEED;
	nrf_conf.power = APPCONF_NRF_POWER;
	nrf_conf.crc_type = APPCONF_NRF_CRC;
	nrf_conf.retry_delay = APPCONF_NRF_RETR_DELAY;
	nrf_conf.retries = APPCONF_NRF_RETRIES;
	nrf_conf.channel = APPCONF_NRF_CHANNEL;
 8002794:	f04f 0e4c 	mov.w	lr, #76	; 0x4c
	nrf_conf.address[0] = APPCONF_NRF_ADDR_B0;
 8002798:	2025      	movs	r0, #37	; 0x25
	nrf_conf.address[1] = APPCONF_NRF_ADDR_B1;
 800279a:	2126      	movs	r1, #38	; 0x26
	nrf_conf.address[2] = APPCONF_NRF_ADDR_B2;
 800279c:	2227      	movs	r2, #39	; 0x27
	init_done = false;
}

void rfhelp_update_conf(void) {

	nrf_conf.speed = APPCONF_NRF_SPEED;
 800279e:	f886 8000 	strb.w	r8, [r6]
	nrf_conf.power = APPCONF_NRF_POWER;
 80027a2:	f886 9001 	strb.w	r9, [r6, #1]
	nrf_conf.crc_type = APPCONF_NRF_CRC;
 80027a6:	f886 8002 	strb.w	r8, [r6, #2]
	nrf_conf.retry_delay = APPCONF_NRF_RETR_DELAY;
 80027aa:	f886 a003 	strb.w	sl, [r6, #3]
	nrf_conf.retries = APPCONF_NRF_RETRIES;
 80027ae:	f886 9004 	strb.w	r9, [r6, #4]
	nrf_conf.channel = APPCONF_NRF_CHANNEL;
	nrf_conf.address[0] = APPCONF_NRF_ADDR_B0;
	nrf_conf.address[1] = APPCONF_NRF_ADDR_B1;
	nrf_conf.address[2] = APPCONF_NRF_ADDR_B2;
	nrf_conf.send_crc_ack = APPCONF_NRF_SEND_CRC_ACK;
 80027b2:	f886 8009 	strb.w	r8, [r6, #9]
	nrf_conf.speed = APPCONF_NRF_SPEED;
	nrf_conf.power = APPCONF_NRF_POWER;
	nrf_conf.crc_type = APPCONF_NRF_CRC;
	nrf_conf.retry_delay = APPCONF_NRF_RETR_DELAY;
	nrf_conf.retries = APPCONF_NRF_RETRIES;
	nrf_conf.channel = APPCONF_NRF_CHANNEL;
 80027b6:	f886 e005 	strb.w	lr, [r6, #5]
	nrf_conf.address[0] = APPCONF_NRF_ADDR_B0;
 80027ba:	71b0      	strb	r0, [r6, #6]
	nrf_conf.address[1] = APPCONF_NRF_ADDR_B1;
 80027bc:	71f1      	strb	r1, [r6, #7]
	nrf_conf.address[2] = APPCONF_NRF_ADDR_B2;
 80027be:	7232      	strb	r2, [r6, #8]
	nrf_conf.send_crc_ack = APPCONF_NRF_SEND_CRC_ACK;

	if (init_done) {
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 8171 	bne.w	8002aa8 <main+0x748>
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
 80027c6:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8002a8c <main+0x72c>
 80027ca:	4ba2      	ldr	r3, [pc, #648]	; (8002a54 <main+0x6f4>)
 80027cc:	4641      	mov	r1, r8
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80027ce:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 8002a90 <main+0x730>
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 80027d2:	f8df c2c0 	ldr.w	ip, [pc, #704]	; 8002a94 <main+0x734>
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 80027d6:	2001      	movs	r0, #1
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80027d8:	f108 0254 	add.w	r2, r8, #84	; 0x54
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
 80027dc:	f841 3b04 	str.w	r3, [r1], #4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80027e0:	f108 0e0c 	add.w	lr, r8, #12
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80027e4:	f508 73aa 	add.w	r3, r8, #340	; 0x154
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80027e8:	2600      	movs	r6, #0
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80027ea:	f44f 7980 	mov.w	r9, #256	; 0x100
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 80027ee:	f508 7a15 	add.w	sl, r8, #596	; 0x254
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 80027f2:	f888 0008 	strb.w	r0, [r8, #8]
 80027f6:	f108 0030 	add.w	r0, r8, #48	; 0x30
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80027fa:	f8c8 6014 	str.w	r6, [r8, #20]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 80027fe:	f8c8 802c 	str.w	r8, [r8, #44]	; 0x2c
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8002802:	f8c8 9038 	str.w	r9, [r8, #56]	; 0x38
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8002806:	f8c8 8050 	str.w	r8, [r8, #80]	; 0x50
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 800280a:	f8c8 b028 	str.w	fp, [r8, #40]	; 0x28
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800280e:	f8c8 a040 	str.w	sl, [r8, #64]	; 0x40
  oqp->q_notify  = onfy;
 8002812:	f8c8 c04c 	str.w	ip, [r8, #76]	; 0x4c
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8002816:	f8c8 1004 	str.w	r1, [r8, #4]
 800281a:	f8c8 e00c 	str.w	lr, [r8, #12]
  tqp->p_prev = (thread_t *)tqp;
 800281e:	f8c8 e010 	str.w	lr, [r8, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8002822:	f8c8 2018 	str.w	r2, [r8, #24]
  iqp->q_rdptr   = bp;
 8002826:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
  iqp->q_wrptr   = bp;
 800282a:	f8c8 2020 	str.w	r2, [r8, #32]
  iqp->q_top     = bp + size;
 800282e:	f8c8 301c 	str.w	r3, [r8, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8002832:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8002836:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
  oqp->q_wrptr   = bp;
 800283a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800283e:	f8c8 0030 	str.w	r0, [r8, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8002842:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
 8002846:	f04f 0920 	mov.w	r9, #32
 800284a:	f389 8811 	msr	BASEPRI, r9
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  usbp->out_params[config->bulk_out - 1U] = sdup;
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
  }
  sdup->config = config;
 800284e:	4a82      	ldr	r2, [pc, #520]	; (8002a58 <main+0x6f8>)
  sdup->state = SDU_READY;
 8002850:	2302      	movs	r3, #2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8002852:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8002856:	f8c7 8048 	str.w	r8, [r7, #72]	; 0x48
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
 800285a:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
  }
  sdup->config = config;
 800285e:	f8c8 2254 	str.w	r2, [r8, #596]	; 0x254
  sdup->state = SDU_READY;
 8002862:	f888 3008 	strb.w	r3, [r8, #8]
 8002866:	f386 8811 	msr	BASEPRI, r6


  /*USB COM Init*/
  sduObjectInit(&SDU1);
  sduStart(&SDU1, &serusbcfg);
  usbDisconnectBus(serusbcfg.usbp);
 800286a:	4b7c      	ldr	r3, [pc, #496]	; (8002a5c <main+0x6fc>)
 800286c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002870:	611a      	str	r2, [r3, #16]
  chThdSleepMilliseconds(1500);
 8002872:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002876:	f7fe fbb3 	bl	8000fe0 <chThdSleep>
 800287a:	f389 8811 	msr	BASEPRI, r9
 800287e:	4878      	ldr	r0, [pc, #480]	; (8002a60 <main+0x700>)
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 8002880:	4b78      	ldr	r3, [pc, #480]	; (8002a64 <main+0x704>)
 8002882:	4602      	mov	r2, r0
 8002884:	eb00 0a09 	add.w	sl, r0, r9
 8002888:	607b      	str	r3, [r7, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800288a:	f842 6f04 	str.w	r6, [r2, #4]!

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 800288e:	4552      	cmp	r2, sl
    usbp->epc[i] = NULL;
 8002890:	f04f 0300 	mov.w	r3, #0

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002894:	d1f9      	bne.n	800288a <main+0x52a>
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {

  if (usbp->state == USB_STOP) {
 8002896:	f897 c000 	ldrb.w	ip, [r7]
 800289a:	4a73      	ldr	r2, [pc, #460]	; (8002a68 <main+0x708>)
 800289c:	f1bc 0f01 	cmp.w	ip, #1
 80028a0:	f000 809a 	beq.w	80029d8 <main+0x678>
    usbp->epc[i] = NULL;
  }
  usb_lld_start(usbp);
  usbp->state = USB_READY;
 80028a4:	2302      	movs	r3, #2
 80028a6:	703b      	strb	r3, [r7, #0]
 80028a8:	2600      	movs	r6, #0
 80028aa:	f386 8811 	msr	BASEPRI, r6
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 80028ae:	4b6b      	ldr	r3, [pc, #428]	; (8002a5c <main+0x6fc>)
 80028b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b4:	4f6d      	ldr	r7, [pc, #436]	; (8002a6c <main+0x70c>)
 80028b6:	615a      	str	r2, [r3, #20]
  shellInit();
  /*Threads*/
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 80028b8:	486d      	ldr	r0, [pc, #436]	; (8002a70 <main+0x710>)
 80028ba:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80028be:	2240      	movs	r2, #64	; 0x40
 80028c0:	4b6c      	ldr	r3, [pc, #432]	; (8002a74 <main+0x714>)
 80028c2:	603f      	str	r7, [r7, #0]
 80028c4:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8002a98 <main+0x738>
 80028c8:	f000 fff2 	bl	80038b0 <chThdCreateStatic.constprop.54>
 80028cc:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8002a9c <main+0x73c>
 80028d0:	4f69      	ldr	r7, [pc, #420]	; (8002a78 <main+0x718>)
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 80028d2:	b146      	cbz	r6, 80028e6 <main+0x586>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
 80028d4:	7f33      	ldrb	r3, [r6, #28]
 80028d6:	2b0f      	cmp	r3, #15
 80028d8:	d05e      	beq.n	8002998 <main+0x638>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
    chThdSleepMilliseconds(1000);
 80028da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028de:	f7fe fb7f 	bl	8000fe0 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 80028e2:	2e00      	cmp	r6, #0
 80028e4:	d1f6      	bne.n	80028d4 <main+0x574>
 80028e6:	f8d8 3254 	ldr.w	r3, [r8, #596]	; 0x254
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d1f0      	bne.n	80028d4 <main+0x574>
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
 80028f2:	4862      	ldr	r0, [pc, #392]	; (8002a7c <main+0x71c>)
 80028f4:	f7fe fc8c 	bl	8001210 <chMtxLock>
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
 80028f8:	4a61      	ldr	r2, [pc, #388]	; (8002a80 <main+0x720>)

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 80028fa:	f640 00c7 	movw	r0, #2247	; 0x8c7
 80028fe:	e003      	b.n	8002908 <main+0x5a8>
 8002900:	6859      	ldr	r1, [r3, #4]
 8002902:	4281      	cmp	r1, r0
 8002904:	d84d      	bhi.n	80029a2 <main+0x642>
 8002906:	461a      	mov	r2, r3

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 8002908:	6813      	ldr	r3, [r2, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f8      	bne.n	8002900 <main+0x5a0>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 800290e:	485b      	ldr	r0, [pc, #364]	; (8002a7c <main+0x71c>)
 8002910:	f7fe fc46 	bl	80011a0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0df      	beq.n	80028da <main+0x57a>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 800291a:	f44f 600d 	mov.w	r0, #2256	; 0x8d0
 800291e:	4798      	blx	r3
    if (hp != NULL) {
 8002920:	2800      	cmp	r0, #0
 8002922:	d0da      	beq.n	80028da <main+0x57a>
      hp->h.u.heap = heapp;
      hp->h.size = size;
 8002924:	f640 03c8 	movw	r3, #2248	; 0x8c8
  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
    hp = heapp->h_provider(size + sizeof(union heap_header));
    if (hp != NULL) {
      hp->h.u.heap = heapp;
 8002928:	4a56      	ldr	r2, [pc, #344]	; (8002a84 <main+0x724>)
      hp->h.size = size;
      hp++;
 800292a:	f100 0608 	add.w	r6, r0, #8
     else fails.*/
  if (heapp->h_provider != NULL) {
    hp = heapp->h_provider(size + sizeof(union heap_header));
    if (hp != NULL) {
      hp->h.u.heap = heapp;
      hp->h.size = size;
 800292e:	e880 000c 	stmia.w	r0, {r2, r3}
                              tprio_t prio, tfunc_t pf, void *arg) {
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
  if (wsp == NULL) {
 8002932:	2e00      	cmp	r6, #0
 8002934:	d0d1      	beq.n	80028da <main+0x57a>
 8002936:	2320      	movs	r3, #32
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	2302      	movs	r3, #2
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800293e:	6960      	ldr	r0, [r4, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002940:	f606 01a4 	addw	r1, r6, #2212	; 0x8a4
 8002944:	60f1      	str	r1, [r6, #12]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002946:	f04f 0e40 	mov.w	lr, #64	; 0x40
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800294a:	f04f 0b00 	mov.w	fp, #0
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800294e:	2101      	movs	r1, #1
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002950:	7733      	strb	r3, [r6, #28]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8002952:	f106 0224 	add.w	r2, r6, #36	; 0x24
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8002956:	f106 0328 	add.w	r3, r6, #40	; 0x28
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800295a:	6170      	str	r0, [r6, #20]
 800295c:	6134      	str	r4, [r6, #16]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800295e:	f8c6 e008 	str.w	lr, [r6, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002962:	f8c6 a8a4 	str.w	sl, [r6, #2212]	; 0x8a4
 8002966:	f8c6 98a8 	str.w	r9, [r6, #2216]	; 0x8a8
 800296a:	f8c6 78c4 	str.w	r7, [r6, #2244]	; 0x8c4
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800296e:	f8c6 e03c 	str.w	lr, [r6, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 8002972:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8002976:	f8c6 b034 	str.w	fp, [r6, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800297a:	f8c6 b018 	str.w	fp, [r6, #24]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800297e:	77b1      	strb	r1, [r6, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002980:	6106      	str	r6, [r0, #16]
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8002982:	4630      	mov	r0, r6
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002984:	6272      	str	r2, [r6, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 8002986:	7771      	strb	r1, [r6, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002988:	62b3      	str	r3, [r6, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800298a:	62f3      	str	r3, [r6, #44]	; 0x2c
 800298c:	6166      	str	r6, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 800298e:	f000 ff5f 	bl	8003850 <chSchWakeupS.constprop.55>
 8002992:	f38b 8811 	msr	BASEPRI, fp
 8002996:	e7a0      	b.n	80028da <main+0x57a>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
 8002998:	4630      	mov	r0, r6
 800299a:	f7fe fca9 	bl	80012f0 <chThdRelease>
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 800299e:	2600      	movs	r6, #0
 80029a0:	e79b      	b.n	80028da <main+0x57a>

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
 80029a2:	f5b1 6f0d 	cmp.w	r1, #2256	; 0x8d0
 80029a6:	d208      	bcs.n	80029ba <main+0x65a>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	6011      	str	r1, [r2, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 80029ac:	461e      	mov	r6, r3
      H_UNLOCK(heapp);
 80029ae:	4833      	ldr	r0, [pc, #204]	; (8002a7c <main+0x71c>)
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 80029b0:	f846 5b08 	str.w	r5, [r6], #8
      H_UNLOCK(heapp);
 80029b4:	f7fe fbf4 	bl	80011a0 <chMtxUnlock>
 80029b8:	e7bb      	b.n	8002932 <main+0x5d2>
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
 80029ba:	f640 0ec8 	movw	lr, #2248	; 0x8c8
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 80029be:	681e      	ldr	r6, [r3, #0]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 80029c0:	f5a1 610d 	sub.w	r1, r1, #2256	; 0x8d0
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 80029c4:	f503 600d 	add.w	r0, r3, #2256	; 0x8d0
 80029c8:	f8c3 68d0 	str.w	r6, [r3, #2256]	; 0x8d0
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 80029cc:	f8c3 18d4 	str.w	r1, [r3, #2260]	; 0x8d4
        qp->h.u.next = fp;
 80029d0:	6010      	str	r0, [r2, #0]
        hp->h.size = size;
 80029d2:	f8c3 e004 	str.w	lr, [r3, #4]
 80029d6:	e7e9      	b.n	80029ac <main+0x64c>
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 80029d8:	469b      	mov	fp, r3
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 80029da:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002aa0 <main+0x740>
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80029de:	492a      	ldr	r1, [pc, #168]	; (8002a88 <main+0x728>)
 80029e0:	f8d9 601c 	ldr.w	r6, [r9, #28]
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 80029e4:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 8002aa4 <main+0x744>
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 80029e8:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 80029ec:	f8a2 307c 	strh.w	r3, [r2, #124]	; 0x7c
  usbp->address       = 0;
 80029f0:	f882 307e 	strb.w	r3, [r2, #126]	; 0x7e
  usbp->configuration = 0;
 80029f4:	f882 307f 	strb.w	r3, [r2, #127]	; 0x7f
  usbp->transmitting  = 0;
 80029f8:	8113      	strh	r3, [r2, #8]
  usbp->receiving     = 0;
 80029fa:	8153      	strh	r3, [r2, #10]
 80029fc:	f8c9 601c 	str.w	r6, [r9, #28]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002a00:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002a04:	f04f 09d0 	mov.w	r9, #208	; 0xd0
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8002a08:	f8ce c040 	str.w	ip, [lr, #64]	; 0x40
 8002a0c:	f881 9313 	strb.w	r9, [r1, #787]	; 0x313
 8002a10:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002a14:	f8c1 6180 	str.w	r6, [r1, #384]	; 0x180
 8002a18:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8002a1c:	600e      	str	r6, [r1, #0]
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8002a1e:	2602      	movs	r6, #2
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002a20:	f881 c314 	strb.w	ip, [r1, #788]	; 0x314
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002a24:	f8c1 9180 	str.w	r9, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8002a28:	f8c1 9000 	str.w	r9, [r1]
#if STM32_USB1_HP_NUMBER != STM32_USB1_LP_NUMBER
      nvicEnableVector(STM32_USB1_HP_NUMBER, STM32_USB_USB1_HP_IRQ_PRIORITY);
#endif
      nvicEnableVector(STM32_USB1_LP_NUMBER, STM32_USB_USB1_LP_IRQ_PRIORITY);
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
 8002a2c:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
 8002a30:	7016      	strb	r6, [r2, #0]
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8002a32:	f840 bf04 	str.w	fp, [r0, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002a36:	4582      	cmp	sl, r0
    usbp->epc[i] = NULL;
 8002a38:	f04f 0300 	mov.w	r3, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002a3c:	d1f9      	bne.n	8002a32 <main+0x6d2>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8002a3e:	480a      	ldr	r0, [pc, #40]	; (8002a68 <main+0x708>)
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002a40:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8002a44:	f000 fccc 	bl	80033e0 <usb_lld_reset>
 8002a48:	e72c      	b.n	80028a4 <main+0x544>
 8002a4a:	bf00      	nop
 8002a4c:	20000c60 	.word	0x20000c60
 8002a50:	20000bf8 	.word	0x20000bf8
 8002a54:	08004530 	.word	0x08004530
 8002a58:	08004280 	.word	0x08004280
 8002a5c:	40010c00 	.word	0x40010c00
 8002a60:	20000b64 	.word	0x20000b64
 8002a64:	080042f0 	.word	0x080042f0
 8002a68:	20000b5c 	.word	0x20000b5c
 8002a6c:	20000c4c 	.word	0x20000c4c
 8002a70:	20000c68 	.word	0x20000c68
 8002a74:	08002161 	.word	0x08002161
 8002a78:	08000211 	.word	0x08000211
 8002a7c:	20000c38 	.word	0x20000c38
 8002a80:	20000c30 	.word	0x20000c30
 8002a84:	20000c28 	.word	0x20000c28
 8002a88:	e000e100 	.word	0xe000e100
 8002a8c:	20000dd0 	.word	0x20000dd0
 8002a90:	08000a71 	.word	0x08000a71
 8002a94:	08000491 	.word	0x08000491
 8002a98:	080015e1 	.word	0x080015e1
 8002a9c:	08004520 	.word	0x08004520
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40005c00 	.word	0x40005c00

/**
 * Re-init the rf chip
 */
void rfhelp_restart(void) {
	chMtxLock(&rf_mutex);
 8002aa8:	48b1      	ldr	r0, [pc, #708]	; (8002d70 <main+0xa10>)
 8002aaa:	f7fe fbb1 	bl	8001210 <chMtxLock>
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8002aae:	4642      	mov	r2, r8
 8002ab0:	4650      	mov	r0, sl
 8002ab2:	a906      	add	r1, sp, #24
 8002ab4:	f7fe fec4 	bl	8001840 <rf_read_reg>
	return result;
 8002ab8:	f89d 3018 	ldrb.w	r3, [sp, #24]
}

// Turn off radio
void rf_power_down(void) {
	int tmp = rf_read_reg_byte(NRF_REG_CONFIG);
	if (tmp & (NRF_CONFIG_PWR_UP)) {
 8002abc:	079a      	lsls	r2, r3, #30
 8002abe:	d508      	bpl.n	8002ad2 <main+0x772>
		tmp &= ~(NRF_CONFIG_PWR_UP);
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
 8002ac0:	a90c      	add	r1, sp, #48	; 0x30

// Turn off radio
void rf_power_down(void) {
	int tmp = rf_read_reg_byte(NRF_REG_CONFIG);
	if (tmp & (NRF_CONFIG_PWR_UP)) {
		tmp &= ~(NRF_CONFIG_PWR_UP);
 8002ac2:	f023 0302 	bic.w	r3, r3, #2
		rf_write_reg_byte(NRF_REG_CONFIG, tmp);	//Update if we need
 8002ac6:	f801 3d26 	strb.w	r3, [r1, #-38]!
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002aca:	4650      	mov	r0, sl
 8002acc:	4642      	mov	r2, r8
 8002ace:	f7fe feef 	bl	80018b0 <rf_write_reg>
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	a90c      	add	r1, sp, #48	; 0x30
 8002ad6:	f801 3d25 	strb.w	r3, [r1, #-37]!
 8002ada:	2002      	movs	r0, #2
 8002adc:	2201      	movs	r2, #1
 8002ade:	f7fe fee7 	bl	80018b0 <rf_write_reg>
 8002ae2:	f04f 0808 	mov.w	r8, #8
 8002ae6:	a90c      	add	r1, sp, #48	; 0x30
 8002ae8:	f801 8d24 	strb.w	r8, [r1, #-36]!
 8002aec:	2011      	movs	r0, #17
 8002aee:	2201      	movs	r2, #1
 8002af0:	f7fe fede 	bl	80018b0 <rf_write_reg>
 8002af4:	a90c      	add	r1, sp, #48	; 0x30
 8002af6:	f801 8d23 	strb.w	r8, [r1, #-35]!
 8002afa:	2012      	movs	r0, #18
 8002afc:	2201      	movs	r2, #1
 8002afe:	f7fe fed7 	bl	80018b0 <rf_write_reg>
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8002b02:	2201      	movs	r2, #1
    rf_write_reg_byte(NRF_REG_EN_RXADDR, NRF_MASK_PIPE0 | NRF_MASK_PIPE1);

    rf_write_reg_byte(NRF_REG_RX_PW_P0, 8);
    rf_write_reg_byte(NRF_REG_RX_PW_P1, 8);

	rf_set_crc_type(nrf_conf.crc_type);
 8002b04:	f896 8002 	ldrb.w	r8, [r6, #2]
 8002b08:	2000      	movs	r0, #0
 8002b0a:	a906      	add	r1, sp, #24
 8002b0c:	f7fe fe98 	bl	8001840 <rf_read_reg>
	return result;
 8002b10:	f89d 2018 	ldrb.w	r2, [sp, #24]
	char reg_old = rf_read_reg_byte(NRF_REG_CONFIG);
	char reg_new = reg_old;

	reg_new &= ~(NRF_CONFIG_CRCO | NRF_CONFIG_EN_CRC);

	switch (crc_type) {
 8002b14:	f1b8 0f01 	cmp.w	r8, #1

void rf_set_crc_type(NRF_CRC crc_type) {
	char reg_old = rf_read_reg_byte(NRF_REG_CONFIG);
	char reg_new = reg_old;

	reg_new &= ~(NRF_CONFIG_CRCO | NRF_CONFIG_EN_CRC);
 8002b18:	f002 03f3 	and.w	r3, r2, #243	; 0xf3

	switch (crc_type) {
 8002b1c:	f000 8113 	beq.w	8002d46 <main+0x9e6>
 8002b20:	f1b8 0f02 	cmp.w	r8, #2
 8002b24:	d101      	bne.n	8002b2a <main+0x7ca>
	case NRF_CRC_1B:
		reg_new |= NRF_CONFIG_EN_CRC;
		break;

	case NRF_CRC_2B:
		reg_new |= NRF_CONFIG_EN_CRC | NRF_CONFIG_CRCO;
 8002b26:	f043 030c 	orr.w	r3, r3, #12

	default:
		break;
	}

	if (reg_old != reg_new) {
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d006      	beq.n	8002b3c <main+0x7dc>
 8002b2e:	a90c      	add	r1, sp, #48	; 0x30
 8002b30:	f801 3d22 	strb.w	r3, [r1, #-34]!
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002b34:	2000      	movs	r0, #0
 8002b36:	2201      	movs	r2, #1
 8002b38:	f7fe feba 	bl	80018b0 <rf_write_reg>
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	2004      	movs	r0, #4
 8002b40:	a906      	add	r1, sp, #24
	rf_set_retr_retries(nrf_conf.retries);
 8002b42:	f896 8004 	ldrb.w	r8, [r6, #4]
 8002b46:	f7fe fe7b 	bl	8001840 <rf_read_reg>
	return result;
 8002b4a:	f89d 2018 	ldrb.w	r2, [sp, #24]
void rf_set_retr_retries(int retries) {
	char reg_old = rf_read_reg_byte(NRF_REG_SETUP_RETR);
	char reg_new = reg_old;

	reg_new &= ~NRF_SETUP_RETR_ARC;
	reg_new |= (char)retries & 0xF;
 8002b4e:	f008 080f 	and.w	r8, r8, #15

void rf_set_retr_retries(int retries) {
	char reg_old = rf_read_reg_byte(NRF_REG_SETUP_RETR);
	char reg_new = reg_old;

	reg_new &= ~NRF_SETUP_RETR_ARC;
 8002b52:	f022 030f 	bic.w	r3, r2, #15
	reg_new |= (char)retries & 0xF;
 8002b56:	ea43 0308 	orr.w	r3, r3, r8

	if (reg_old != reg_new) {
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d006      	beq.n	8002b6c <main+0x80c>
 8002b5e:	a90c      	add	r1, sp, #48	; 0x30
 8002b60:	f801 3d21 	strb.w	r3, [r1, #-33]!
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002b64:	2004      	movs	r0, #4
 8002b66:	2201      	movs	r2, #1
 8002b68:	f7fe fea2 	bl	80018b0 <rf_write_reg>
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	2004      	movs	r0, #4
 8002b70:	a906      	add	r1, sp, #24
	rf_set_retr_delay(nrf_conf.retry_delay);
 8002b72:	f896 8003 	ldrb.w	r8, [r6, #3]
 8002b76:	f7fe fe63 	bl	8001840 <rf_read_reg>
	return result;
 8002b7a:	f89d 2018 	ldrb.w	r2, [sp, #24]

void rf_set_retr_delay(NRF_RETR_DELAY delay) {
	char reg_old = rf_read_reg_byte(NRF_REG_SETUP_RETR);
	char reg_new = reg_old;

	reg_new &= ~NRF_SETUP_RETR_ARD;
 8002b7e:	f002 030f 	and.w	r3, r2, #15
	reg_new |= ((char)delay & 0xF) << 4;
 8002b82:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
 8002b86:	b2db      	uxtb	r3, r3

	if (reg_old != reg_new) {
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d006      	beq.n	8002b9a <main+0x83a>
 8002b8c:	a90c      	add	r1, sp, #48	; 0x30
 8002b8e:	f801 3d20 	strb.w	r3, [r1, #-32]!
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002b92:	2004      	movs	r0, #4
 8002b94:	2201      	movs	r2, #1
 8002b96:	f7fe fe8b 	bl	80018b0 <rf_write_reg>
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2006      	movs	r0, #6
 8002b9e:	a906      	add	r1, sp, #24
	rf_set_power(nrf_conf.power);
 8002ba0:	f896 8001 	ldrb.w	r8, [r6, #1]
 8002ba4:	f7fe fe4c 	bl	8001840 <rf_read_reg>
	return result;
 8002ba8:	f89d 2018 	ldrb.w	r2, [sp, #24]
	reg_new &= ~(NRF_RF_SETUP_RF_PWR | 1);
	reg_new |= (char)power << 1;

	// In case this is a SI24R1 chip and the highest power is requested, set
	// the first bit to get 7dBm output.
	if (power == NRF_POWER_0DBM) {
 8002bac:	f1b8 0f03 	cmp.w	r8, #3

void rf_set_power(NRF_POWER power) {
	char reg_old = rf_read_reg_byte(NRF_REG_RF_SETUP);
	char reg_new = reg_old;

	reg_new &= ~(NRF_RF_SETUP_RF_PWR | 1);
 8002bb0:	f022 0307 	bic.w	r3, r2, #7
	reg_new |= (char)power << 1;
 8002bb4:	ea43 0348 	orr.w	r3, r3, r8, lsl #1
 8002bb8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe

	// In case this is a SI24R1 chip and the highest power is requested, set
	// the first bit to get 7dBm output.
	if (power == NRF_POWER_0DBM) {
		reg_new |= 1;
 8002bbc:	bf08      	it	eq
 8002bbe:	f043 0301 	orreq.w	r3, r3, #1
	}

	if (reg_old != reg_new) {
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d006      	beq.n	8002bd4 <main+0x874>
 8002bc6:	a90c      	add	r1, sp, #48	; 0x30
 8002bc8:	f801 3d1f 	strb.w	r3, [r1, #-31]!
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002bcc:	2006      	movs	r0, #6
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f7fe fe6e 	bl	80018b0 <rf_write_reg>
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	2006      	movs	r0, #6
 8002bd8:	a906      	add	r1, sp, #24
	rf_set_speed(nrf_conf.speed);
 8002bda:	f896 8000 	ldrb.w	r8, [r6]
 8002bde:	f7fe fe2f 	bl	8001840 <rf_read_reg>
	return result;
 8002be2:	f89d 2018 	ldrb.w	r2, [sp, #24]

void rf_set_speed(NRF_SPEED speed) {
	char reg_old = rf_read_reg_byte(NRF_REG_RF_SETUP);
	char reg_new = reg_old;

	reg_new &= ~(NRF_RF_SETUP_RF_DR_LOW | NRF_RF_SETUP_RF_DR_HIGH);
 8002be6:	f002 03d7 	and.w	r3, r2, #215	; 0xd7

	switch (speed) {
 8002bea:	f1b8 0f00 	cmp.w	r8, #0
 8002bee:	f000 80a7 	beq.w	8002d40 <main+0x9e0>
 8002bf2:	f1b8 0f02 	cmp.w	r8, #2
 8002bf6:	d101      	bne.n	8002bfc <main+0x89c>

	case NRF_SPEED_1M:
		break;

	case NRF_SPEED_2M:
		reg_new |= NRF_RF_SETUP_RF_DR_HIGH;
 8002bf8:	f043 0308 	orr.w	r3, r3, #8

	default:
		break;
	}

	if (reg_old != reg_new) {
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d006      	beq.n	8002c0e <main+0x8ae>
 8002c00:	a90c      	add	r1, sp, #48	; 0x30
 8002c02:	f801 3d1e 	strb.w	r3, [r1, #-30]!
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002c06:	2006      	movs	r0, #6
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f7fe fe51 	bl	80018b0 <rf_write_reg>
 8002c0e:	f04f 0801 	mov.w	r8, #1
 8002c12:	a90c      	add	r1, sp, #48	; 0x30
 8002c14:	f801 8d1d 	strb.w	r8, [r1, #-29]!
 8002c18:	4642      	mov	r2, r8
 8002c1a:	2003      	movs	r0, #3
 8002c1c:	f7fe fe48 	bl	80018b0 <rf_write_reg>
	rf_set_address_width(NRF_AW_3); // Always use 3 byte address
	rf_set_frequency(2400 + (unsigned int)nrf_conf.channel);
 8002c20:	7973      	ldrb	r3, [r6, #5]
 8002c22:	a90c      	add	r1, sp, #48	; 0x30
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

// Set radio frequency in MHz (2400 to 2525 allowed)
void rf_set_frequency(int freq) {
	rf_write_reg_byte(NRF_REG_RF_CH, (freq - 2400) & 0x7F);
 8002c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c28:	f801 3d1c 	strb.w	r3, [r1, #-28]!
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002c2c:	4642      	mov	r2, r8
 8002c2e:	2005      	movs	r0, #5
 8002c30:	f7fe fe3e 	bl	80018b0 <rf_write_reg>
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8002c34:	4642      	mov	r2, r8
 8002c36:	4640      	mov	r0, r8
 8002c38:	a906      	add	r1, sp, #24
 8002c3a:	f7fe fe01 	bl	8001840 <rf_read_reg>
	return result;
 8002c3e:	f89d 3018 	ldrb.w	r3, [sp, #24]
}

// Enable autoack on pipe
void rf_enable_pipe_autoack(int pipes) {
	int tmp = rf_read_reg_byte(NRF_REG_EN_AA);
	if ((tmp & (pipes)) != (pipes)) {
 8002c42:	f003 0203 	and.w	r2, r3, #3
 8002c46:	2a03      	cmp	r2, #3
 8002c48:	d008      	beq.n	8002c5c <main+0x8fc>
 8002c4a:	a90c      	add	r1, sp, #48	; 0x30
		tmp |= (pipes);
 8002c4c:	f043 0303 	orr.w	r3, r3, #3
 8002c50:	f801 3d1b 	strb.w	r3, [r1, #-27]!
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002c54:	4640      	mov	r0, r8
 8002c56:	4642      	mov	r2, r8
 8002c58:	f7fe fe2a 	bl	80018b0 <rf_write_reg>
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	2002      	movs	r0, #2
 8002c60:	a906      	add	r1, sp, #24
 8002c62:	f7fe fded 	bl	8001840 <rf_read_reg>
	return result;
 8002c66:	f89d 3018 	ldrb.w	r3, [sp, #24]
}

// Enable address on pipe
void rf_enable_pipe_address(int pipes) {
	int tmp = rf_read_reg_byte(NRF_REG_EN_RXADDR);
	if ((tmp & (pipes)) != (pipes)) {
 8002c6a:	f003 0203 	and.w	r2, r3, #3
 8002c6e:	2a03      	cmp	r2, #3
 8002c70:	d008      	beq.n	8002c84 <main+0x924>
 8002c72:	a90c      	add	r1, sp, #48	; 0x30
		tmp |= (pipes);
 8002c74:	f043 0303 	orr.w	r3, r3, #3
 8002c78:	f801 3d1a 	strb.w	r3, [r1, #-26]!
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002c7c:	2002      	movs	r0, #2
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f7fe fe16 	bl	80018b0 <rf_write_reg>
#ifdef RX_MODE
    nrf_conf.address[0] = 0x25;
    nrf_conf.address[1] = 0x26;
    nrf_conf.address[2] = 0x27;
#else
    nrf_conf.address[0] = 0x15;
 8002c84:	2215      	movs	r2, #21
    nrf_conf.address[1] = 0x16;
 8002c86:	2316      	movs	r3, #22
    nrf_conf.address[2] = 0x17;
#endif

	memcpy(tx_addr, nrf_conf.address, 3);
 8002c88:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8002d78 <main+0xa18>
#ifdef RX_MODE
    nrf_conf.address[0] = 0x25;
    nrf_conf.address[1] = 0x26;
    nrf_conf.address[2] = 0x27;
#else
    nrf_conf.address[0] = 0x15;
 8002c8c:	71b2      	strb	r2, [r6, #6]
    nrf_conf.address[1] = 0x16;
 8002c8e:	71f3      	strb	r3, [r6, #7]
    nrf_conf.address[2] = 0x17;
#endif

	memcpy(tx_addr, nrf_conf.address, 3);
	memcpy(rx_addr[0], nrf_conf.address, 3);
 8002c90:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8002d7c <main+0xa1c>
    nrf_conf.address[0] = 0x15;
    nrf_conf.address[1] = 0x16;
    nrf_conf.address[2] = 0x17;
#endif

	memcpy(tx_addr, nrf_conf.address, 3);
 8002c94:	4b37      	ldr	r3, [pc, #220]	; (8002d74 <main+0xa14>)
 8002c96:	f8ba 0000 	ldrh.w	r0, [sl]
	memcpy(rx_addr[0], nrf_conf.address, 3);
//	tx_pipe0_addr_eq = true;

	rf_set_tx_addr(tx_addr, address_length);
 8002c9a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8002d80 <main+0xa20>
    nrf_conf.address[1] = 0x26;
    nrf_conf.address[2] = 0x27;
#else
    nrf_conf.address[0] = 0x15;
    nrf_conf.address[1] = 0x16;
    nrf_conf.address[2] = 0x17;
 8002c9e:	f04f 0c17 	mov.w	ip, #23
void rf_set_rx_addr(int pipe, const char *address, int addr_len) {
	rf_write_reg(NRF_REG_RX_ADDR_P0 + pipe, address, addr_len);
}

void rf_set_tx_addr(const char *address, int addr_len) {
	rf_write_reg(NRF_REG_TX_ADDR, address, addr_len);
 8002ca2:	4619      	mov	r1, r3
#endif

	memcpy(tx_addr, nrf_conf.address, 3);
 8002ca4:	8018      	strh	r0, [r3, #0]
 8002ca6:	f883 c002 	strb.w	ip, [r3, #2]
	memcpy(rx_addr[0], nrf_conf.address, 3);
 8002caa:	f888 c002 	strb.w	ip, [r8, #2]
 8002cae:	f8d9 2000 	ldr.w	r2, [r9]
 8002cb2:	f8a8 0000 	strh.w	r0, [r8]
 8002cb6:	2010      	movs	r0, #16
    nrf_conf.address[1] = 0x26;
    nrf_conf.address[2] = 0x27;
#else
    nrf_conf.address[0] = 0x15;
    nrf_conf.address[1] = 0x16;
    nrf_conf.address[2] = 0x17;
 8002cb8:	f886 c008 	strb.w	ip, [r6, #8]
 8002cbc:	f7fe fdf8 	bl	80018b0 <rf_write_reg>
		rf_write_reg_byte(NRF_REG_SETUP_RETR, reg_new);	// Update if we need
	}
}

void rf_set_rx_addr(int pipe, const char *address, int addr_len) {
	rf_write_reg(NRF_REG_RX_ADDR_P0 + pipe, address, addr_len);
 8002cc0:	4641      	mov	r1, r8
 8002cc2:	f8d9 2000 	ldr.w	r2, [r9]
 8002cc6:	200a      	movs	r0, #10
 8002cc8:	f7fe fdf2 	bl	80018b0 <rf_write_reg>
#ifdef RX_MODE
    nrf_conf.address[0] = 0x15;
    nrf_conf.address[1] = 0x16;
    nrf_conf.address[2] = 0x17;
#else
    nrf_conf.address[0] = 0x25;
 8002ccc:	2225      	movs	r2, #37	; 0x25
    nrf_conf.address[1] = 0x26;
 8002cce:	2326      	movs	r3, #38	; 0x26
#ifdef RX_MODE
    nrf_conf.address[0] = 0x15;
    nrf_conf.address[1] = 0x16;
    nrf_conf.address[2] = 0x17;
#else
    nrf_conf.address[0] = 0x25;
 8002cd0:	71b2      	strb	r2, [r6, #6]
    nrf_conf.address[1] = 0x26;
 8002cd2:	71f3      	strb	r3, [r6, #7]
    nrf_conf.address[2] = 0x27;
#endif
    memcpy(rx_addr[1], nrf_conf.address, 3);
 8002cd4:	f8ba c000 	ldrh.w	ip, [sl]
    nrf_conf.address[1] = 0x16;
    nrf_conf.address[2] = 0x17;
#else
    nrf_conf.address[0] = 0x25;
    nrf_conf.address[1] = 0x26;
    nrf_conf.address[2] = 0x27;
 8002cd8:	2327      	movs	r3, #39	; 0x27
#endif
    memcpy(rx_addr[1], nrf_conf.address, 3);
 8002cda:	f108 0e05 	add.w	lr, r8, #5
 8002cde:	4671      	mov	r1, lr
 8002ce0:	f888 3007 	strb.w	r3, [r8, #7]
 8002ce4:	f8d9 2000 	ldr.w	r2, [r9]
 8002ce8:	200b      	movs	r0, #11
 8002cea:	f8a8 c005 	strh.w	ip, [r8, #5]
    nrf_conf.address[1] = 0x16;
    nrf_conf.address[2] = 0x17;
#else
    nrf_conf.address[0] = 0x25;
    nrf_conf.address[1] = 0x26;
    nrf_conf.address[2] = 0x27;
 8002cee:	7233      	strb	r3, [r6, #8]
 8002cf0:	f7fe fdde 	bl	80018b0 <rf_write_reg>
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

char rf_read_reg_byte(int reg) {
	char result;
	rf_read_reg(reg, &result, 1);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	a906      	add	r1, sp, #24
 8002cfa:	f7fe fda1 	bl	8001840 <rf_read_reg>
	return result;
 8002cfe:	f89d 3018 	ldrb.w	r3, [sp, #24]
}

// Turn on radio
void rf_power_up(void) {
	int tmp = rf_read_reg_byte(NRF_REG_CONFIG);
	if ((tmp & (NRF_CONFIG_PWR_UP)) != (NRF_CONFIG_PWR_UP)) {
 8002d02:	f003 0202 	and.w	r2, r3, #2
 8002d06:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8002d0a:	b93a      	cbnz	r2, 8002d1c <main+0x9bc>
 8002d0c:	a90c      	add	r1, sp, #48	; 0x30
		tmp |= (NRF_CONFIG_PWR_UP);
 8002d0e:	f043 0302 	orr.w	r3, r3, #2
 8002d12:	f801 3d19 	strb.w	r3, [r1, #-25]!
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002d16:	2201      	movs	r2, #1
 8002d18:	f7fe fdca 	bl	80018b0 <rf_write_reg>
#endif
    memcpy(rx_addr[1], nrf_conf.address, 3);
    rf_set_rx_addr(1, rx_addr[1], address_length);

	rf_power_up();
	rf_mode_rx();
 8002d1c:	f7fe ff38 	bl	8001b90 <rf_mode_rx>
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_flush_all(void) {
	rf_flush_rx();
 8002d20:	f7fe fef6 	bl	8001b10 <rf_flush_rx>
	rf_flush_tx();
 8002d24:	f7fe ff14 	bl	8001b50 <rf_flush_tx>
 8002d28:	2370      	movs	r3, #112	; 0x70
    spiUnselect(&SPID1);                /* Slave Select de-assertion.       */
    spiReleaseBus(&SPID1);              /* Ownership release.               */
}

void rf_write_reg_byte(int reg, char data) {
	rf_write_reg(reg, &data, 1);
 8002d2a:	a906      	add	r1, sp, #24
 8002d2c:	2007      	movs	r0, #7
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f88d 3018 	strb.w	r3, [sp, #24]
 8002d34:	f7fe fdbc 	bl	80018b0 <rf_write_reg>
	rf_flush_all();
	rf_clear_irq();

	chMtxUnlock(&rf_mutex);
 8002d38:	480d      	ldr	r0, [pc, #52]	; (8002d70 <main+0xa10>)
 8002d3a:	f7fe fa31 	bl	80011a0 <chMtxUnlock>
 8002d3e:	e542      	b.n	80027c6 <main+0x466>

	reg_new &= ~(NRF_RF_SETUP_RF_DR_LOW | NRF_RF_SETUP_RF_DR_HIGH);

	switch (speed) {
	case NRF_SPEED_250K:
		reg_new |= NRF_RF_SETUP_RF_DR_LOW;
 8002d40:	f043 0320 	orr.w	r3, r3, #32
 8002d44:	e75a      	b.n	8002bfc <main+0x89c>
	switch (crc_type) {
	case NRF_CRC_DISABLED:
		break;

	case NRF_CRC_1B:
		reg_new |= NRF_CONFIG_EN_CRC;
 8002d46:	f043 0308 	orr.w	r3, r3, #8
 8002d4a:	e6ee      	b.n	8002b2a <main+0x7ca>
      rccResetTIM3();
    }
#endif
#if STM32_QEI_USE_TIM4
    if (&QEID4 == qeip) {
      rccEnableTIM4(FALSE);
 8002d4c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8002d50:	f043 0304 	orr.w	r3, r3, #4
 8002d54:	f8c8 301c 	str.w	r3, [r8, #28]
      rccResetTIM4();
 8002d58:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8002d5c:	f043 0304 	orr.w	r3, r3, #4
 8002d60:	f8c8 3010 	str.w	r3, [r8, #16]
 8002d64:	f8c8 6010 	str.w	r6, [r8, #16]
 8002d68:	e459      	b.n	800261e <main+0x2be>
  /* Set Capture Compare 1 and Capture Compare 2 as input. */
   qeip->tim->CCMR1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  if (qeip->config->mode == QEI_MODE_QUADRATURE) {
    if (qeip->config->resolution == QEI_BOTH_EDGES)
      qeip->tim->SMCR  = TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0;
 8002d6a:	2103      	movs	r1, #3
 8002d6c:	6099      	str	r1, [r3, #8]
 8002d6e:	e4b9      	b.n	80026e4 <main+0x384>
 8002d70:	20000c50 	.word	0x20000c50
 8002d74:	20000b54 	.word	0x20000b54
 8002d78:	20000bfe 	.word	0x20000bfe
 8002d7c:	20000c04 	.word	0x20000c04
 8002d80:	20000db0 	.word	0x20000db0
	...

08002d90 <spi_lld_serve_tx_interrupt.lto_priv.84>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8002d90:	070b      	lsls	r3, r1, #28
 8002d92:	d400      	bmi.n	8002d96 <spi_lld_serve_tx_interrupt.lto_priv.84+0x6>
 8002d94:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d96:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8002d98:	4b01      	ldr	r3, [pc, #4]	; (8002da0 <spi_lld_serve_tx_interrupt.lto_priv.84+0x10>)
 8002d9a:	4a02      	ldr	r2, [pc, #8]	; (8002da4 <spi_lld_serve_tx_interrupt.lto_priv.84+0x14>)
 8002d9c:	629a      	str	r2, [r3, #40]	; 0x28
 8002d9e:	e7fe      	b.n	8002d9e <spi_lld_serve_tx_interrupt.lto_priv.84+0xe>
 8002da0:	20001030 	.word	0x20001030
 8002da4:	08004550 	.word	0x08004550
	...

08002db0 <Vector8C>:
 */
OSAL_IRQ_HANDLER(STM32_USB1_HP_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  OSAL_IRQ_EPILOGUE();
 8002db0:	f7fd bebe 	b.w	8000b30 <_port_irq_epilogue>
	...

08002dc0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8002dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8002dc4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002dc8:	6923      	ldr	r3, [r4, #16]
 8002dca:	079b      	lsls	r3, r3, #30
 8002dcc:	d403      	bmi.n	8002dd6 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8002dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8002dd2:	f7fd bead 	b.w	8000b30 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8002dd6:	2700      	movs	r7, #0
 8002dd8:	6127      	str	r7, [r4, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002dda:	2520      	movs	r5, #32
 8002ddc:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8002de0:	4e1e      	ldr	r6, [pc, #120]	; (8002e5c <VectorB0+0x9c>)
 8002de2:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002de4:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8002de8:	69f3      	ldr	r3, [r6, #28]
 8002dea:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002dec:	ebce 0100 	rsb	r1, lr, r0
 8002df0:	891a      	ldrh	r2, [r3, #8]
 8002df2:	b289      	uxth	r1, r1
 8002df4:	4291      	cmp	r1, r2
 8002df6:	f106 081c 	add.w	r8, r6, #28
 8002dfa:	d31b      	bcc.n	8002e34 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002dfc:	6819      	ldr	r1, [r3, #0]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8002dfe:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8002e00:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8002e02:	84f2      	strh	r2, [r6, #38]	; 0x26

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8002e04:	68da      	ldr	r2, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002e06:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8002e0a:	61f1      	str	r1, [r6, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8002e0c:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8002e0e:	bf08      	it	eq
 8002e10:	60e7      	streq	r7, [r4, #12]
 8002e12:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8002e16:	6918      	ldr	r0, [r3, #16]
 8002e18:	4790      	blx	r2
 8002e1a:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8002e1e:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002e20:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8002e24:	69f3      	ldr	r3, [r6, #28]
 8002e26:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8002e28:	ebce 0100 	rsb	r1, lr, r0
 8002e2c:	891a      	ldrh	r2, [r3, #8]
 8002e2e:	b289      	uxth	r1, r1
 8002e30:	428a      	cmp	r2, r1
 8002e32:	d9e3      	bls.n	8002dfc <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8002e34:	4543      	cmp	r3, r8
 8002e36:	d00a      	beq.n	8002e4e <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8002e38:	4472      	add	r2, lr
 8002e3a:	1a12      	subs	r2, r2, r0
 8002e3c:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8002e3e:	2a01      	cmp	r2, #1
 8002e40:	bf98      	it	ls
 8002e42:	2202      	movls	r2, #2
  }
  port_timer_set_alarm(now + delta);
 8002e44:	4402      	add	r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002e46:	b292      	uxth	r2, r2
 8002e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8002e54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8002e58:	f7fd be6a 	b.w	8000b30 <_port_irq_epilogue>
 8002e5c:	20001030 	.word	0x20001030

08002e60 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8002e60:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <Vector84+0x20>)
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8002e62:	4808      	ldr	r0, [pc, #32]	; (8002e84 <Vector84+0x24>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8002e64:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8002e66:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8002e68:	f3c1 6103 	ubfx	r1, r1, #24, #4
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 8002e6c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
 8002e6e:	060c      	lsls	r4, r1, #24
 8002e70:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8002e72:	b10a      	cbz	r2, 8002e78 <Vector84+0x18>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8002e74:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002e76:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e7c:	f7fd be58 	b.w	8000b30 <_port_irq_epilogue>
 8002e80:	40020000 	.word	0x40020000
 8002e84:	20001180 	.word	0x20001180
	...

08002e90 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8002e90:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <Vector80+0x20>)
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8002e92:	4808      	ldr	r0, [pc, #32]	; (8002eb4 <Vector80+0x24>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8002e94:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8002e96:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8002e98:	f3c1 5103 	ubfx	r1, r1, #20, #4
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 8002e9c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
 8002e9e:	050c      	lsls	r4, r1, #20
 8002ea0:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8002ea2:	b10a      	cbz	r2, 8002ea8 <Vector80+0x18>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8002ea4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002ea6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002eac:	f7fd be40 	b.w	8000b30 <_port_irq_epilogue>
 8002eb0:	40020000 	.word	0x40020000
 8002eb4:	20001180 	.word	0x20001180
	...

08002ec0 <Vector7C>:
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8002ec0:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <Vector7C+0x20>)
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 8002ec2:	4808      	ldr	r0, [pc, #32]	; (8002ee4 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8002ec4:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 8002ec6:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8002ec8:	f3c1 4103 	ubfx	r1, r1, #16, #4
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 8002ecc:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
 8002ece:	040c      	lsls	r4, r1, #16
 8002ed0:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 8002ed2:	b10a      	cbz	r2, 8002ed8 <Vector7C+0x18>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8002ed4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002ed6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002edc:	f7fd be28 	b.w	8000b30 <_port_irq_epilogue>
 8002ee0:	40020000 	.word	0x40020000
 8002ee4:	20001180 	.word	0x20001180
	...

08002ef0 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <Vector78+0x20>)
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 8002ef2:	4808      	ldr	r0, [pc, #32]	; (8002f14 <Vector78+0x24>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8002ef4:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 8002ef6:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8002ef8:	f3c1 3103 	ubfx	r1, r1, #12, #4
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 8002efc:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
 8002efe:	030c      	lsls	r4, r1, #12
 8002f00:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[3].dma_func)
 8002f02:	b10a      	cbz	r2, 8002f08 <Vector78+0x18>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8002f04:	69c0      	ldr	r0, [r0, #28]
 8002f06:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f0c:	f7fd be10 	b.w	8000b30 <_port_irq_epilogue>
 8002f10:	40020000 	.word	0x40020000
 8002f14:	20001180 	.word	0x20001180
	...

08002f20 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8002f20:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <Vector74+0x20>)
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 8002f22:	4808      	ldr	r0, [pc, #32]	; (8002f44 <Vector74+0x24>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8002f24:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 8002f26:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8002f28:	f3c1 2103 	ubfx	r1, r1, #8, #4
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 8002f2c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
 8002f2e:	020c      	lsls	r4, r1, #8
 8002f30:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[2].dma_func)
 8002f32:	b10a      	cbz	r2, 8002f38 <Vector74+0x18>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8002f34:	6940      	ldr	r0, [r0, #20]
 8002f36:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f3c:	f7fd bdf8 	b.w	8000b30 <_port_irq_epilogue>
 8002f40:	40020000 	.word	0x40020000
 8002f44:	20001180 	.word	0x20001180
	...

08002f50 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <Vector70+0x20>)
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8002f52:	4808      	ldr	r0, [pc, #32]	; (8002f74 <Vector70+0x24>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8002f54:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8002f56:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8002f58:	f3c1 1103 	ubfx	r1, r1, #4, #4
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 8002f5c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
 8002f5e:	010c      	lsls	r4, r1, #4
 8002f60:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[1].dma_func)
 8002f62:	b10a      	cbz	r2, 8002f68 <Vector70+0x18>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8002f64:	68c0      	ldr	r0, [r0, #12]
 8002f66:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f6c:	f7fd bde0 	b.w	8000b30 <_port_irq_epilogue>
 8002f70:	40020000 	.word	0x40020000
 8002f74:	20001180 	.word	0x20001180
	...

08002f80 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 8002f80:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8002f82:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <Vector6C+0x20>)
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 8002f84:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8002f86:	6819      	ldr	r1, [r3, #0]
 8002f88:	f001 010f 	and.w	r1, r1, #15
  DMA1->IFCR = flags << 0;
 8002f8c:	6059      	str	r1, [r3, #4]
  if (dma_isr_redir[0].dma_func)
 8002f8e:	6813      	ldr	r3, [r2, #0]
 8002f90:	b10b      	cbz	r3, 8002f96 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8002f92:	6850      	ldr	r0, [r2, #4]
 8002f94:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002f96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f9a:	f7fd bdc9 	b.w	8000b30 <_port_irq_epilogue>
 8002f9e:	bf00      	nop
 8002fa0:	40020000 	.word	0x40020000
 8002fa4:	20001180 	.word	0x20001180
	...

08002fb0 <usb_packet_write_from_queue>:
 *                      not exceed the maximum packet size for this endpoint.
 *
 * @notapi
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
 8002fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8002fb2:	6803      	ldr	r3, [r0, #0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8002fb4:	ea5f 0c52 	movs.w	ip, r2, lsr #1
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8002fb8:	f103 5e00 	add.w	lr, r3, #536870912	; 0x20000000
 8002fbc:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
 8002fc0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8002fc4:	6042      	str	r2, [r0, #4]
  nhw = n / 2;
  while (nhw > 0) {
 8002fc6:	d018      	beq.n	8002ffa <usb_packet_write_from_queue+0x4a>
 8002fc8:	4677      	mov	r7, lr
 8002fca:	4664      	mov	r4, ip
 8002fcc:	690e      	ldr	r6, [r1, #16]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8002fce:	6988      	ldr	r0, [r1, #24]
 8002fd0:	1c43      	adds	r3, r0, #1
    if (oqp->q_rdptr >= oqp->q_top)
 8002fd2:	42b3      	cmp	r3, r6
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8002fd4:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8002fd6:	bf28      	it	cs
 8002fd8:	68cb      	ldrcs	r3, [r1, #12]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8002fda:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8002fdc:	1c5d      	adds	r5, r3, #1
 8002fde:	618d      	str	r5, [r1, #24]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top)
 8002fe2:	42b5      	cmp	r5, r6
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8002fe4:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8002fe8:	bf24      	itt	cs
 8002fea:	68c8      	ldrcs	r0, [r1, #12]
 8002fec:	6188      	strcs	r0, [r1, #24]
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8002fee:	3c01      	subs	r4, #1
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 8002ff0:	f847 3b04 	str.w	r3, [r7], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8002ff4:	d1eb      	bne.n	8002fce <usb_packet_write_from_queue+0x1e>
 8002ff6:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
    *pmap++ = w;
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 8002ffa:	07d3      	lsls	r3, r2, #31
 8002ffc:	d50b      	bpl.n	8003016 <usb_packet_write_from_queue+0x66>
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8002ffe:	6988      	ldr	r0, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8003000:	690c      	ldr	r4, [r1, #16]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8003002:	1c43      	adds	r3, r0, #1
 8003004:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8003006:	42a3      	cmp	r3, r4
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8003008:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 800300a:	bf28      	it	cs
 800300c:	68cb      	ldrcs	r3, [r1, #12]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800300e:	f8ce 0000 	str.w	r0, [lr]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8003012:	bf28      	it	cs
 8003014:	618b      	strcs	r3, [r1, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8003016:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 800301a:	b9cb      	cbnz	r3, 8003050 <usb_packet_write_from_queue+0xa0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800301c:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003020:	2320      	movs	r3, #32
 8003022:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 8003026:	688b      	ldr	r3, [r1, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8003028:	4608      	mov	r0, r1
 800302a:	441a      	add	r2, r3
 800302c:	608a      	str	r2, [r1, #8]
 800302e:	2100      	movs	r1, #0
 8003030:	f7fe f9ce 	bl	80013d0 <chThdDequeueAllI>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003034:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8003038:	f3c4 0408 	ubfx	r4, r4, #0, #9
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 800303c:	b11c      	cbz	r4, 8003046 <usb_packet_write_from_queue+0x96>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800303e:	2300      	movs	r3, #0
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8003046:	f7fd fdd3 	bl	8000bf0 <chSchRescheduleS>
 800304a:	f384 8811 	msr	BASEPRI, r4
 800304e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003050:	688b      	ldr	r3, [r1, #8]
 8003052:	4608      	mov	r0, r1
 8003054:	441a      	add	r2, r3
 8003056:	608a      	str	r2, [r1, #8]
  osalThreadDequeueAllI(&oqp->q_waiting, Q_OK);

  osalSysRestoreStatusX(sts);
}
 8003058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800305c:	2100      	movs	r1, #0
 800305e:	f7fe b9b7 	b.w	80013d0 <chThdDequeueAllI>
 8003062:	bf00      	nop
	...

08003070 <spi_lld_serve_rx_interrupt.lto_priv.83>:
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8003070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003072:	070b      	lsls	r3, r1, #28
 8003074:	d431      	bmi.n	80030da <spi_lld_serve_rx_interrupt.lto_priv.83+0x6a>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8003076:	6a41      	ldr	r1, [r0, #36]	; 0x24
  dmaStreamDisable(spip->dmarx);
 8003078:	6a02      	ldr	r2, [r0, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 800307a:	e891 00c0 	ldmia.w	r1, {r6, r7}
 800307e:	6835      	ldr	r5, [r6, #0]
 8003080:	230f      	movs	r3, #15
 8003082:	f025 050f 	bic.w	r5, r5, #15
 8003086:	6035      	str	r5, [r6, #0]
 8003088:	7a09      	ldrb	r1, [r1, #8]
  dmaStreamDisable(spip->dmarx);
 800308a:	6815      	ldr	r5, [r2, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 800308c:	fa03 f101 	lsl.w	r1, r3, r1
 8003090:	6039      	str	r1, [r7, #0]
  dmaStreamDisable(spip->dmarx);
 8003092:	6829      	ldr	r1, [r5, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8003094:	6846      	ldr	r6, [r0, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8003096:	f021 010f 	bic.w	r1, r1, #15
 800309a:	6029      	str	r1, [r5, #0]
 800309c:	7a15      	ldrb	r5, [r2, #8]
 800309e:	6851      	ldr	r1, [r2, #4]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 80030a0:	6832      	ldr	r2, [r6, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 80030a2:	40ab      	lsls	r3, r5
 80030a4:	4604      	mov	r4, r0
 80030a6:	600b      	str	r3, [r1, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 80030a8:	b1a2      	cbz	r2, 80030d4 <spi_lld_serve_rx_interrupt.lto_priv.83+0x64>
 80030aa:	2304      	movs	r3, #4
 80030ac:	7003      	strb	r3, [r0, #0]
 80030ae:	4790      	blx	r2
 80030b0:	7823      	ldrb	r3, [r4, #0]
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d00e      	beq.n	80030d4 <spi_lld_serve_rx_interrupt.lto_priv.83+0x64>
 80030b6:	2320      	movs	r3, #32
 80030b8:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80030bc:	68a3      	ldr	r3, [r4, #8]
 80030be:	b12b      	cbz	r3, 80030cc <spi_lld_serve_rx_interrupt.lto_priv.83+0x5c>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 80030c0:	2200      	movs	r2, #0
 80030c2:	60a2      	str	r2, [r4, #8]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 80030c4:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 80030c6:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
 80030c8:	f7fd ff9a 	bl	8001000 <chSchReadyI>
 80030cc:	2300      	movs	r3, #0
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030d4:	2302      	movs	r3, #2
 80030d6:	7023      	strb	r3, [r4, #0]
 80030d8:	e7ed      	b.n	80030b6 <spi_lld_serve_rx_interrupt.lto_priv.83+0x46>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030da:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80030dc:	4b01      	ldr	r3, [pc, #4]	; (80030e4 <spi_lld_serve_rx_interrupt.lto_priv.83+0x74>)
 80030de:	4a02      	ldr	r2, [pc, #8]	; (80030e8 <spi_lld_serve_rx_interrupt.lto_priv.83+0x78>)
 80030e0:	629a      	str	r2, [r3, #40]	; 0x28
 80030e2:	e7fe      	b.n	80030e2 <spi_lld_serve_rx_interrupt.lto_priv.83+0x72>
 80030e4:	20001030 	.word	0x20001030
 80030e8:	08004550 	.word	0x08004550
 80030ec:	00000000 	.word	0x00000000

080030f0 <chprintf.lto_priv.86>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80030f0:	b40e      	push	{r1, r2, r3}
 80030f2:	b500      	push	{lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	ab03      	add	r3, sp, #12
 80030f8:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 80030fc:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80030fe:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8003100:	f7fe fe56 	bl	8001db0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8003104:	b002      	add	sp, #8
 8003106:	f85d eb04 	ldr.w	lr, [sp], #4
 800310a:	b003      	add	sp, #12
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop

08003110 <cmd_info.lto_priv.85>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8003110:	2900      	cmp	r1, #0
 8003112:	dd03      	ble.n	800311c <cmd_info.lto_priv.85+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8003114:	4919      	ldr	r1, [pc, #100]	; (800317c <cmd_info.lto_priv.85+0x6c>)
 8003116:	4a1a      	ldr	r2, [pc, #104]	; (8003180 <cmd_info.lto_priv.85+0x70>)
 8003118:	f7ff bfea 	b.w	80030f0 <chprintf.lto_priv.86>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 800311c:	b510      	push	{r4, lr}
 800311e:	4604      	mov	r4, r0
 8003120:	b082      	sub	sp, #8
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8003122:	4918      	ldr	r1, [pc, #96]	; (8003184 <cmd_info.lto_priv.85+0x74>)
 8003124:	4a18      	ldr	r2, [pc, #96]	; (8003188 <cmd_info.lto_priv.85+0x78>)
 8003126:	f7ff ffe3 	bl	80030f0 <chprintf.lto_priv.86>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 800312a:	4620      	mov	r0, r4
 800312c:	4917      	ldr	r1, [pc, #92]	; (800318c <cmd_info.lto_priv.85+0x7c>)
 800312e:	4a18      	ldr	r2, [pc, #96]	; (8003190 <cmd_info.lto_priv.85+0x80>)
 8003130:	f7ff ffde 	bl	80030f0 <chprintf.lto_priv.86>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 8003134:	4620      	mov	r0, r4
 8003136:	4917      	ldr	r1, [pc, #92]	; (8003194 <cmd_info.lto_priv.85+0x84>)
 8003138:	4a17      	ldr	r2, [pc, #92]	; (8003198 <cmd_info.lto_priv.85+0x88>)
 800313a:	f7ff ffd9 	bl	80030f0 <chprintf.lto_priv.86>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 800313e:	4620      	mov	r0, r4
 8003140:	4916      	ldr	r1, [pc, #88]	; (800319c <cmd_info.lto_priv.85+0x8c>)
 8003142:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <cmd_info.lto_priv.85+0x90>)
 8003144:	f7ff ffd4 	bl	80030f0 <chprintf.lto_priv.86>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 8003148:	4620      	mov	r0, r4
 800314a:	4916      	ldr	r1, [pc, #88]	; (80031a4 <cmd_info.lto_priv.85+0x94>)
 800314c:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <cmd_info.lto_priv.85+0x98>)
 800314e:	f7ff ffcf 	bl	80030f0 <chprintf.lto_priv.86>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 8003152:	4620      	mov	r0, r4
 8003154:	4915      	ldr	r1, [pc, #84]	; (80031ac <cmd_info.lto_priv.85+0x9c>)
 8003156:	4a16      	ldr	r2, [pc, #88]	; (80031b0 <cmd_info.lto_priv.85+0xa0>)
 8003158:	f7ff ffca 	bl	80030f0 <chprintf.lto_priv.86>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 800315c:	4620      	mov	r0, r4
 800315e:	4915      	ldr	r1, [pc, #84]	; (80031b4 <cmd_info.lto_priv.85+0xa4>)
 8003160:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <cmd_info.lto_priv.85+0xa8>)
 8003162:	f7ff ffc5 	bl	80030f0 <chprintf.lto_priv.86>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <cmd_info.lto_priv.85+0xac>)
 8003168:	4620      	mov	r0, r4
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	4914      	ldr	r1, [pc, #80]	; (80031c0 <cmd_info.lto_priv.85+0xb0>)
 800316e:	4a15      	ldr	r2, [pc, #84]	; (80031c4 <cmd_info.lto_priv.85+0xb4>)
 8003170:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <cmd_info.lto_priv.85+0xb8>)
 8003172:	f7ff ffbd 	bl	80030f0 <chprintf.lto_priv.86>
#endif
#endif
}
 8003176:	b002      	add	sp, #8
 8003178:	bd10      	pop	{r4, pc}
 800317a:	bf00      	nop
 800317c:	08003f10 	.word	0x08003f10
 8003180:	08004038 	.word	0x08004038
 8003184:	0800455c 	.word	0x0800455c
 8003188:	08004570 	.word	0x08004570
 800318c:	08004578 	.word	0x08004578
 8003190:	0800458c 	.word	0x0800458c
 8003194:	080045d4 	.word	0x080045d4
 8003198:	080045e8 	.word	0x080045e8
 800319c:	080045f0 	.word	0x080045f0
 80031a0:	08004604 	.word	0x08004604
 80031a4:	08004610 	.word	0x08004610
 80031a8:	08004624 	.word	0x08004624
 80031ac:	0800463c 	.word	0x0800463c
 80031b0:	08004650 	.word	0x08004650
 80031b4:	0800467c 	.word	0x0800467c
 80031b8:	08004690 	.word	0x08004690
 80031bc:	080046cc 	.word	0x080046cc
 80031c0:	080046a4 	.word	0x080046a4
 80031c4:	080046bc 	.word	0x080046bc
 80031c8:	080046c8 	.word	0x080046c8
 80031cc:	00000000 	.word	0x00000000

080031d0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80031d0:	4b1f      	ldr	r3, [pc, #124]	; (8003250 <__early_init+0x80>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80031d2:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80031dc:	680b      	ldr	r3, [r1, #0]
 80031de:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <__early_init+0x80>)
 80031e0:	079b      	lsls	r3, r3, #30
 80031e2:	d5fb      	bpl.n	80031dc <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80031e4:	4611      	mov	r1, r2
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80031e6:	6813      	ldr	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80031e8:	2000      	movs	r0, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80031ea:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 80031ee:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80031f0:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80031f2:	684b      	ldr	r3, [r1, #4]
 80031f4:	4a16      	ldr	r2, [pc, #88]	; (8003250 <__early_init+0x80>)
 80031f6:	f013 0f0c 	tst.w	r3, #12
 80031fa:	d1fa      	bne.n	80031f2 <__early_init+0x22>
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
  while (!(RCC->CR & RCC_CR_HSERDY))
 80031fc:	4611      	mov	r1, r2
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 80031fe:	6813      	ldr	r3, [r2, #0]
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8003206:	680b      	ldr	r3, [r1, #0]
 8003208:	4a11      	ldr	r2, [pc, #68]	; (8003250 <__early_init+0x80>)
 800320a:	0398      	lsls	r0, r3, #14
 800320c:	d5fb      	bpl.n	8003206 <__early_init+0x36>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800320e:	4611      	mov	r1, r2
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8003210:	6853      	ldr	r3, [r2, #4]
 8003212:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8003216:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8003218:	6813      	ldr	r3, [r2, #0]
 800321a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800321e:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8003220:	680b      	ldr	r3, [r1, #0]
 8003222:	4a0b      	ldr	r2, [pc, #44]	; (8003250 <__early_init+0x80>)
 8003224:	019b      	lsls	r3, r3, #6
 8003226:	d5fb      	bpl.n	8003220 <__early_init+0x50>

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003228:	4611      	mov	r1, r2
/*
 * Early initialization code.
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {
 800322a:	b410      	push	{r4}
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <__early_init+0x84>)
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 800322e:	4c0a      	ldr	r4, [pc, #40]	; (8003258 <__early_init+0x88>)
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8003230:	2012      	movs	r0, #18
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8003232:	6054      	str	r4, [r2, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8003234:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8003236:	6853      	ldr	r3, [r2, #4]
 8003238:	f043 0302 	orr.w	r3, r3, #2
 800323c:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800323e:	684b      	ldr	r3, [r1, #4]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d1fa      	bne.n	800323e <__early_init+0x6e>

  stm32_clock_init();
}
 8003248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
 8003254:	40022000 	.word	0x40022000
 8003258:	001d6400 	.word	0x001d6400
 800325c:	00000000 	.word	0x00000000

08003260 <usb_lld_prepare_transmit>:
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003260:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003264:	68c3      	ldr	r3, [r0, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8003266:	b430      	push	{r4, r5}
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003268:	6958      	ldr	r0, [r3, #20]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 800326a:	460c      	mov	r4, r1
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
 800326c:	6842      	ldr	r2, [r0, #4]
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 800326e:	8a19      	ldrh	r1, [r3, #16]
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
 8003270:	7803      	ldrb	r3, [r0, #0]
 8003272:	428a      	cmp	r2, r1
 8003274:	bf28      	it	cs
 8003276:	460a      	movcs	r2, r1
 8003278:	bb03      	cbnz	r3, 80032bc <usb_lld_prepare_transmit+0x5c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 800327a:	4917      	ldr	r1, [pc, #92]	; (80032d8 <usb_lld_prepare_transmit+0x78>)
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 800327c:	1c53      	adds	r3, r2, #1

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 800327e:	6d09      	ldr	r1, [r1, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8003286:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 800328a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800328e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8003292:	6821      	ldr	r1, [r4, #0]

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8003294:	68c0      	ldr	r0, [r0, #12]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8003296:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800329a:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 800329e:	6865      	ldr	r5, [r4, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80032a0:	ea4f 0141 	mov.w	r1, r1, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80032a4:	6062      	str	r2, [r4, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 80032a6:	d007      	beq.n	80032b8 <usb_lld_prepare_transmit+0x58>
 80032a8:	3802      	subs	r0, #2
 80032aa:	1f0a      	subs	r2, r1, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 80032ac:	f830 1f02 	ldrh.w	r1, [r0, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80032b0:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 80032b2:	f842 1f04 	str.w	r1, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80032b6:	d1f9      	bne.n	80032ac <usb_lld_prepare_transmit+0x4c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 80032b8:	bc30      	pop	{r4, r5}
 80032ba:	4770      	bx	lr
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <usb_lld_prepare_transmit+0x78>)
 80032be:	68c1      	ldr	r1, [r0, #12]
 80032c0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80032c2:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 80032c6:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 80032ca:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80032ce:	0040      	lsls	r0, r0, #1
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 80032d0:	bc30      	pop	{r4, r5}
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 80032d2:	f7ff be6d 	b.w	8002fb0 <usb_packet_write_from_queue>
 80032d6:	bf00      	nop
 80032d8:	40005c00 	.word	0x40005c00
 80032dc:	00000000 	.word	0x00000000

080032e0 <usb_lld_prepare_receive>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80032e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80032e4:	68c9      	ldr	r1, [r1, #12]
 80032e6:	698a      	ldr	r2, [r1, #24]

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 80032e8:	6853      	ldr	r3, [r2, #4]
 80032ea:	b133      	cbz	r3, 80032fa <usb_lld_prepare_receive+0x1a>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 80032ec:	8a49      	ldrh	r1, [r1, #18]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	440b      	add	r3, r1
 80032f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032f6:	8213      	strh	r3, [r2, #16]
 80032f8:	4770      	bx	lr
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
    osp->rxpkts = 1;
 80032fa:	2301      	movs	r3, #1
 80032fc:	8213      	strh	r3, [r2, #16]
 80032fe:	4770      	bx	lr

08003300 <usb_lld_init_endpoint>:
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8003300:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8003304:	68db      	ldr	r3, [r3, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8003306:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];

  /* Setting the endpoint type.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	f002 0203 	and.w	r2, r2, #3
 800330e:	3a01      	subs	r2, #1
 8003310:	2a02      	cmp	r2, #2
 8003312:	bf96      	itet	ls
 8003314:	4c2e      	ldrls	r4, [pc, #184]	; (80033d0 <usb_lld_init_endpoint+0xd0>)
 8003316:	f44f 7500 	movhi.w	r5, #512	; 0x200
 800331a:	f834 5012 	ldrhls.w	r5, [r4, r2, lsl #1]
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  /* IN endpoint initially in NAK mode.*/
  if (epcp->in_cb != NULL)
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	b10a      	cbz	r2, 8003326 <usb_lld_init_endpoint+0x26>
    epr |= EPR_STAT_TX_NAK;
 8003322:	f045 0520 	orr.w	r5, r5, #32

  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	b10a      	cbz	r2, 800332e <usb_lld_init_endpoint+0x2e>
    epr |= EPR_STAT_RX_NAK;
 800332a:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 800332e:	f647 0670 	movw	r6, #30832	; 0x7870
  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 8003332:	ea45 0401 	orr.w	r4, r5, r1
 8003336:	f424 4478 	bic.w	r4, r4, #63488	; 0xf800
 800333a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800333e:	008a      	lsls	r2, r1, #2
 8003340:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003344:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003348:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800334c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003350:	6014      	str	r4, [r2, #0]
  EPR_TOGGLE(ep, epr);
 8003352:	6814      	ldr	r4, [r2, #0]
 8003354:	402e      	ands	r6, r5
 8003356:	4074      	eors	r4, r6

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8003358:	8a5d      	ldrh	r5, [r3, #18]
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 800335a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800335e:	f044 0480 	orr.w	r4, r4, #128	; 0x80

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8003362:	2d3e      	cmp	r5, #62	; 0x3e
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 8003364:	6014      	str	r4, [r2, #0]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8003366:	f105 34ff 	add.w	r4, r5, #4294967295
  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 800336a:	d826      	bhi.n	80033ba <usb_lld_init_endpoint+0xba>
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 800336c:	f044 0401 	orr.w	r4, r4, #1
 8003370:	3401      	adds	r4, #1
 8003372:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8003376:	0264      	lsls	r4, r4, #9
 8003378:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
  dp = USB_GET_DESCRIPTOR(ep);
 800337c:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <usb_lld_init_endpoint+0xd4>)
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 800337e:	8a1e      	ldrh	r6, [r3, #16]
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 8003380:	6d12      	ldr	r2, [r2, #80]	; 0x50
  dp->TXCOUNT0 = 0;
 8003382:	2700      	movs	r7, #0
 8003384:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
 8003388:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 800338c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003390:	0049      	lsls	r1, r1, #1
  dp->TXCOUNT0 = 0;
 8003392:	684b      	ldr	r3, [r1, #4]
 8003394:	604f      	str	r7, [r1, #4]
  dp->RXCOUNT0 = nblocks;
 8003396:	68cb      	ldr	r3, [r1, #12]
 8003398:	60cc      	str	r4, [r1, #12]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800339a:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  usbp->pmnext += size;
 800339e:	1993      	adds	r3, r2, r6
 80033a0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 80033a4:	680b      	ldr	r3, [r1, #0]
 80033a6:	600a      	str	r2, [r1, #0]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 80033a8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
  usbp->pmnext += size;
 80033ac:	441d      	add	r5, r3
 80033ae:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 80033b2:	688a      	ldr	r2, [r1, #8]
}
 80033b4:	bcf0      	pop	{r4, r5, r6, r7}
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 80033b6:	608b      	str	r3, [r1, #8]
}
 80033b8:	4770      	bx	lr
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 80033ba:	f044 041f 	orr.w	r4, r4, #31
 80033be:	3401      	adds	r4, #1
 80033c0:	1164      	asrs	r4, r4, #5
 80033c2:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 80033c6:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80033ca:	b2a4      	uxth	r4, r4
 80033cc:	e7d6      	b.n	800337c <usb_lld_init_endpoint+0x7c>
 80033ce:	bf00      	nop
 80033d0:	08004730 	.word	0x08004730
 80033d4:	40005c00 	.word	0x40005c00
	...

080033e0 <usb_lld_reset>:
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 80033e0:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 80033e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 80033e4:	68c9      	ldr	r1, [r1, #12]
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 80033e6:	4b0d      	ldr	r3, [pc, #52]	; (800341c <usb_lld_reset+0x3c>)
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 80033e8:	2900      	cmp	r1, #0

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 80033ea:	4d0d      	ldr	r5, [pc, #52]	; (8003420 <usb_lld_reset+0x40>)
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 80033ec:	f04f 0400 	mov.w	r4, #0
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
 80033f0:	bf0c      	ite	eq
 80033f2:	f44f 471c 	moveq.w	r7, #39936	; 0x9c00
 80033f6:	f44f 471e 	movne.w	r7, #40448	; 0x9e00
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
  STM32_USB->DADDR  = DADDR_EF;
 80033fa:	f04f 0e80 	mov.w	lr, #128	; 0x80
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 80033fe:	2640      	movs	r6, #64	; 0x40
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8003400:	651c      	str	r4, [r3, #80]	; 0x50
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8003402:	4621      	mov	r1, r4
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
 8003404:	645c      	str	r4, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8003406:	f8c3 e04c 	str.w	lr, [r3, #76]	; 0x4c
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
  STM32_USB->CNTR = cntr;
 800340a:	641f      	str	r7, [r3, #64]	; 0x40
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 800340c:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 8003410:	60c5      	str	r5, [r0, #12]
  usb_lld_init_endpoint(usbp, 0);
}
 8003412:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8003416:	f7ff bf73 	b.w	8003300 <usb_lld_init_endpoint>
 800341a:	bf00      	nop
 800341c:	40005c00 	.word	0x40005c00
 8003420:	080046e0 	.word	0x080046e0
	...

08003430 <Vector90>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8003430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8003434:	4b99      	ldr	r3, [pc, #612]	; (800369c <Vector90+0x26c>)
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8003436:	b085      	sub	sp, #20
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8003438:	6c5c      	ldr	r4, [r3, #68]	; 0x44

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 800343a:	0563      	lsls	r3, r4, #21
 800343c:	f100 819c 	bmi.w	8003778 <Vector90+0x348>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
 8003440:	0527      	lsls	r7, r4, #20
 8003442:	d511      	bpl.n	8003468 <Vector90+0x38>
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8003444:	f8df b258 	ldr.w	fp, [pc, #600]	; 80036a0 <Vector90+0x270>
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8003448:	4a94      	ldr	r2, [pc, #592]	; (800369c <Vector90+0x26c>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800344a:	f8db 1004 	ldr.w	r1, [fp, #4]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 800344e:	6c13      	ldr	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8003450:	680d      	ldr	r5, [r1, #0]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8003452:	f043 0308 	orr.w	r3, r3, #8
 8003456:	6413      	str	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8003458:	b115      	cbz	r5, 8003460 <Vector90+0x30>
 800345a:	4658      	mov	r0, fp
 800345c:	2103      	movs	r1, #3
 800345e:	47a8      	blx	r5
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 8003460:	4b8e      	ldr	r3, [pc, #568]	; (800369c <Vector90+0x26c>)
 8003462:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003466:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
 8003468:	04e6      	lsls	r6, r4, #19
 800346a:	d508      	bpl.n	800347e <Vector90+0x4e>
    uint32_t fnr = STM32_USB->FNR;
 800346c:	4b8b      	ldr	r3, [pc, #556]	; (800369c <Vector90+0x26c>)
 800346e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 8003470:	0415      	lsls	r5, r2, #16
 8003472:	f140 8171 	bpl.w	8003758 <Vector90+0x328>
      /* Just noise, going back in SUSPEND mode, reference manual 22.4.5,
         table 169.*/
      STM32_USB->CNTR |= CNTR_LP_MODE;
    }
#endif
    STM32_USB->ISTR = ~ISTR_WKUP;
 8003476:	4b89      	ldr	r3, [pc, #548]	; (800369c <Vector90+0x26c>)
 8003478:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* SOF handling.*/
  if (istr & ISTR_SOF) {
 800347e:	05a0      	lsls	r0, r4, #22
 8003480:	d50b      	bpl.n	800349a <Vector90+0x6a>
    _usb_isr_invoke_sof_cb(usbp);
 8003482:	f8df b21c 	ldr.w	fp, [pc, #540]	; 80036a0 <Vector90+0x270>
 8003486:	f8db 3004 	ldr.w	r3, [fp, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	b10b      	cbz	r3, 8003492 <Vector90+0x62>
 800348e:	4658      	mov	r0, fp
 8003490:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 8003492:	4b82      	ldr	r3, [pc, #520]	; (800369c <Vector90+0x26c>)
 8003494:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003498:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 800349a:	0421      	lsls	r1, r4, #16
 800349c:	f140 80d3 	bpl.w	8003646 <Vector90+0x216>
 80034a0:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80036a0 <Vector90+0x270>
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 80034a4:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 800369c <Vector90+0x26c>

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
 80034a8:	f004 040f 	and.w	r4, r4, #15
 80034ac:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80034b0:	f108 4580 	add.w	r5, r8, #1073741824	; 0x40000000
 80034b4:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 80034b8:	f8d5 9000 	ldr.w	r9, [r5]
    const USBEndpointConfig *epcp = usbp->epc[ep];
 80034bc:	1ca6      	adds	r6, r4, #2
 80034be:	eb0b 0386 	add.w	r3, fp, r6, lsl #2

    if (epr & EPR_CTR_TX) {
 80034c2:	f019 0f80 	tst.w	r9, #128	; 0x80
  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
    const USBEndpointConfig *epcp = usbp->epc[ep];
 80034c6:	685f      	ldr	r7, [r3, #4]

    if (epr & EPR_CTR_TX) {
 80034c8:	d065      	beq.n	8003596 <Vector90+0x166>
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 80034ca:	682b      	ldr	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 80034cc:	00e0      	lsls	r0, r4, #3
    const USBEndpointConfig *epcp = usbp->epc[ep];

    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 80034ce:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80034d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034da:	602b      	str	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 80034dc:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
      epcp->in_state->txcnt  += transmitted;
 80034e0:	f8d7 e014 	ldr.w	lr, [r7, #20]
 80034e4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80034e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 80034ec:	4403      	add	r3, r0
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	6859      	ldr	r1, [r3, #4]
      epcp->in_state->txcnt  += transmitted;
 80034f2:	f8de 3008 	ldr.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
 80034f6:	f8de 2004 	ldr.w	r2, [lr, #4]
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
      epcp->in_state->txcnt  += transmitted;
 80034fa:	440b      	add	r3, r1
 80034fc:	f8ce 3008 	str.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
      if (n > 0) {
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f000 80bd 	beq.w	8003680 <Vector90+0x250>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
 8003506:	8a3a      	ldrh	r2, [r7, #16]
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
 8003508:	f89e c000 	ldrb.w	ip, [lr]
 800350c:	429a      	cmp	r2, r3
 800350e:	bf28      	it	cs
 8003510:	461a      	movcs	r2, r3
 8003512:	f1bc 0f00 	cmp.w	ip, #0
 8003516:	f040 8112 	bne.w	800373e <Vector90+0x30e>
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 800351a:	1c53      	adds	r3, r2, #1
 800351c:	9301      	str	r3, [sp, #4]
        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 800351e:	f8de 300c 	ldr.w	r3, [lr, #12]
 8003522:	4419      	add	r1, r3
 8003524:	f8ce 100c 	str.w	r1, [lr, #12]
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8003528:	f8da e050 	ldr.w	lr, [sl, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800352c:	9b01      	ldr	r3, [sp, #4]
 800352e:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 8003532:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8003536:	4470      	add	r0, lr
 8003538:	0040      	lsls	r0, r0, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800353a:	f8d0 e000 	ldr.w	lr, [r0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800353e:	085b      	lsrs	r3, r3, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8003540:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 8003544:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8003548:	f8d0 c004 	ldr.w	ip, [r0, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800354c:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8003550:	6042      	str	r2, [r0, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 8003552:	d008      	beq.n	8003566 <Vector90+0x136>
 8003554:	3902      	subs	r1, #2
 8003556:	f1ae 0204 	sub.w	r2, lr, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 800355a:	f831 0f02 	ldrh.w	r0, [r1, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800355e:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8003560:	f842 0f04 	str.w	r0, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8003564:	d1f9      	bne.n	800355a <Vector90+0x12a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003566:	2320      	movs	r3, #32
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003570:	f508 48b8 	add.w	r8, r8, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8003574:	f8d8 3000 	ldr.w	r3, [r8]
 8003578:	2200      	movs	r2, #0
 800357a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800357e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003582:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800358a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358e:	f8c8 3000 	str.w	r3, [r8]
 8003592:	f382 8811 	msr	BASEPRI, r2
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
 8003596:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 800359a:	d04f      	beq.n	800363c <Vector90+0x20c>
      EPR_CLEAR_CTR_RX(ep);
 800359c:	682b      	ldr	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 800359e:	f419 6f00 	tst.w	r9, #2048	; 0x800
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
      EPR_CLEAR_CTR_RX(ep);
 80035a2:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80035a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ae:	602b      	str	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 80035b0:	d15e      	bne.n	8003670 <Vector90+0x240>
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80035b2:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 80035b6:	69b9      	ldr	r1, [r7, #24]
 80035b8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80035bc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80035c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80035c4:	005b      	lsls	r3, r3, #1
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	4610      	mov	r0, r2
 80035ca:	9201      	str	r2, [sp, #4]

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 80035cc:	780a      	ldrb	r2, [r1, #0]
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80035ce:	f3c0 0809 	ubfx	r8, r0, #0, #10

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 80035d2:	2a00      	cmp	r2, #0
 80035d4:	d166      	bne.n	80036a4 <Vector90+0x274>
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80035d6:	689a      	ldr	r2, [r3, #8]

  n = (n + 1) / 2;
 80035d8:	f108 0301 	add.w	r3, r8, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80035dc:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 80035e0:	f502 5240 	add.w	r2, r2, #12288	; 0x3000

  n = (n + 1) / 2;
  while (n > 0) {
 80035e4:	085b      	lsrs	r3, r3, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80035e6:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
                                   epcp->out_state->mode.queue.rxqueue,
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
 80035ea:	68c8      	ldr	r0, [r1, #12]
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 80035ec:	d009      	beq.n	8003602 <Vector90+0x1d2>
 80035ee:	468e      	mov	lr, r1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80035f0:	f852 1b04 	ldr.w	r1, [r2], #4
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 80035f4:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80035f6:	f820 1b02 	strh.w	r1, [r0], #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 80035fa:	d1f9      	bne.n	80035f0 <Vector90+0x1c0>
 80035fc:	4671      	mov	r1, lr
 80035fe:	f8de 000c 	ldr.w	r0, [lr, #12]
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
 8003602:	4440      	add	r0, r8
 8003604:	60c8      	str	r0, [r1, #12]
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 8003606:	8a08      	ldrh	r0, [r1, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8003608:	8a7f      	ldrh	r7, [r7, #18]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 800360a:	688a      	ldr	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 800360c:	684b      	ldr	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;
 800360e:	3801      	subs	r0, #1
 8003610:	b280      	uxth	r0, r0
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8003612:	4442      	add	r2, r8
        epcp->out_state->rxsize             -= n;
 8003614:	ebc8 0303 	rsb	r3, r8, r3
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8003618:	45b8      	cmp	r8, r7
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 800361a:	8208      	strh	r0, [r1, #16]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 800361c:	608a      	str	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 800361e:	604b      	str	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8003620:	d316      	bcc.n	8003650 <Vector90+0x220>
 8003622:	b1a8      	cbz	r0, 8003650 <Vector90+0x220>
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
        }
        else {
          /* Transfer not complete, there are more packets to receive.*/
          EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8003624:	682b      	ldr	r3, [r5, #0]
 8003626:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800362a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800363a:	602b      	str	r3, [r5, #0]
        }
      }
    }
    istr = STM32_USB->ISTR;
 800363c:	f8da 4044 	ldr.w	r4, [sl, #68]	; 0x44
    _usb_isr_invoke_sof_cb(usbp);
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8003640:	0423      	lsls	r3, r4, #16
 8003642:	f53f af31 	bmi.w	80034a8 <Vector90+0x78>
    }
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
}
 8003646:	b005      	add	sp, #20
 8003648:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
 800364c:	f7fd ba70 	b.w	8000b30 <_port_irq_epilogue>

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
 8003650:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8003654:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 8003658:	2101      	movs	r1, #1
 800365a:	40a1      	lsls	r1, r4
 800365c:	6872      	ldr	r2, [r6, #4]
 800365e:	ea23 0301 	bic.w	r3, r3, r1
 8003662:	68d2      	ldr	r2, [r2, #12]
 8003664:	f8ab 300a 	strh.w	r3, [fp, #10]
 8003668:	4621      	mov	r1, r4
 800366a:	480d      	ldr	r0, [pc, #52]	; (80036a0 <Vector90+0x270>)
 800366c:	4790      	blx	r2
 800366e:	e7e5      	b.n	800363c <Vector90+0x20c>
      EPR_CLEAR_CTR_RX(ep);
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
 8003670:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 8003674:	6873      	ldr	r3, [r6, #4]
 8003676:	4621      	mov	r1, r4
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4809      	ldr	r0, [pc, #36]	; (80036a0 <Vector90+0x270>)
 800367c:	4798      	blx	r3
 800367e:	e7dd      	b.n	800363c <Vector90+0x20c>
        usb_lld_start_in(usbp, ep);
        osalSysUnlockFromISR();
      }
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
 8003680:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <Vector90+0x270>)
 8003682:	2201      	movs	r2, #1
 8003684:	891b      	ldrh	r3, [r3, #8]
 8003686:	40a2      	lsls	r2, r4
 8003688:	ea23 0302 	bic.w	r3, r3, r2
 800368c:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <Vector90+0x270>)
 800368e:	4621      	mov	r1, r4
 8003690:	8113      	strh	r3, [r2, #8]
 8003692:	4610      	mov	r0, r2
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4798      	blx	r3
 8003698:	e77d      	b.n	8003596 <Vector90+0x166>
 800369a:	bf00      	nop
 800369c:	40005c00 	.word	0x40005c00
 80036a0:	20000b5c 	.word	0x20000b5c
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80036a4:	689b      	ldr	r3, [r3, #8]

  nhw = n / 2;
  while (nhw > 0) {
 80036a6:	ea5f 0258 	movs.w	r2, r8, lsr #1
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80036aa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80036ae:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80036b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
 80036b6:	68c9      	ldr	r1, [r1, #12]
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80036b8:	9302      	str	r3, [sp, #8]

  nhw = n / 2;
  while (nhw > 0) {
 80036ba:	9203      	str	r2, [sp, #12]
 80036bc:	d021      	beq.n	8003702 <Vector90+0x2d2>
 80036be:	4610      	mov	r0, r2
 80036c0:	469e      	mov	lr, r3
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 80036c2:	694b      	ldr	r3, [r1, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 80036c4:	f85e 2b04 	ldr.w	r2, [lr], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 80036c8:	f103 0901 	add.w	r9, r3, #1
 80036cc:	f8c1 9014 	str.w	r9, [r1, #20]
 80036d0:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 80036d2:	690b      	ldr	r3, [r1, #16]
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 80036d4:	ea4f 2c12 	mov.w	ip, r2, lsr #8
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
 80036d8:	694a      	ldr	r2, [r1, #20]
 80036da:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 80036dc:	bf28      	it	cs
 80036de:	68ca      	ldrcs	r2, [r1, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 80036e0:	1c53      	adds	r3, r2, #1
 80036e2:	614b      	str	r3, [r1, #20]
 80036e4:	f882 c000 	strb.w	ip, [r2]
    if (iqp->q_wrptr >= iqp->q_top)
 80036e8:	690b      	ldr	r3, [r1, #16]
 80036ea:	694a      	ldr	r2, [r1, #20]
 80036ec:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 80036ee:	bf24      	itt	cs
 80036f0:	68cb      	ldrcs	r3, [r1, #12]
 80036f2:	614b      	strcs	r3, [r1, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 80036f4:	3801      	subs	r0, #1
 80036f6:	d1e4      	bne.n	80036c2 <Vector90+0x292>
 80036f8:	9b02      	ldr	r3, [sp, #8]
 80036fa:	9a03      	ldr	r2, [sp, #12]
 80036fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003700:	9302      	str	r3, [sp, #8]
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 8003702:	9b01      	ldr	r3, [sp, #4]
 8003704:	07da      	lsls	r2, r3, #31
 8003706:	d50b      	bpl.n	8003720 <Vector90+0x2f0>
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 8003708:	9a02      	ldr	r2, [sp, #8]
 800370a:	694b      	ldr	r3, [r1, #20]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	1c58      	adds	r0, r3, #1
 8003710:	6148      	str	r0, [r1, #20]
 8003712:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 8003714:	690b      	ldr	r3, [r1, #16]
 8003716:	694a      	ldr	r2, [r1, #20]
 8003718:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 800371a:	bf24      	itt	cs
 800371c:	68cb      	ldrcs	r3, [r1, #12]
 800371e:	614b      	strcs	r3, [r1, #20]
 8003720:	2320      	movs	r3, #32
 8003722:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  osalSysLockFromISR();

  iqp->q_counter += n;
 8003726:	688b      	ldr	r3, [r1, #8]
 8003728:	4608      	mov	r0, r1
 800372a:	4443      	add	r3, r8
 800372c:	608b      	str	r3, [r1, #8]
 800372e:	2100      	movs	r1, #0
 8003730:	f7fd fe4e 	bl	80013d0 <chThdDequeueAllI>
 8003734:	2300      	movs	r3, #0
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	69b9      	ldr	r1, [r7, #24]
 800373c:	e763      	b.n	8003606 <Vector90+0x1d6>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 800373e:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8003742:	f8de 100c 	ldr.w	r1, [lr, #12]
 8003746:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800374a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800374e:	4418      	add	r0, r3
 8003750:	0040      	lsls	r0, r0, #1
 8003752:	f7ff fc2d 	bl	8002fb0 <usb_packet_write_from_queue>
 8003756:	e706      	b.n	8003566 <Vector90+0x136>
  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8003758:	f8df b074 	ldr.w	fp, [pc, #116]	; 80037d0 <Vector90+0x3a0>

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 800375c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800375e:	f8db 1004 	ldr.w	r1, [fp, #4]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8003762:	f022 0208 	bic.w	r2, r2, #8
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8003766:	680d      	ldr	r5, [r1, #0]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800376a:	2d00      	cmp	r5, #0
 800376c:	f43f ae83 	beq.w	8003476 <Vector90+0x46>
 8003770:	4658      	mov	r0, fp
 8003772:	2104      	movs	r1, #4
 8003774:	47a8      	blx	r5
 8003776:	e67e      	b.n	8003476 <Vector90+0x46>
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8003778:	f8df b054 	ldr.w	fp, [pc, #84]	; 80037d0 <Vector90+0x3a0>
  usbp->status        = 0;
 800377c:	2300      	movs	r3, #0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 800377e:	2202      	movs	r2, #2
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8003780:	4619      	mov	r1, r3
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 8003782:	f8ab 307c 	strh.w	r3, [fp, #124]	; 0x7c
  usbp->address       = 0;
 8003786:	f88b 307e 	strb.w	r3, [fp, #126]	; 0x7e
  usbp->configuration = 0;
 800378a:	f88b 307f 	strb.w	r3, [fp, #127]	; 0x7f
  usbp->transmitting  = 0;
 800378e:	f8ab 3008 	strh.w	r3, [fp, #8]
  usbp->receiving     = 0;
 8003792:	f8ab 300a 	strh.w	r3, [fp, #10]
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8003796:	f88b 2000 	strb.w	r2, [fp]
 800379a:	f10b 0308 	add.w	r3, fp, #8
 800379e:	f10b 0228 	add.w	r2, fp, #40	; 0x28
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 80037a2:	f843 1f04 	str.w	r1, [r3, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 80037a6:	4293      	cmp	r3, r2
    usbp->epc[i] = NULL;
 80037a8:	f04f 0500 	mov.w	r5, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 80037ac:	d1f9      	bne.n	80037a2 <Vector90+0x372>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 80037ae:	4808      	ldr	r0, [pc, #32]	; (80037d0 <Vector90+0x3a0>)
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 80037b0:	f88b 5064 	strb.w	r5, [fp, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 80037b4:	f7ff fe14 	bl	80033e0 <usb_lld_reset>
  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
    _usb_reset(usbp);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 80037b8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	b113      	cbz	r3, 80037c6 <Vector90+0x396>
 80037c0:	4629      	mov	r1, r5
 80037c2:	4803      	ldr	r0, [pc, #12]	; (80037d0 <Vector90+0x3a0>)
 80037c4:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_RESET;
 80037c6:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <Vector90+0x3a4>)
 80037c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44
 80037ce:	e637      	b.n	8003440 <Vector90+0x10>
 80037d0:	20000b5c 	.word	0x20000b5c
 80037d4:	40005c00 	.word	0x40005c00
	...

080037e0 <_pal_lld_setgroupmode>:
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 80037e0:	2a03      	cmp	r2, #3
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 80037e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 80037e4:	d02c      	beq.n	8003840 <_pal_lld_setgroupmode+0x60>
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
 80037e6:	2a04      	cmp	r2, #4
    port->BRR = mask;
 80037e8:	bf08      	it	eq
 80037ea:	6141      	streq	r1, [r0, #20]
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	461c      	mov	r4, r3
 80037f0:	461d      	mov	r5, r3
 80037f2:	461e      	mov	r6, r3

  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
 80037f4:	f8df e04c 	ldr.w	lr, [pc, #76]	; 8003844 <_pal_lld_setgroupmode+0x64>
 80037f8:	2708      	movs	r7, #8
 80037fa:	f81e 2002 	ldrb.w	r2, [lr, r2]
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 80037fe:	f011 0f80 	tst.w	r1, #128	; 0x80
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
 8003802:	ea4f 1505 	mov.w	r5, r5, lsl #4
    mh <<= 4;
    crl <<= 4;
 8003806:	ea4f 1303 	mov.w	r3, r3, lsl #4
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
 800380a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    crl <<= 4;
    crh <<= 4;
 800380e:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
 8003812:	bf0c      	ite	eq
 8003814:	f045 050f 	orreq.w	r5, r5, #15
    else
      crl |= cfg;
 8003818:	4313      	orrne	r3, r2
    if ((mask & 0x8000) == 0)
 800381a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
      mh |= 0xf;
 800381e:	bf0c      	ite	eq
 8003820:	f046 060f 	orreq.w	r6, r6, #15
    else
      crh |= cfg;
 8003824:	4314      	orrne	r4, r2
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 8003826:	3f01      	subs	r7, #1
      crl |= cfg;
    if ((mask & 0x8000) == 0)
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
 8003828:	ea4f 0141 	mov.w	r1, r1, lsl #1
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 800382c:	d1e7      	bne.n	80037fe <_pal_lld_setgroupmode+0x1e>
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
  }
  port->CRH = (port->CRH & mh) | crh;
 800382e:	6842      	ldr	r2, [r0, #4]
 8003830:	4016      	ands	r6, r2
 8003832:	4334      	orrs	r4, r6
 8003834:	6044      	str	r4, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 8003836:	6802      	ldr	r2, [r0, #0]
 8003838:	4015      	ands	r5, r2
 800383a:	432b      	orrs	r3, r5
 800383c:	6003      	str	r3, [r0, #0]
 800383e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
 8003840:	6101      	str	r1, [r0, #16]
 8003842:	e7d3      	b.n	80037ec <_pal_lld_setgroupmode+0xc>
 8003844:	08004710 	.word	0x08004710
	...

08003850 <chSchWakeupS.constprop.55>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8003850:	b470      	push	{r4, r5, r6}
 8003852:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8003854:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <chSchWakeupS.constprop.55+0x54>)
 8003856:	6881      	ldr	r1, [r0, #8]
 8003858:	699d      	ldr	r5, [r3, #24]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800385a:	2600      	movs	r6, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800385c:	68a8      	ldr	r0, [r5, #8]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800385e:	6226      	str	r6, [r4, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8003860:	4281      	cmp	r1, r0
 8003862:	d80b      	bhi.n	800387c <chSchWakeupS.constprop.55+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8003864:	7726      	strb	r6, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8003866:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	4291      	cmp	r1, r2
 800386c:	d9fb      	bls.n	8003866 <chSchWakeupS.constprop.55+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800386e:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8003870:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8003872:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8003874:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8003876:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8003878:	bc70      	pop	{r4, r5, r6}
 800387a:	4770      	bx	lr
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 800387c:	461a      	mov	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800387e:	772e      	strb	r6, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8003880:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8003882:	6891      	ldr	r1, [r2, #8]
 8003884:	4288      	cmp	r0, r1
 8003886:	d9fb      	bls.n	8003880 <chSchWakeupS.constprop.55+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8003888:	6850      	ldr	r0, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800388a:	2601      	movs	r6, #1
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800388c:	6068      	str	r0, [r5, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800388e:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8003890:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 8003892:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8003894:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 8003896:	4629      	mov	r1, r5
 8003898:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800389a:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800389c:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 800389e:	f7fc bcaf 	b.w	8000200 <_port_switch>
 80038a2:	bf00      	nop
 80038a4:	20001030 	.word	0x20001030
	...

080038b0 <chThdCreateStatic.constprop.54>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
 80038b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b4:	469a      	mov	sl, r3
 80038b6:	4696      	mov	lr, r2
 80038b8:	4604      	mov	r4, r0
 80038ba:	2320      	movs	r3, #32
 80038bc:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80038c0:	4e17      	ldr	r6, [pc, #92]	; (8003920 <chThdCreateStatic.constprop.54+0x70>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80038c2:	3924      	subs	r1, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80038c4:	6972      	ldr	r2, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80038c6:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8003924 <chThdCreateStatic.constprop.54+0x74>
 80038ca:	2500      	movs	r5, #0
 80038cc:	1847      	adds	r7, r0, r1
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80038ce:	f100 0328 	add.w	r3, r0, #40	; 0x28
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80038d2:	f100 0c24 	add.w	ip, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80038d6:	f04f 0902 	mov.w	r9, #2
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80038da:	f04f 0801 	mov.w	r8, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80038de:	60c7      	str	r7, [r0, #12]
 80038e0:	f840 a001 	str.w	sl, [r0, r1]
 80038e4:	607d      	str	r5, [r7, #4]
 80038e6:	f8c7 b020 	str.w	fp, [r7, #32]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80038ea:	f8c0 e008 	str.w	lr, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80038ee:	6106      	str	r6, [r0, #16]
 80038f0:	6142      	str	r2, [r0, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80038f2:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80038f4:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 80038f8:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80038fa:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80038fc:	6185      	str	r5, [r0, #24]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80038fe:	f880 901c 	strb.w	r9, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8003902:	f880 801e 	strb.w	r8, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8003906:	6110      	str	r0, [r2, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8003908:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800390c:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800390e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003910:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8003912:	f7ff ff9d 	bl	8003850 <chSchWakeupS.constprop.55>
 8003916:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800391a:	4620      	mov	r0, r4
 800391c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003920:	20001030 	.word	0x20001030
 8003924:	08000211 	.word	0x08000211
	...

08003930 <chTMStartMeasurementX.constprop.52>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8003930:	4b01      	ldr	r3, [pc, #4]	; (8003938 <chTMStartMeasurementX.constprop.52+0x8>)
 8003932:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8003934:	6083      	str	r3, [r0, #8]
 8003936:	4770      	bx	lr
 8003938:	e0001000 	.word	0xe0001000
 800393c:	00000000 	.word	0x00000000

08003940 <dmaStreamAllocate.constprop.33>:
 * @retval FALSE        no error, stream taken.
 * @retval TRUE         error, stream already taken.
 *
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 8003940:	b4f0      	push	{r4, r5, r6, r7}
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 8003942:	4d21      	ldr	r5, [pc, #132]	; (80039c8 <dmaStreamAllocate.constprop.33+0x88>)
 8003944:	7a44      	ldrb	r4, [r0, #9]
 8003946:	2301      	movs	r3, #1
 8003948:	682a      	ldr	r2, [r5, #0]
 800394a:	fa03 f604 	lsl.w	r6, r3, r4
 800394e:	4216      	tst	r6, r2
 8003950:	d135      	bne.n	80039be <dmaStreamAllocate.constprop.33+0x7e>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <dmaStreamAllocate.constprop.33+0x8c>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8003954:	4332      	orrs	r2, r6
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8003956:	4f1e      	ldr	r7, [pc, #120]	; (80039d0 <dmaStreamAllocate.constprop.33+0x90>)
 8003958:	eb03 06c4 	add.w	r6, r3, r4, lsl #3
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800395c:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8003960:	0653      	lsls	r3, r2, #25
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8003962:	602a      	str	r2, [r5, #0]
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8003964:	6077      	str	r7, [r6, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8003966:	d004      	beq.n	8003972 <dmaStreamAllocate.constprop.33+0x32>
    rccEnableDMA1(FALSE);
 8003968:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <dmaStreamAllocate.constprop.33+0x94>)
 800396a:	6953      	ldr	r3, [r2, #20]
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	6153      	str	r3, [r2, #20]
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8003972:	6802      	ldr	r2, [r0, #0]
 8003974:	6846      	ldr	r6, [r0, #4]
 8003976:	6815      	ldr	r5, [r2, #0]
 8003978:	240f      	movs	r4, #15
 800397a:	f025 050f 	bic.w	r5, r5, #15
 800397e:	6015      	str	r5, [r2, #0]
 8003980:	7a05      	ldrb	r5, [r0, #8]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8003982:	2300      	movs	r3, #0
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8003984:	40ac      	lsls	r4, r5
 8003986:	6034      	str	r4, [r6, #0]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8003988:	6013      	str	r3, [r2, #0]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 800398a:	b1d1      	cbz	r1, 80039c2 <dmaStreamAllocate.constprop.33+0x82>
    nvicEnableVector(dmastp->vector, priority);
 800398c:	7a81      	ldrb	r1, [r0, #10]
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800398e:	2001      	movs	r0, #1
 8003990:	094a      	lsrs	r2, r1, #5
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8003992:	f101 4460 	add.w	r4, r1, #3758096384	; 0xe0000000
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8003996:	f001 011f 	and.w	r1, r1, #31
 800399a:	fa00 f101 	lsl.w	r1, r0, r1
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800399e:	4618      	mov	r0, r3
 80039a0:	0092      	lsls	r2, r2, #2
 80039a2:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 80039a6:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80039aa:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 80039ae:	25a0      	movs	r5, #160	; 0xa0
 80039b0:	f884 5300 	strb.w	r5, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80039b4:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80039b8:	6011      	str	r1, [r2, #0]

  return FALSE;
}
 80039ba:	bcf0      	pop	{r4, r5, r6, r7}
 80039bc:	4770      	bx	lr

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 80039be:	4618      	mov	r0, r3
 80039c0:	e7fb      	b.n	80039ba <dmaStreamAllocate.constprop.33+0x7a>
  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 80039c2:	4608      	mov	r0, r1
 80039c4:	e7f9      	b.n	80039ba <dmaStreamAllocate.constprop.33+0x7a>
 80039c6:	bf00      	nop
 80039c8:	200011e8 	.word	0x200011e8
 80039cc:	20001180 	.word	0x20001180
 80039d0:	200011b8 	.word	0x200011b8
 80039d4:	40021000 	.word	0x40021000
	...

080039e0 <spiSelect.constprop.29>:
 80039e0:	2320      	movs	r3, #32
 80039e2:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 80039e6:	4a05      	ldr	r2, [pc, #20]	; (80039fc <spiSelect.constprop.29+0x1c>)
 80039e8:	2301      	movs	r3, #1
 80039ea:	6852      	ldr	r2, [r2, #4]
 80039ec:	2100      	movs	r1, #0
 80039ee:	8910      	ldrh	r0, [r2, #8]
 80039f0:	6852      	ldr	r2, [r2, #4]
 80039f2:	4083      	lsls	r3, r0
 80039f4:	6153      	str	r3, [r2, #20]
 80039f6:	f381 8811 	msr	BASEPRI, r1
 80039fa:	4770      	bx	lr
 80039fc:	200011b8 	.word	0x200011b8

08003a00 <spiUnselect.constprop.27>:
 8003a00:	2320      	movs	r3, #32
 8003a02:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8003a06:	4a05      	ldr	r2, [pc, #20]	; (8003a1c <spiUnselect.constprop.27+0x1c>)
 8003a08:	2301      	movs	r3, #1
 8003a0a:	6852      	ldr	r2, [r2, #4]
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	8910      	ldrh	r0, [r2, #8]
 8003a10:	6852      	ldr	r2, [r2, #4]
 8003a12:	4083      	lsls	r3, r0
 8003a14:	6113      	str	r3, [r2, #16]
 8003a16:	f381 8811 	msr	BASEPRI, r1
 8003a1a:	4770      	bx	lr
 8003a1c:	200011b8 	.word	0x200011b8

08003a20 <spiSend.constprop.25>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	4607      	mov	r7, r0
 8003a24:	2320      	movs	r3, #32
 8003a26:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartSendI(spip, n, txbuf);
 8003a2a:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <spiSend.constprop.25+0x60>)
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8003a2c:	f8df c058 	ldr.w	ip, [pc, #88]	; 8003a88 <spiSend.constprop.25+0x68>
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8003a30:	461d      	mov	r5, r3
 8003a32:	6a18      	ldr	r0, [r3, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8003a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8003a36:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8003a38:	6804      	ldr	r4, [r0, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8003a3a:	6812      	ldr	r2, [r2, #0]
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8003a3c:	f8d3 e028 	ldr.w	lr, [r3, #40]	; 0x28
 8003a40:	2003      	movs	r0, #3

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8003a42:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8003a46:	f8c4 c00c 	str.w	ip, [r4, #12]
 8003a4a:	7018      	strb	r0, [r3, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8003a4c:	6067      	str	r7, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8003a4e:	f8c4 e000 	str.w	lr, [r4]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8003a52:	60d1      	str	r1, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8003a54:	6057      	str	r7, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8003a56:	6016      	str	r6, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	490a      	ldr	r1, [pc, #40]	; (8003a84 <spiSend.constprop.25+0x64>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6023      	str	r3, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 8003a62:	6813      	ldr	r3, [r2, #0]
 8003a64:	6989      	ldr	r1, [r1, #24]
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	f845 1f08 	str.w	r1, [r5, #8]!
  tp->p_u.wttrp = trp;
 8003a70:	620d      	str	r5, [r1, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8003a72:	f7fd f8cd 	bl	8000c10 <chSchGoSleepS>
 8003a76:	2300      	movs	r3, #0
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	200011b8 	.word	0x200011b8
 8003a84:	20001030 	.word	0x20001030
 8003a88:	200011ec 	.word	0x200011ec
 8003a8c:	00000000 	.word	0x00000000

08003a90 <spi_lld_receive.constprop.24>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {
 8003a90:	b4f0      	push	{r4, r5, r6, r7}

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8003a92:	4c0d      	ldr	r4, [pc, #52]	; (8003ac8 <spi_lld_receive.constprop.24+0x38>)
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8003a94:	4f0d      	ldr	r7, [pc, #52]	; (8003acc <spi_lld_receive.constprop.24+0x3c>)
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8003a96:	f104 0220 	add.w	r2, r4, #32
 8003a9a:	ca2c      	ldmia	r2, {r2, r3, r5}

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8003a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8003a9e:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8003aa0:	681b      	ldr	r3, [r3, #0]
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8003aa2:	f045 0480 	orr.w	r4, r5, #128	; 0x80
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8003aa6:	60d1      	str	r1, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8003aa8:	6050      	str	r0, [r2, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8003aaa:	6014      	str	r4, [r2, #0]

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8003aac:	60df      	str	r7, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8003aae:	6058      	str	r0, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8003ab0:	601e      	str	r6, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8003ab2:	6811      	ldr	r1, [r2, #0]
  dmaStreamEnable(spip->dmatx);
}
 8003ab4:	bcf0      	pop	{r4, r5, r6, r7}

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);

  dmaStreamEnable(spip->dmarx);
 8003ab6:	f041 0101 	orr.w	r1, r1, #1
 8003aba:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	200011b8 	.word	0x200011b8
 8003acc:	20001028 	.word	0x20001028

08003ad0 <_strtok.constprop.13>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8003ad0:	b538      	push	{r3, r4, r5, lr}
 8003ad2:	460d      	mov	r5, r1
  char *token;
  if (str)
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	b190      	cbz	r0, 8003afe <_strtok.constprop.13+0x2e>
    *saveptr = str;
 8003ad8:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 8003ada:	4620      	mov	r0, r4
 8003adc:	490b      	ldr	r1, [pc, #44]	; (8003b0c <_strtok.constprop.13+0x3c>)
 8003ade:	f000 f927 	bl	8003d30 <strspn>
 8003ae2:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	4909      	ldr	r1, [pc, #36]	; (8003b0c <_strtok.constprop.13+0x3c>)
 8003ae8:	f000 f8fa 	bl	8003ce0 <strpbrk>
  if (*saveptr)
 8003aec:	b160      	cbz	r0, 8003b08 <_strtok.constprop.13+0x38>
    *(*saveptr)++ = '\0';
 8003aee:	1c42      	adds	r2, r0, #1
 8003af0:	2300      	movs	r3, #0
 8003af2:	602a      	str	r2, [r5, #0]
 8003af4:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8003af6:	7823      	ldrb	r3, [r4, #0]
 8003af8:	b123      	cbz	r3, 8003b04 <_strtok.constprop.13+0x34>
 8003afa:	4620      	mov	r0, r4
}
 8003afc:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 8003afe:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8003b00:	2c00      	cmp	r4, #0
 8003b02:	d1ea      	bne.n	8003ada <_strtok.constprop.13+0xa>
    return NULL;
 8003b04:	2000      	movs	r0, #0
 8003b06:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8003b08:	6028      	str	r0, [r5, #0]
 8003b0a:	e7f4      	b.n	8003af6 <_strtok.constprop.13+0x26>
 8003b0c:	08004740 	.word	0x08004740

08003b10 <long_to_string_with_divisor.constprop.12>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8003b10:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8003b12:	f100 070b 	add.w	r7, r0, #11
 8003b16:	463c      	mov	r4, r7
 8003b18:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 8003b1a:	fbb1 f6f2 	udiv	r6, r1, r2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 8003b1e:	fbb5 f5f2 	udiv	r5, r5, r2
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 8003b22:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8003b26:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8003b2a:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8003b2c:	bfc8      	it	gt
 8003b2e:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
 8003b38:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8003b3a:	2d00      	cmp	r5, #0
 8003b3c:	d1ed      	bne.n	8003b1a <long_to_string_with_divisor.constprop.12+0xa>

  i = (int)(p + MAX_FILLER - q);
 8003b3e:	1b3a      	subs	r2, r7, r4
 8003b40:	4402      	add	r2, r0
 8003b42:	e001      	b.n	8003b48 <long_to_string_with_divisor.constprop.12+0x38>
 8003b44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8003b48:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8003b4c:	4290      	cmp	r0, r2
 8003b4e:	d1f9      	bne.n	8003b44 <long_to_string_with_divisor.constprop.12+0x34>

  return p;
}
 8003b50:	bcf0      	pop	{r4, r5, r6, r7}
 8003b52:	4770      	bx	lr
	...

08003b60 <chprintf.constprop.2>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8003b60:	b40e      	push	{r1, r2, r3}
 8003b62:	b500      	push	{lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	ab03      	add	r3, sp, #12
 8003b68:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 8003b6c:	4804      	ldr	r0, [pc, #16]	; (8003b80 <chprintf.constprop.2+0x20>)
 8003b6e:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8003b70:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8003b72:	f7fe f91d 	bl	8001db0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8003b76:	b002      	add	sp, #8
 8003b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b7c:	b003      	add	sp, #12
 8003b7e:	4770      	bx	lr
 8003b80:	20000dd0 	.word	0x20000dd0
	...

08003b90 <memcmp>:
 8003b90:	2a03      	cmp	r2, #3
 8003b92:	b470      	push	{r4, r5, r6}
 8003b94:	d926      	bls.n	8003be4 <memcmp+0x54>
 8003b96:	ea40 0301 	orr.w	r3, r0, r1
 8003b9a:	079b      	lsls	r3, r3, #30
 8003b9c:	d011      	beq.n	8003bc2 <memcmp+0x32>
 8003b9e:	7804      	ldrb	r4, [r0, #0]
 8003ba0:	780d      	ldrb	r5, [r1, #0]
 8003ba2:	42ac      	cmp	r4, r5
 8003ba4:	d122      	bne.n	8003bec <memcmp+0x5c>
 8003ba6:	4402      	add	r2, r0
 8003ba8:	1c43      	adds	r3, r0, #1
 8003baa:	e005      	b.n	8003bb8 <memcmp+0x28>
 8003bac:	f813 4b01 	ldrb.w	r4, [r3], #1
 8003bb0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8003bb4:	42ac      	cmp	r4, r5
 8003bb6:	d119      	bne.n	8003bec <memcmp+0x5c>
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d1f7      	bne.n	8003bac <memcmp+0x1c>
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	bc70      	pop	{r4, r5, r6}
 8003bc0:	4770      	bx	lr
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	681e      	ldr	r6, [r3, #0]
 8003bc8:	6825      	ldr	r5, [r4, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	42ae      	cmp	r6, r5
 8003bce:	4621      	mov	r1, r4
 8003bd0:	f103 0304 	add.w	r3, r3, #4
 8003bd4:	f104 0404 	add.w	r4, r4, #4
 8003bd8:	d104      	bne.n	8003be4 <memcmp+0x54>
 8003bda:	3a04      	subs	r2, #4
 8003bdc:	2a03      	cmp	r2, #3
 8003bde:	4618      	mov	r0, r3
 8003be0:	4621      	mov	r1, r4
 8003be2:	d8f0      	bhi.n	8003bc6 <memcmp+0x36>
 8003be4:	2a00      	cmp	r2, #0
 8003be6:	d1da      	bne.n	8003b9e <memcmp+0xe>
 8003be8:	4610      	mov	r0, r2
 8003bea:	e7e8      	b.n	8003bbe <memcmp+0x2e>
 8003bec:	1b60      	subs	r0, r4, r5
 8003bee:	bc70      	pop	{r4, r5, r6}
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
	...

08003c00 <memset>:
 8003c00:	b470      	push	{r4, r5, r6}
 8003c02:	0784      	lsls	r4, r0, #30
 8003c04:	d046      	beq.n	8003c94 <memset+0x94>
 8003c06:	1e54      	subs	r4, r2, #1
 8003c08:	2a00      	cmp	r2, #0
 8003c0a:	d041      	beq.n	8003c90 <memset+0x90>
 8003c0c:	b2cd      	uxtb	r5, r1
 8003c0e:	4603      	mov	r3, r0
 8003c10:	e002      	b.n	8003c18 <memset+0x18>
 8003c12:	1e62      	subs	r2, r4, #1
 8003c14:	b3e4      	cbz	r4, 8003c90 <memset+0x90>
 8003c16:	4614      	mov	r4, r2
 8003c18:	f803 5b01 	strb.w	r5, [r3], #1
 8003c1c:	079a      	lsls	r2, r3, #30
 8003c1e:	d1f8      	bne.n	8003c12 <memset+0x12>
 8003c20:	2c03      	cmp	r4, #3
 8003c22:	d92e      	bls.n	8003c82 <memset+0x82>
 8003c24:	b2cd      	uxtb	r5, r1
 8003c26:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003c2a:	2c0f      	cmp	r4, #15
 8003c2c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003c30:	d919      	bls.n	8003c66 <memset+0x66>
 8003c32:	4626      	mov	r6, r4
 8003c34:	f103 0210 	add.w	r2, r3, #16
 8003c38:	3e10      	subs	r6, #16
 8003c3a:	2e0f      	cmp	r6, #15
 8003c3c:	f842 5c10 	str.w	r5, [r2, #-16]
 8003c40:	f842 5c0c 	str.w	r5, [r2, #-12]
 8003c44:	f842 5c08 	str.w	r5, [r2, #-8]
 8003c48:	f842 5c04 	str.w	r5, [r2, #-4]
 8003c4c:	f102 0210 	add.w	r2, r2, #16
 8003c50:	d8f2      	bhi.n	8003c38 <memset+0x38>
 8003c52:	f1a4 0210 	sub.w	r2, r4, #16
 8003c56:	f022 020f 	bic.w	r2, r2, #15
 8003c5a:	f004 040f 	and.w	r4, r4, #15
 8003c5e:	3210      	adds	r2, #16
 8003c60:	2c03      	cmp	r4, #3
 8003c62:	4413      	add	r3, r2
 8003c64:	d90d      	bls.n	8003c82 <memset+0x82>
 8003c66:	461e      	mov	r6, r3
 8003c68:	4622      	mov	r2, r4
 8003c6a:	3a04      	subs	r2, #4
 8003c6c:	2a03      	cmp	r2, #3
 8003c6e:	f846 5b04 	str.w	r5, [r6], #4
 8003c72:	d8fa      	bhi.n	8003c6a <memset+0x6a>
 8003c74:	1f22      	subs	r2, r4, #4
 8003c76:	f022 0203 	bic.w	r2, r2, #3
 8003c7a:	3204      	adds	r2, #4
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f004 0403 	and.w	r4, r4, #3
 8003c82:	b12c      	cbz	r4, 8003c90 <memset+0x90>
 8003c84:	b2c9      	uxtb	r1, r1
 8003c86:	441c      	add	r4, r3
 8003c88:	f803 1b01 	strb.w	r1, [r3], #1
 8003c8c:	42a3      	cmp	r3, r4
 8003c8e:	d1fb      	bne.n	8003c88 <memset+0x88>
 8003c90:	bc70      	pop	{r4, r5, r6}
 8003c92:	4770      	bx	lr
 8003c94:	4614      	mov	r4, r2
 8003c96:	4603      	mov	r3, r0
 8003c98:	e7c2      	b.n	8003c20 <memset+0x20>
 8003c9a:	bf00      	nop
 8003c9c:	0000      	movs	r0, r0
	...

08003ca0 <strcasecmp>:
 8003ca0:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <strcasecmp+0x3c>)
 8003ca2:	b430      	push	{r4, r5}
 8003ca4:	681d      	ldr	r5, [r3, #0]
 8003ca6:	e002      	b.n	8003cae <strcasecmp+0xe>
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	d114      	bne.n	8003cd6 <strcasecmp+0x36>
 8003cac:	b19a      	cbz	r2, 8003cd6 <strcasecmp+0x36>
 8003cae:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003cb2:	18ea      	adds	r2, r5, r3
 8003cb4:	7852      	ldrb	r2, [r2, #1]
 8003cb6:	f002 0203 	and.w	r2, r2, #3
 8003cba:	2a01      	cmp	r2, #1
 8003cbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cc0:	bf08      	it	eq
 8003cc2:	3320      	addeq	r3, #32
 8003cc4:	18ac      	adds	r4, r5, r2
 8003cc6:	7864      	ldrb	r4, [r4, #1]
 8003cc8:	f004 0403 	and.w	r4, r4, #3
 8003ccc:	2c01      	cmp	r4, #1
 8003cce:	d1eb      	bne.n	8003ca8 <strcasecmp+0x8>
 8003cd0:	3220      	adds	r2, #32
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	d0eb      	beq.n	8003cae <strcasecmp+0xe>
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	bc30      	pop	{r4, r5}
 8003cda:	4770      	bx	lr
 8003cdc:	20000834 	.word	0x20000834

08003ce0 <strpbrk>:
 8003ce0:	b430      	push	{r4, r5}
 8003ce2:	7804      	ldrb	r4, [r0, #0]
 8003ce4:	b1ec      	cbz	r4, 8003d22 <strpbrk+0x42>
 8003ce6:	780d      	ldrb	r5, [r1, #0]
 8003ce8:	b1ad      	cbz	r5, 8003d16 <strpbrk+0x36>
 8003cea:	42ac      	cmp	r4, r5
 8003cec:	d00e      	beq.n	8003d0c <strpbrk+0x2c>
 8003cee:	460a      	mov	r2, r1
 8003cf0:	e001      	b.n	8003cf6 <strpbrk+0x16>
 8003cf2:	429c      	cmp	r4, r3
 8003cf4:	d009      	beq.n	8003d0a <strpbrk+0x2a>
 8003cf6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f9      	bne.n	8003cf2 <strpbrk+0x12>
 8003cfe:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8003d02:	2c00      	cmp	r4, #0
 8003d04:	d1f0      	bne.n	8003ce8 <strpbrk+0x8>
 8003d06:	7815      	ldrb	r5, [r2, #0]
 8003d08:	e000      	b.n	8003d0c <strpbrk+0x2c>
 8003d0a:	4625      	mov	r5, r4
 8003d0c:	2d00      	cmp	r5, #0
 8003d0e:	bf08      	it	eq
 8003d10:	2000      	moveq	r0, #0
 8003d12:	bc30      	pop	{r4, r5}
 8003d14:	4770      	bx	lr
 8003d16:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8003d1a:	460a      	mov	r2, r1
 8003d1c:	2c00      	cmp	r4, #0
 8003d1e:	d1e3      	bne.n	8003ce8 <strpbrk+0x8>
 8003d20:	e7f1      	b.n	8003d06 <strpbrk+0x26>
 8003d22:	4620      	mov	r0, r4
 8003d24:	bc30      	pop	{r4, r5}
 8003d26:	4770      	bx	lr
	...

08003d30 <strspn>:
 8003d30:	b470      	push	{r4, r5, r6}
 8003d32:	7804      	ldrb	r4, [r0, #0]
 8003d34:	b1a4      	cbz	r4, 8003d60 <strspn+0x30>
 8003d36:	4605      	mov	r5, r0
 8003d38:	780e      	ldrb	r6, [r1, #0]
 8003d3a:	b14e      	cbz	r6, 8003d50 <strspn+0x20>
 8003d3c:	42b4      	cmp	r4, r6
 8003d3e:	d00a      	beq.n	8003d56 <strspn+0x26>
 8003d40:	460a      	mov	r2, r1
 8003d42:	e001      	b.n	8003d48 <strspn+0x18>
 8003d44:	429c      	cmp	r4, r3
 8003d46:	d006      	beq.n	8003d56 <strspn+0x26>
 8003d48:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f9      	bne.n	8003d44 <strspn+0x14>
 8003d50:	1a28      	subs	r0, r5, r0
 8003d52:	bc70      	pop	{r4, r5, r6}
 8003d54:	4770      	bx	lr
 8003d56:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8003d5a:	2c00      	cmp	r4, #0
 8003d5c:	d1ed      	bne.n	8003d3a <strspn+0xa>
 8003d5e:	e7f7      	b.n	8003d50 <strspn+0x20>
 8003d60:	4620      	mov	r0, r4
 8003d62:	e7f6      	b.n	8003d52 <strspn+0x22>
	...
 8003d70:	00171615 	.word	0x00171615
	...

08003d80 <zero_status>:
	...

08003d90 <active_status>:
	...

08003da0 <halted_status>:
 8003da0:	00000001 00000000 00000000 00000000     ................

08003db0 <vcom_configuration_descriptor_data>:
 8003db0:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8003dc0:	24050001 05011000 01000124 02022404     ...$....$....$..
 8003dd0:	00062405 82050701 ff000803 00010409     .$..............
 8003de0:	00000a02 01050700 00004002 02810507     .........@......
 8003df0:	00000040 00000000 00000000 00000000     @...............

08003e00 <vcom_string0>:
 8003e00:	04090304 00000000 00000000 00000000     ................

08003e10 <ep2config>:
 8003e10:	00000003 00000000 080002b1 00000000     ................
 8003e20:	00000010 20000b14 00000000 00000001     ....... ........
	...

08003e40 <vcom_string2>:
 8003e40:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 8003e50:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 8003e60:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 8003e70:	006f0050 00740072 00000000 00000000     P.o.r.t.........

08003e80 <vcom_string3>:
 8003e80:	00330308 00310030 00000000 00000000     ..3.0.1.........

08003e90 <vcom_string1>:
 8003e90:	004c0312 00610065 004c0066 00620061     ..L.e.a.f.L.a.b.
 8003ea0:	00000073 00000000 00000000 00000000     s...............

08003eb0 <vcom_strings>:
 8003eb0:	00000004 08003e00 00000012 08003e90     .....>.......>..
 8003ec0:	00000038 08003e40 00000008 08003e80     8...@>.......>..

08003ed0 <vcom_device_descriptor>:
 8003ed0:	00000012 08003ee0 00000000 00000000     .....>..........

08003ee0 <vcom_device_descriptor_data>:
 8003ee0:	01100112 40000002 00041eaf 02010200     .......@........
 8003ef0:	00000103 00000000 00000000 00000000     ................

08003f00 <ls_spicfg>:
 8003f00:	00000000 40010800 00300004 00000000     .......@..0.....
 8003f10:	67617355 25203a65 000a0d73 74737973     Usage: %s...syst
 8003f20:	00656d69 0d756c25 0000000a 6c656873     ime.%lu.....shel
 8003f30:	0000006c 54530a0d 28686365 67616173     l.....STech(saag
 8003f40:	742e7261 40686365 69616d67 6f632e6c     ar.tech@gmail.co
 8003f50:	0a0d296d 00000000 73657567 00203e74     m)......guest> .
 8003f60:	0000445e 206f6f74 796e616d 67726120     ^D..too many arg
 8003f70:	6e656d75 0a0d7374 00000000 74697865     uments......exit
 8003f80:	00000000 706c6568 00000000 6d6d6f43     ....help....Comm
 8003f90:	73646e61 6568203a 6520706c 20746978     ands: help exit 
 8003fa0:	00000000 00207325 00007325 0a0d3f20     ....%s .%s.. ?..
 8003fb0:	00000000 6f6c0a0d 74756f67 00000000     ......logout....
 8003fc0:	2066724e 00005854 6c756e28 0000296c     Nrf TX..(null)..
 8003fd0:	67617355 6d203a65 0a0d6d65 00000000     Usage: mem......
 8003fe0:	65726f63 65726620 656d2065 79726f6d     core free memory
 8003ff0:	25203a20 79622075 0d736574 0000000a      : %u bytes.....
 8004000:	70616568 61726620 6e656d67 20207374     heap fragments  
 8004010:	25203a20 000a0d75 70616568 65726620      : %u...heap fre
 8004020:	6f742065 206c6174 25203a20 79622075     e total  : %u by
 8004030:	0d736574 0000000a 6f666e69 00000000     tes.....info....

08004040 <crc16_tab>:
 8004040:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
 8004050:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
 8004060:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
 8004070:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
 8004080:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
 8004090:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
 80040a0:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
 80040b0:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
 80040c0:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
 80040d0:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
 80040e0:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
 80040f0:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
 8004100:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
 8004110:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
 8004120:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
 8004130:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
 8004140:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
 8004150:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
 8004160:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
 8004170:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
 8004180:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
 8004190:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
 80041a0:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
 80041b0:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
 80041c0:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
 80041d0:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
 80041e0:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
 80041f0:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
 8004200:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
 8004210:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
 8004220:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
 8004230:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

08004240 <vcom_configuration_descriptor>:
 8004240:	00000043 08003db0 00000000 00000000     C....=..........

08004250 <ep1config>:
 8004250:	00000002 00000000 08001111 08001091     ................
 8004260:	00400040 20000b40 20000b28 00000002     @.@.@.. (.. ....
	...

08004280 <serusbcfg>:
 8004280:	20000b5c 00020101 00000000 00000000     \.. ............

08004290 <_stm32_dma_streams>:
 8004290:	40020008 40020004 000b0000 4002001c     ...@...@.......@
 80042a0:	40020004 000c0104 40020030 40020004     ...@....0..@...@
 80042b0:	000d0208 40020044 40020004 000e030c     ....D..@...@....
 80042c0:	40020058 40020004 000f0410 4002006c     X..@...@....l..@
 80042d0:	40020004 00100514 40020080 40020004     ...@.......@...@
 80042e0:	00110618 00000000 00000000 00000000     ................

080042f0 <usbcfg>:
 80042f0:	080014c1 08001491 080002c1 00000000     ................

08004300 <ch_debug>:
 8004300:	6e69616d 18011600 08440204 1814100c     main......D.....
 8004310:	1e1d1c00 00000000 00000000 00000000     ................
 8004320:	6e696c62 0072656b 67617355 74203a65     blinker.Usage: t
 8004330:	61657268 0a0d7364 00000000 20202020     hreads......    
 8004340:	72646461 20202020 63617473 7270206b     addr    stack pr
 8004350:	72206f69 20736665 20202020 74617473     io refs     stat
 8004360:	000a0d65 6c383025 30252078 20786c38     e...%08lx %08lx 
 8004370:	756c3425 6c342520 39252075 000a0d73     %4lu %4lu %9s...
 8004380:	756c6156 203a2065 0d643525 00000000     Value : %5d.....
 8004390:	67617355 65203a65 0a0d636e 00000000     Usage: enc......
 80043a0:	6f727245 25203a72 000a0d78 3b315b1b     Error: %x....[1;
 80043b0:	0d6d3233 0000000a 615f7852 255b6464     32m.....Rx_add[%
 80043c0:	3a205d64 25783020 78302058 30205825     d] : 0x%X 0x%X 0
 80043d0:	20582578 58257830 25783020 000a0d58     x%X 0x%X 0x%X...
 80043e0:	615f7854 3a206464 25783020 78302058     Tx_add : 0x%X 0x
 80043f0:	30205825 20582578 58257830 25783020     %X 0x%X 0x%X 0x%
 8004400:	000a0d58 6d305b1b 00000a0d 656c6469     X....[0m....idle
 8004410:	00000000 006d656d 00636e65 00737473     ....mem.enc.sts.
 8004420:	00646874 44414552 00000059 52525543     thd.READY...CURR
 8004430:	00544e45 54535457 00545241 50535553     ENT.WTSTART.SUSP
 8004440:	45444e45 00000044 55455551 00004445     ENDED...QUEUED..
 8004450:	45535457 0000004d 544d5457 00000058     WTSEM...WTMTX...
 8004460:	4f435457 0000444e 45454c53 474e4950     WTCOND..SLEEPING
 8004470:	00000000 58455457 00005449 524f5457     ....WTEXIT..WTOR
 8004480:	00545645 4e415457 54564544 00000000     EVT.WTANDEVT....
 8004490:	4d444e53 00514753 4d444e53 00004753     SNDMSGQ.SNDMSG..
 80044a0:	534d5457 00000047 414e4946 0000004c     WTMSG...FINAL...

080044b0 <commands>:
 80044b0:	08004414 080020e1 08004418 08002251     .D... ...D..Q"..
 80044c0:	0800441c 080022a1 08004420 080021b1     .D...".. D...!..
	...

080044e0 <states.8216>:
 80044e0:	08004424 0800442c 08004434 0800443c     $D..,D..4D..<D..
 80044f0:	08004448 08004450 08004458 08004460     HD..PD..XD..`D..
 8004500:	08004468 08004474 0800447c 08004484     hD..tD..|D...D..
 8004510:	08004490 08004498 080044a0 080044a8     .D...D...D...D..

08004520 <shell_cfg1>:
 8004520:	20000dd0 080044b0 00000000 00000000     ... .D..........

08004530 <vmt>:
 8004530:	08000e41 08000f61 08000ec1 08000fd1     A...a...........
 8004540:	08000eb1 08000fc1 08000e31 08000f51     ........1...Q...
 8004550:	20414d44 6c696166 00657275 6e72654b     DMA failure.Kern
 8004560:	203a6c65 20202020 73252020 00000a0d     el:       %s....
 8004570:	2e302e33 00000031 706d6f43 72656c69     3.0.1...Compiler
 8004580:	2020203a 73252020 00000a0d 20434347     :     %s....GCC 
 8004590:	2e392e34 30322033 35303531 28203932     4.9.3 20150529 (
 80045a0:	656c6572 29657361 52415b20 6d652f4d     release) [ARM/em
 80045b0:	64646562 342d6465 622d395f 636e6172     bedded-4_9-branc
 80045c0:	65722068 69736976 32206e6f 37393732     h revision 22797
 80045d0:	00005d37 68637241 63657469 65727574     7]..Architecture
 80045e0:	7325203a 00000a0d 764d5241 004d2d37     : %s....ARMv7-M.
 80045f0:	65726f43 72615620 746e6169 7325203a     Core Variant: %s
 8004600:	00000a0d 74726f43 4d2d7865 00000033     ....Cortex-M3...
 8004610:	74726f50 666e4920 20203a6f 73252020     Port Info:    %s
 8004620:	00000a0d 61766441 6465636e 72656b20     ....Advanced ker
 8004630:	206c656e 65646f6d 00000000 74616c50     nel mode....Plat
 8004640:	6d726f66 2020203a 73252020 00000a0d     form:     %s....
 8004650:	334d5453 30314632 65502078 726f6672     STM32F10x Perfor
 8004660:	636e616d 694c2065 4d20656e 75696465     mance Line Mediu
 8004670:	6544206d 7469736e 00000079 72616f42     m Density...Boar
 8004680:	20203a64 20202020 73252020 00000a0d     d:        %s....
 8004690:	6661654c 7362614c 70614d20 4d20656c     LeafLabs Maple M
 80046a0:	00696e69 6c697542 69742064 203a656d     ini.Build time: 
 80046b0:	73252020 73257325 00000a0d 20766f4e       %s%s%s....Nov 
 80046c0:	32203832 00373130 00202d20 353a3830     28 2017. - .08:5
 80046d0:	33323a30 00000000 00000000 00000000     0:23............

080046e0 <ep0config>:
 80046e0:	00000000 08000681 08000591 080003e1     ................
 80046f0:	00400040 20000db4 20000db4 00000001     @.@.... ... ....
 8004700:	20000dc8 00000000 00000000 00000000     ... ............

08004710 <cfgtab.7009>:
 8004710:	08040204 07030008 08080808 08080808     ................
 8004720:	00000f0b 00000000 00000000 00000000     ................

08004730 <CSWTCH.32>:
 8004730:	00000400 00000600 00000000 00000000     ................
 8004740:	00000920 00000000 00000000 00000000      ...............

08004750 <_ctype_>:
 8004750:	20202000 20202020 28282020 20282828     .         ((((( 
 8004760:	20202020 20202020 20202020 20202020                     
 8004770:	10108820 10101010 10101010 10101010      ...............
 8004780:	04040410 04040404 10040404 10101010     ................
 8004790:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80047a0:	01010101 01010101 01010101 10101010     ................
 80047b0:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80047c0:	02020202 02020202 02020202 10101010     ................
 80047d0:	00000020 00000000 00000000 00000000      ...............
	...
